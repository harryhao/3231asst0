diff --git a/.cproject b/.cproject
new file mode 100644
index 0000000..5777df2
--- /dev/null
+++ b/.cproject
@@ -0,0 +1,248 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<?fileVersion 4.0.0?>
+
+<cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
+	<storageModule moduleId="org.eclipse.cdt.core.settings">
+		<cconfiguration id="0.526539976">
+			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="0.526539976" moduleId="org.eclipse.cdt.core.settings" name="Default">
+				<externalSettings/>
+				<extensions>
+					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
+					<extension id="org.eclipse.cdt.core.GNU_ELF" point="org.eclipse.cdt.core.BinaryParser"/>
+					<extension id="org.eclipse.cdt.core.VCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+				</extensions>
+			</storageModule>
+			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
+				<configuration artifactName="${ProjName}" buildProperties="" description="" id="0.526539976" name="Default" parent="org.eclipse.cdt.build.core.prefbase.cfg">
+					<folderInfo id="0.526539976." name="/" resourcePath="">
+						<toolChain id="org.eclipse.cdt.build.core.prefbase.toolchain.1628448610" name="No ToolChain" resourceTypeBasedDiscovery="false" superClass="org.eclipse.cdt.build.core.prefbase.toolchain">
+							<targetPlatform binaryParser="org.eclipse.cdt.core.ELF;org.eclipse.cdt.core.GNU_ELF" id="org.eclipse.cdt.build.core.prefbase.toolchain.1628448610.655152728" name=""/>
+							<builder autoBuildTarget="all" buildPath="${workspace_loc:/cs3231asst0}/kern/compile/ASST0" cleanBuildTarget="clean" enableAutoBuild="false" enableCleanBuild="true" enabledIncrementalBuild="true" id="org.eclipse.cdt.build.core.settings.default.builder.1209605520" incrementalBuildTarget="all" keepEnvironmentInBuildfile="false" managedBuildOn="false" name="Gnu Make Builder" parallelizationNumber="1" superClass="org.eclipse.cdt.build.core.settings.default.builder"/>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.libs.1668329195" name="holder for library settings" superClass="org.eclipse.cdt.build.core.settings.holder.libs"/>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.2029355115" name="Assembly" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.2134138990" languageId="org.eclipse.cdt.core.assembly" languageName="Assembly" sourceContentType="org.eclipse.cdt.core.asmSource" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.2003870338" name="GNU C++" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.978746553" languageId="org.eclipse.cdt.core.g++" languageName="GNU C++" sourceContentType="org.eclipse.cdt.core.cxxSource,org.eclipse.cdt.core.cxxHeader" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.1227621106" name="GNU C" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.163366060" languageId="org.eclipse.cdt.core.gcc" languageName="GNU C" sourceContentType="org.eclipse.cdt.core.cSource,org.eclipse.cdt.core.cHeader" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+						</toolChain>
+					</folderInfo>
+				</configuration>
+			</storageModule>
+			<storageModule moduleId="scannerConfiguration">
+				<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
+				<profile id="org.eclipse.cdt.make.core.GCCStandardMakePerProjectProfile">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="specsFile">
+						<runAction arguments="-E -P -v -dD ${plugin_state_location}/${specs_file}" command="gcc" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<profile id="org.eclipse.cdt.make.core.GCCStandardMakePerFileProfile">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="makefileGenerator">
+						<runAction arguments="-E -P -v -dD" command="" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<profile id="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfile">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="specsFile">
+						<runAction arguments="-E -P -v -dD ${plugin_state_location}/${specs_file}" command="gcc" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<profile id="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="specsFile">
+						<runAction arguments="-E -P -v -dD ${plugin_state_location}/specs.cpp" command="g++" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<profile id="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="specsFile">
+						<runAction arguments="-E -P -v -dD ${plugin_state_location}/specs.c" command="gcc" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<profile id="org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfile">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="specsFile">
+						<runAction arguments="-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/${specs_file}&quot;'" command="sh" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<profile id="org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileCPP">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="specsFile">
+						<runAction arguments="-c 'g++ -E -P -v -dD &quot;${plugin_state_location}/specs.cpp&quot;'" command="sh" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<profile id="org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileC">
+					<buildOutputProvider>
+						<openAction enabled="true" filePath=""/>
+						<parser enabled="true"/>
+					</buildOutputProvider>
+					<scannerInfoProvider id="specsFile">
+						<runAction arguments="-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/specs.c&quot;'" command="sh" useDefault="true"/>
+						<parser enabled="true"/>
+					</scannerInfoProvider>
+				</profile>
+				<scannerConfigBuildInfo instanceId="0.526539976">
+					<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
+					<profile id="org.eclipse.cdt.make.core.GCCStandardMakePerProjectProfile">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="specsFile">
+							<runAction arguments="-E -P -v -dD ${plugin_state_location}/${specs_file}" command="gcc" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+					<profile id="org.eclipse.cdt.make.core.GCCStandardMakePerFileProfile">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="makefileGenerator">
+							<runAction arguments="-E -P -v -dD" command="" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+					<profile id="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfile">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="specsFile">
+							<runAction arguments="-E -P -v -dD ${plugin_state_location}/${specs_file}" command="gcc" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+					<profile id="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="specsFile">
+							<runAction arguments="-E -P -v -dD ${plugin_state_location}/specs.cpp" command="g++" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+					<profile id="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="specsFile">
+							<runAction arguments="-E -P -v -dD ${plugin_state_location}/specs.c" command="gcc" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+					<profile id="org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfile">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="specsFile">
+							<runAction arguments="-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/${specs_file}&quot;'" command="sh" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+					<profile id="org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileCPP">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="specsFile">
+							<runAction arguments="-c 'g++ -E -P -v -dD &quot;${plugin_state_location}/specs.cpp&quot;'" command="sh" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+					<profile id="org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileC">
+						<buildOutputProvider>
+							<openAction enabled="true" filePath=""/>
+							<parser enabled="true"/>
+						</buildOutputProvider>
+						<scannerInfoProvider id="specsFile">
+							<runAction arguments="-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/specs.c&quot;'" command="sh" useDefault="true"/>
+							<parser enabled="true"/>
+						</scannerInfoProvider>
+					</profile>
+				</scannerConfigBuildInfo>
+			</storageModule>
+			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
+			<storageModule moduleId="org.eclipse.cdt.make.core.buildtargets">
+				<buildTargets>
+					<target name="all" path="kern/compile/ASST0" targetID="org.eclipse.cdt.build.MakeTargetBuilder">
+						<buildCommand>make</buildCommand>
+						<buildArguments/>
+						<buildTarget>all</buildTarget>
+						<stopOnError>true</stopOnError>
+						<useDefaultCommand>true</useDefaultCommand>
+						<runAllBuilders>true</runAllBuilders>
+					</target>
+					<target name="clean" path="kern/compile/ASST0" targetID="org.eclipse.cdt.build.MakeTargetBuilder">
+						<buildCommand>make</buildCommand>
+						<buildArguments/>
+						<buildTarget>clean</buildTarget>
+						<stopOnError>true</stopOnError>
+						<useDefaultCommand>true</useDefaultCommand>
+						<runAllBuilders>true</runAllBuilders>
+					</target>
+					<target name="depend" path="kern/compile/ASST0" targetID="org.eclipse.cdt.build.MakeTargetBuilder">
+						<buildCommand>make</buildCommand>
+						<buildArguments/>
+						<buildTarget>depend</buildTarget>
+						<stopOnError>true</stopOnError>
+						<useDefaultCommand>true</useDefaultCommand>
+						<runAllBuilders>true</runAllBuilders>
+					</target>
+					<target name="install" path="kern/compile/ASST0" targetID="org.eclipse.cdt.build.MakeTargetBuilder">
+						<buildCommand>make</buildCommand>
+						<buildArguments/>
+						<buildTarget>install</buildTarget>
+						<stopOnError>true</stopOnError>
+						<useDefaultCommand>true</useDefaultCommand>
+						<runAllBuilders>true</runAllBuilders>
+					</target>
+				</buildTargets>
+			</storageModule>
+		</cconfiguration>
+	</storageModule>
+	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
+		<project id="cs3231asst0.null.1145863366" name="cs3231asst0"/>
+	</storageModule>
+</cproject>
diff --git a/.project b/.project
new file mode 100644
index 0000000..2c442e0
--- /dev/null
+++ b/.project
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>cs3231asst0</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
+			<triggers>clean,full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>?name?</key>
+					<value></value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.append_environment</key>
+					<value>true</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.autoBuildTarget</key>
+					<value>all</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.buildArguments</key>
+					<value></value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.buildCommand</key>
+					<value>make</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.buildLocation</key>
+					<value>${workspace_loc:/cs3231asst0}/kern/compile/ASST0</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>
+					<value>clean</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.contents</key>
+					<value>org.eclipse.cdt.make.core.activeConfigSettings</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.enableAutoBuild</key>
+					<value>false</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.enableCleanBuild</key>
+					<value>true</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.enableFullBuild</key>
+					<value>true</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.fullBuildTarget</key>
+					<value>all</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.stopOnError</key>
+					<value>true</value>
+				</dictionary>
+				<dictionary>
+					<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>
+					<value>true</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.cdt.core.cnature</nature>
+		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
+		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
+	</natures>
+</projectDescription>
diff --git a/.settings/org.eclipse.cdt.core.prefs b/.settings/org.eclipse.cdt.core.prefs
new file mode 100644
index 0000000..47a3988
--- /dev/null
+++ b/.settings/org.eclipse.cdt.core.prefs
@@ -0,0 +1,7 @@
+#Sun Mar 20 19:18:48 EST 2011
+eclipse.preferences.version=1
+environment/project/0.526539976/PATH/delimiter=\:
+environment/project/0.526539976/PATH/operation=replace
+environment/project/0.526539976/PATH/value=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/usr/games\:/home/harry/cs3231/os161/bin
+environment/project/0.526539976/append=true
+environment/project/0.526539976/appendContributed=true
diff --git a/build/install/bin/cat b/build/install/bin/cat
new file mode 100755
index 0000000..6a9b7bd
Binary files /dev/null and b/build/install/bin/cat differ
diff --git a/build/install/bin/cp b/build/install/bin/cp
new file mode 100755
index 0000000..3f02a2f
Binary files /dev/null and b/build/install/bin/cp differ
diff --git a/build/install/bin/false b/build/install/bin/false
new file mode 100755
index 0000000..f7e47bc
Binary files /dev/null and b/build/install/bin/false differ
diff --git a/build/install/bin/ln b/build/install/bin/ln
new file mode 100755
index 0000000..0334ae7
Binary files /dev/null and b/build/install/bin/ln differ
diff --git a/build/install/bin/ls b/build/install/bin/ls
new file mode 100755
index 0000000..f2999da
Binary files /dev/null and b/build/install/bin/ls differ
diff --git a/build/install/bin/mkdir b/build/install/bin/mkdir
new file mode 100755
index 0000000..bbfc233
Binary files /dev/null and b/build/install/bin/mkdir differ
diff --git a/build/install/bin/mv b/build/install/bin/mv
new file mode 100755
index 0000000..8b867b9
Binary files /dev/null and b/build/install/bin/mv differ
diff --git a/build/install/bin/pwd b/build/install/bin/pwd
new file mode 100755
index 0000000..860899b
Binary files /dev/null and b/build/install/bin/pwd differ
diff --git a/build/install/bin/rm b/build/install/bin/rm
new file mode 100755
index 0000000..0401206
Binary files /dev/null and b/build/install/bin/rm differ
diff --git a/build/install/bin/rmdir b/build/install/bin/rmdir
new file mode 100755
index 0000000..53e2f37
Binary files /dev/null and b/build/install/bin/rmdir differ
diff --git a/build/install/bin/sh b/build/install/bin/sh
new file mode 100755
index 0000000..8eb3217
Binary files /dev/null and b/build/install/bin/sh differ
diff --git a/build/install/bin/sync b/build/install/bin/sync
new file mode 100755
index 0000000..e77afe8
Binary files /dev/null and b/build/install/bin/sync differ
diff --git a/build/install/bin/true b/build/install/bin/true
new file mode 100755
index 0000000..2b3ed19
Binary files /dev/null and b/build/install/bin/true differ
diff --git a/build/install/hostbin/host-dumpsfs b/build/install/hostbin/host-dumpsfs
new file mode 100755
index 0000000..2a6a9cb
Binary files /dev/null and b/build/install/hostbin/host-dumpsfs differ
diff --git a/build/install/hostbin/host-hash b/build/install/hostbin/host-hash
new file mode 100755
index 0000000..89e30d7
Binary files /dev/null and b/build/install/hostbin/host-hash differ
diff --git a/build/install/hostbin/host-mksfs b/build/install/hostbin/host-mksfs
new file mode 100755
index 0000000..2767a2b
Binary files /dev/null and b/build/install/hostbin/host-mksfs differ
diff --git a/build/install/hostbin/host-sfsck b/build/install/hostbin/host-sfsck
new file mode 100755
index 0000000..c8630d7
Binary files /dev/null and b/build/install/hostbin/host-sfsck differ
diff --git a/build/install/hostinclude/hostcompat.h b/build/install/hostinclude/hostcompat.h
new file mode 100644
index 0000000..b772137
--- /dev/null
+++ b/build/install/hostinclude/hostcompat.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+
+#include <sys/types.h>
+
+void hostcompat_init(int argc, char **argv);
+
+time_t __time(time_t *secs, unsigned long *nsecs);
diff --git a/build/install/hostinclude/kern b/build/install/hostinclude/kern
new file mode 120000
index 0000000..d202793
--- /dev/null
+++ b/build/install/hostinclude/kern
@@ -0,0 +1 @@
+../include/kern
\ No newline at end of file
diff --git a/build/install/include/assert.h b/build/install/include/assert.h
new file mode 100644
index 0000000..4dbc2cd
--- /dev/null
+++ b/build/install/include/assert.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _ASSERT_H_
+#define _ASSERT_H_
+
+/*
+ * Required by the C standard
+ */
+#undef assert
+
+/*
+ * Function to call when an assert fails.
+ */
+void __bad_assert(const char *file, int line, const char *msg);
+
+/*
+ * Asserts are only "on" if NDEBUG isn't set. (This is standard C.)
+ */
+
+#ifdef NDEBUG
+
+#if 0 /* not allowed by the C standard */
+#define assert(x) ((void)(x))	/* retain any side effects of X */
+#else
+#define assert(x) ((void)0)	/* mysteriously hide any side effects of X */
+#endif
+
+#else
+#define assert(x) ((x) ? (void)0 : __bad_assert(__FILE__, __LINE__, #x))
+#endif
+
+
+#endif /* _ASSERT_H_ */
diff --git a/build/install/include/err.h b/build/install/include/err.h
new file mode 100644
index 0000000..7a51b88
--- /dev/null
+++ b/build/install/include/err.h
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _ERR_H_
+#define _ERR_H_
+
+#include <kern/types.h>  /* for __va_list */
+
+/*
+ * 4.4BSD error-printing functions.
+ *
+ * These print the program name and the supplied message, and
+ * (non-*x versions only) the string for the error currently
+ * stored in "errno", and a newline. The err* versions then
+ * exit with the supplied exitcode.
+ *
+ * The v* versions are to the non-v* versions like vprintf is to
+ * printf.
+ */
+
+void warn(const char *fmt, ...);
+void warnx(const char *fmt, ...);
+void err(int exitcode, const char *fmt, ...);
+void errx(int exitcode, const char *fmt, ...);
+
+void vwarn(const char *fmt, __va_list);
+void vwarnx(const char *fmt, __va_list);
+void verr(int exitcode, const char *fmt, __va_list);
+void verrx(int exitcode, const char *fmt, __va_list);
+
+#endif /* _ERR_H_ */
diff --git a/build/install/include/errno.h b/build/install/include/errno.h
new file mode 100644
index 0000000..6c45396
--- /dev/null
+++ b/build/install/include/errno.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _ERRNO_H_
+#define _ERRNO_H_
+
+/* Get the error codes from the kernel. */
+#include <kern/errno.h>
+
+/* Declare the standard global variable errno. */
+extern int errno;
+
+#endif /* _ERRNO_H_ */
diff --git a/build/install/include/fcntl.h b/build/install/include/fcntl.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/fcntl.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/kern/endian.h b/build/install/include/kern/endian.h
new file mode 100644
index 0000000..0d83e2b
--- /dev/null
+++ b/build/install/include/kern/endian.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_ENDIAN_H_
+#define _KERN_ENDIAN_H_
+
+/*
+ * Machine-independent and exported endianness definitions.
+ *
+ * Note: get these via <endian.h> in the kernel and <arpa/inet.h> in
+ * userland.
+ *
+ * This is the historic BSD way of defining endianness.
+ */
+
+#define _LITTLE_ENDIAN 1234
+#define _BIG_ENDIAN    4321
+#define _PDP_ENDIAN    3412
+
+/* This defines _BYTE_ORDER to one of the above. */
+#include <kern/machine/endian.h>
+
+
+#endif /* _KERN_ENDIAN_H_ */
diff --git a/build/install/include/kern/errmsg.h b/build/install/include/kern/errmsg.h
new file mode 100644
index 0000000..26e1e53
--- /dev/null
+++ b/build/install/include/kern/errmsg.h
@@ -0,0 +1,114 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_ERRMSG_H_
+#define _KERN_ERRMSG_H_
+
+/*
+ * Error strings.
+ * This table must agree with kern/errno.h.
+ *
+ * Note that since this actually defines sys_errlist and sys_nerrlist, it
+ * should only be included in one file. For the kernel, that file is 
+ * lib/misc.c; for userland it's lib/libc/strerror.c.
+ */
+const char *const sys_errlist[] = {
+	"Operation succeeded",        /* 0 */
+	"No such system call",        /* ENOSYS */
+	"Unimplemented feature",      /* EUNIMP */
+	"Out of memory",              /* ENOMEM */
+	"Operation would block",      /* EAGAIN (also EWOULDBLOCK) */
+	"Interrupted system call",    /* EINTR */
+	"Bad memory reference",       /* EFAULT */
+	"String too long",            /* ENAMETOOLONG */
+	"Invalid argument",           /* EINVAL */
+	"Operation not permitted",    /* EPERM */
+	"Permission denied",          /* EACCES */
+	"Too many processes",         /* EMPROC (EPROCLIM in Unix) */
+	"Too many processes in system",/* ENPROC */
+	"File is not executable",     /* ENOEXEC */
+	"Argument list too long",     /* E2BIG */
+	"No such process",            /* ESRCH */
+	"No child processes",         /* ECHILD */
+	"Not a directory",            /* ENOTDIR */
+	"Is a directory",             /* EISDIR */
+	"No such file or directory",  /* ENOENT */
+	"Too many levels of symbolic links",/* ELOOP */
+	"Directory not empty",        /* ENOTEMPTY */
+	"File or object exists",      /* EEXIST */
+	"Too many hard links",        /* EMLINK */
+	"Cross-device link",          /* EXDEV */
+	"No such device",             /* ENODEV */
+	"Device not available",       /* ENXIO */
+	"Device or resource busy",    /* EBUSY */
+	"Too many open files",        /* EMFILE */
+	"Too many open files in system",/* ENFILE */
+	"Bad file number",            /* EBADF */
+	"Invalid or inappropriate ioctl",/* EIOCTL (ENOTTY in Unix) */
+	"Input/output error",         /* EIO */
+	"Illegal seek",               /* ESPIPE */
+	"Broken pipe",                /* EPIPE */
+	"Read-only file system",      /* EROFS */
+	"No space left on device",    /* ENOSPC */
+	"Disc quota exceeded",        /* EDQUOT */
+	"File too large",             /* EFBIG */
+	"Invalid file type or format",/* EFTYPE */
+	"Argument out of range",      /* EDOM */
+	"Result out of range",        /* ERANGE */
+	"Invalid multibyte character sequence",/* EILSEQ */
+	"Not a socket",               /* ENOTSOCK */
+	"Is a socket",                /* EISSOCK (EOPNOTSUPP in Unix) */
+	"Socket is already connected",/* EISCONN */
+	"Socket is not connected",    /* ENOTCONN */
+	"Socket has been shut down",  /* ESHUTDOWN */
+	"Protocol family not supported",/* EPFNOSUPPORT */
+	"Socket type not supported",  /* ESOCKTNOSUPPORT */
+	"Protocol not supported",     /* EPROTONOSUPPORT */
+	"Protocol wrong type for socket",/* EPROTOTYPE */
+	"Address family not supported by protocol family",/* EAFNOSUPPORT */
+	"Protocol option not available",/* ENOPROTOOPT */
+	"Address already in use",     /* EADDRINUSE */
+	"Cannot assign requested address",/* EADDRNOTAVAIL */
+	"Network is down",            /* ENETDOWN */
+	"Network is unreachable",     /* ENETUNREACH */
+	"Host is down",               /* EHOSTDOWN */
+	"Host is unreachable",        /* EHOSTUNREACH */
+	"Connection refused",         /* ECONNREFUSED */
+	"Connection timed out",       /* ETIMEDOUT */
+	"Connection reset by peer",   /* ECONNRESET */
+	"Message too large",          /* EMSGSIZE */
+	"Threads operation not supported",/* ENOTSUP */
+};
+
+/*
+ * Number of entries in sys_errlist.
+ */
+const int sys_nerr = sizeof(sys_errlist)/sizeof(const char *);
+
+#endif /* _KERN_ERRMSG_H_ */
diff --git a/build/install/include/kern/errno.h b/build/install/include/kern/errno.h
new file mode 100644
index 0000000..6e5a91a
--- /dev/null
+++ b/build/install/include/kern/errno.h
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_ERRNO_H_
+#define _KERN_ERRNO_H_
+
+/*
+ * If you change this, be sure to make appropriate corresponding changes
+ * to kern/errmsg.h as well. You might also want to change the man page
+ * for errno to document the new error.
+ *
+ * This has been changed relative to OS/161 1.x to make the grouping
+ * more logical.
+ *
+ * Also note that this file has to work from assembler, so it should
+ * contain only symbolic constants.
+ */
+
+#define ENOSYS          1      /* No such system call */
+#define EUNIMP          2      /* Unimplemented feature */
+#define ENOMEM          3      /* Out of memory */
+#define EAGAIN          4      /* Operation would block */
+#define EINTR           5      /* Interrupted system call */
+#define EFAULT          6      /* Bad memory reference */
+#define ENAMETOOLONG    7      /* String too long */
+#define EINVAL          8      /* Invalid argument */
+#define EPERM           9      /* Operation not permitted */
+#define EACCES          10     /* Permission denied */
+#define EMPROC          11     /* Too many processes */
+#define ENPROC          12     /* Too many processes in system */
+#define ENOEXEC         13     /* File is not executable */
+#define E2BIG           14     /* Argument list too long */
+#define ESRCH           15     /* No such process */
+#define ECHILD          16     /* No child processes */
+#define ENOTDIR         17     /* Not a directory */
+#define EISDIR          18     /* Is a directory */
+#define ENOENT          19     /* No such file or directory */
+#define ELOOP           20     /* Too many levels of symbolic links */
+#define ENOTEMPTY       21     /* Directory not empty */
+#define EEXIST          22     /* File or object exists */
+#define EMLINK          23     /* Too many hard links */
+#define EXDEV           24     /* Cross-device link */
+#define ENODEV          25     /* No such device */
+#define ENXIO           26     /* Device not available */
+#define EBUSY           27     /* Device or resource busy */
+#define EMFILE          28     /* Too many open files */
+#define ENFILE          29     /* Too many open files in system */
+#define EBADF           30     /* Bad file number */
+#define EIOCTL          31     /* Invalid or inappropriate ioctl */
+#define EIO             32     /* Input/output error */
+#define ESPIPE          33     /* Illegal seek */
+#define EPIPE           34     /* Broken pipe */
+#define EROFS           35     /* Read-only file system */
+#define ENOSPC          36     /* No space left on device */
+#define EDQUOT          37     /* Disc quota exceeded */
+#define EFBIG           38     /* File too large */
+#define EFTYPE          39     /* Invalid file type or format */
+#define EDOM            40     /* Argument out of range */
+#define ERANGE          41     /* Result out of range */
+#define EILSEQ          42     /* Invalid multibyte character sequence */
+#define ENOTSOCK        43     /* Not a socket */
+#define EISSOCK         44     /* Is a socket */
+#define EISCONN         45     /* Socket is already connected */
+#define ENOTCONN        46     /* Socket is not connected */
+#define ESHUTDOWN       47     /* Socket has been shut down */
+#define EPFNOSUPPORT    48     /* Protocol family not supported */
+#define ESOCKTNOSUPPORT 49     /* Socket type not supported */
+#define EPROTONOSUPPORT 50     /* Protocol not supported */
+#define EPROTOTYPE      51     /* Protocol wrong type for socket */
+#define EAFNOSUPPORT   52 /* Address family not supported by protocol family */
+#define ENOPROTOOPT     53     /* Protocol option not available */
+#define EADDRINUSE      54     /* Address already in use */
+#define EADDRNOTAVAIL   55     /* Cannot assign requested address */
+#define ENETDOWN        56     /* Network is down */
+#define ENETUNREACH     57     /* Network is unreachable */
+#define EHOSTDOWN       58     /* Host is down */
+#define EHOSTUNREACH    59     /* Host is unreachable */
+#define ECONNREFUSED    60     /* Connection refused */
+#define ETIMEDOUT       61     /* Connection timed out */
+#define ECONNRESET      62     /* Connection reset by peer */
+#define EMSGSIZE        63     /* Message too large */
+#define ENOTSUP         64     /* Threads operation not supported */
+
+
+#endif /* _KERN_ERRNO_H_ */
diff --git a/build/install/include/kern/fcntl.h b/build/install/include/kern/fcntl.h
new file mode 100644
index 0000000..40e3f6c
--- /dev/null
+++ b/build/install/include/kern/fcntl.h
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_FCNTL_H_
+#define _KERN_FCNTL_H_
+
+/*
+ * Constants for libc's <fcntl.h>.
+ */
+
+
+/*
+ * Important
+ */
+
+/* Flags for open: choose one of these: */
+#define O_RDONLY      0      /* Open for read */
+#define O_WRONLY      1      /* Open for write */
+#define O_RDWR        2      /* Open for read and write */
+/* then or in any of these: */
+#define O_CREAT       4      /* Create file if it doesn't exist */
+#define O_EXCL        8      /* With O_CREAT, fail if file already exists */
+#define O_TRUNC      16      /* Truncate file upon open */
+#define O_APPEND     32      /* All writes happen at EOF (optional feature) */
+#define O_NOCTTY     64      /* Required by POSIX, != 0, but does nothing */
+
+/* Additional related definition */
+#define O_ACCMODE     3      /* mask for O_RDONLY/O_WRONLY/O_RDWR */
+
+/*
+ * Not so important
+ */
+
+/* operation codes for flock() */
+#define LOCK_SH         1       /* shared lock */
+#define LOCK_EX         2       /* exclusive lock */
+#define LOCK_UN         3       /* release the lock */
+#define LOCK_NB         4       /* flag: don't block */
+
+/*
+ * Mostly pretty useless
+ */
+
+/* fcntl() operations */
+#define F_DUPFD         0       /* like dup() but not quite */  
+#define F_GETFD         1       /* get per-handle flags */
+#define F_SETFD         2       /* set per-handle flags */
+#define F_GETFL         3       /* get per-file flags (O_* open flags) */
+#define F_SETFL         4       /* set per-file flags (O_* open flags) */
+#define F_GETOWN        5       /* get process/pgroup for SIGURG and SIGIO */
+#define F_SETOWN        6       /* set process/pgroup for SIGURG and SIGIO */
+#define F_GETLK         7       /* inspect record locks */
+#define F_SETLK         8       /* acquire record locks nonblocking */
+#define F_SETLKW        9       /* acquire record locks and wait */
+
+/* flag for F_GETFD and F_SETFD */
+#define FD_CLOEXEC      1       /* close-on-exec */
+
+/* modes for fcntl (F_GETLK/SETLK) locking */
+#define F_RDLCK         0       /* shared lock */
+#define F_WRLCK         1       /* exclusive lock */
+#define F_UNLCK         2       /* unlock */
+
+/* struct for fcntl (F_GETLK/SETLK) locking */
+struct flock {
+	off_t l_start;          /* place in file */
+	int l_whence;           /* SEEK_SET, SEEK_CUR, or SEEK_END */
+	int l_type;             /* F_RDLCK or F_WRLCK */
+	off_t l_len;            /* length of locked region */
+	pid_t l_pid;            /* process that holds the lock */
+};
+
+
+#endif /* _KERN_FCNTL_H_ */
diff --git a/build/install/include/kern/ioctl.h b/build/install/include/kern/ioctl.h
new file mode 100644
index 0000000..f374e7e
--- /dev/null
+++ b/build/install/include/kern/ioctl.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_IOCTL_H_
+#define _KERN_IOCTL_H_
+
+/*
+ * ioctl operation codes
+ */
+
+/* (none yet) */
+
+#endif /* _KERN_IOCTL_H_*/
diff --git a/build/install/include/kern/iovec.h b/build/install/include/kern/iovec.h
new file mode 100644
index 0000000..648a21e
--- /dev/null
+++ b/build/install/include/kern/iovec.h
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_IOVEC_H_
+#define _KERN_IOVEC_H_
+
+/*
+ * iovec structure, used in the readv/writev scatter/gather I/O calls,
+ * and within the kernel for keeping track of blocks of data for I/O.
+ */
+
+struct iovec {
+	/*
+	 * For maximum type safety, when in the kernel, distinguish
+	 * user pointers from kernel pointers.
+	 *
+	 * (A pointer is a user pointer if it *came* from userspace,
+	 * not necessarily if it *points* to userspace. If a system
+	 * call passes 0xdeadbeef, it points to the kernel, but it's
+	 * still a user pointer.)
+	 *
+	 * In userspace, there are only user pointers; also, the name
+	 * iov_base is defined by POSIX.
+	 *
+	 * Note that to work properly (without extra unwanted fiddling
+	 * around) this scheme requires that void* and userptr_t have
+	 * the same machine representation. This is theoretically
+	 * possible under the C standard, but such machines do not
+	 * exist in practice.
+	 */
+#ifdef _KERNEL
+        union {
+                userptr_t  iov_ubase;	/* user-supplied pointer */
+                void      *iov_kbase;	/* kernel-supplied pointer */
+        };
+#else
+	void *iov_base;			/* user-supplied pointer */
+#endif
+        size_t iov_len;			/* Length of data */
+};
+
+#endif /* _KERN_IOVEC_H_ */
diff --git a/build/install/include/kern/kern b/build/install/include/kern/kern
new file mode 120000
index 0000000..d202793
--- /dev/null
+++ b/build/install/include/kern/kern
@@ -0,0 +1 @@
+../include/kern
\ No newline at end of file
diff --git a/build/install/include/kern/limits.h b/build/install/include/kern/limits.h
new file mode 100644
index 0000000..08da69c
--- /dev/null
+++ b/build/install/include/kern/limits.h
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_LIMITS_H_
+#define _KERN_LIMITS_H_
+
+/*
+ * Constants for libc's <limits.h> - system limits.
+ *
+ * The symbols are prefixed with __ here to avoid namespace pollution
+ * in libc. Use <limits.h> (in either userspace or the kernel) to get
+ * the proper names.
+ *
+ * These are Unix-style limits that Unix; you can change them around
+ * or add others as needed or as are appropriate to your system design.
+ * Likewise, the default values provided here are fairly reasonable,
+ * but you can change them around pretty freely.
+ */
+
+
+/*
+ * Important, both as part of the system call API and for system behavior.
+ */
+
+/* Longest filename (without directory) not including null terminator */
+#define __NAME_MAX      255
+
+/* Longest full path name */
+#define __PATH_MAX      1024
+
+/* Max bytes for an exec function */
+#define __ARG_MAX       (4 * 1024)
+
+
+/*
+ * Important for system behavior, but not a big part of the API.
+ */
+
+/* Min value for a process ID (that can be assigned to a user process) */
+#define __PID_MIN       2
+
+/* Max value for a process ID */
+#define __PID_MAX       32767
+
+/* Max bytes for atomic pipe I/O -- see description in the pipe() man page */
+#define __PIPE_BUF      512
+
+
+/*
+ * Not so important parts of the API.
+ */
+
+/* Max number of supplemental group IDs in process credentials */
+#define __NGROUPS_MAX   32
+
+/* Max login name size (for setlogin/getlogin), incl. null */
+#define __LOGIN_NAME_MAX 17
+
+
+/*
+ * Not very important at all.
+ *
+ * Most modern systems don't have OPEN_MAX at all, and instead go by
+ * whatever limit is set with setrlimit().
+ */
+
+/* Max open files per process */
+#define __OPEN_MAX      128
+
+/* Max number of iovec structures at once for readv/writev/preadv/pwritev */
+#define __IOV_MAX       1024
+
+
+#endif /* _KERN_LIMITS_H_ */
diff --git a/build/install/include/kern/machine b/build/install/include/kern/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/build/install/include/kern/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/build/install/include/kern/mips/endian.h b/build/install/include/kern/mips/endian.h
new file mode 100644
index 0000000..b9a1784
--- /dev/null
+++ b/build/install/include/kern/mips/endian.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_MIPS_ENDIAN_H_
+#define _KERN_MIPS_ENDIAN_H_
+
+/*
+ * Endianness. While the MIPS can be either big-endian (mipseb) or
+ * little-endian (mipsel), at least for now we only do mipseb.
+ *
+ * This file should only be included via <kern/endian.h> which in turn
+ * should be gotten via <endian.h> in the kernel or <arpa/inet.h> in
+ * userland.
+ */
+
+#define _BYTE_ORDER _BIG_ENDIAN
+
+#endif /* _KERN_MIPS_ENDIAN_H_ */
diff --git a/build/install/include/kern/mips/machine b/build/install/include/kern/mips/machine
new file mode 120000
index 0000000..1baf047
--- /dev/null
+++ b/build/install/include/kern/mips/machine
@@ -0,0 +1 @@
+kern/machine
\ No newline at end of file
diff --git a/build/install/include/kern/mips/mips b/build/install/include/kern/mips/mips
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/build/install/include/kern/mips/mips
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/build/install/include/kern/mips/regdefs.h b/build/install/include/kern/mips/regdefs.h
new file mode 100644
index 0000000..5fd6a6e
--- /dev/null
+++ b/build/install/include/kern/mips/regdefs.h
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/*
+ * Macros for general-purpose register numbers for MIPS.
+ *
+ * Exported to userlevel because it's ~standard for that architecture.
+ */
+
+#ifndef _KERN_MIPS_REGDEFS_H_
+#define _KERN_MIPS_REGDEFS_H_
+
+
+#define z0  $0     /* always zero register */
+#define AT  $1     /* assembler temp register */
+#define v0  $2     /* value 0 */
+#define v1  $3     /* value 1 */
+#define a0  $4     /* argument 0 */
+#define a1  $5     /* argument 1 */
+#define a2  $6     /* argument 2 */
+#define a3  $7     /* argument 3 */
+#define t0  $8     /* temporary (caller-save) 0 */
+#define t1  $9     /* temporary (caller-save) 1 */
+#define t2  $10    /* temporary (caller-save) 2 */
+#define t3  $11    /* temporary (caller-save) 3 */
+#define t4  $12    /* temporary (caller-save) 4 */
+#define t5  $13    /* temporary (caller-save) 5 */
+#define t6  $14    /* temporary (caller-save) 6 */
+#define t7  $15    /* temporary (caller-save) 7 */
+#define s0  $16    /* saved (callee-save) 0 */
+#define s1  $17    /* saved (callee-save) 1 */
+#define s2  $18    /* saved (callee-save) 2 */
+#define s3  $19    /* saved (callee-save) 3 */
+#define s4  $20    /* saved (callee-save) 4 */
+#define s5  $21    /* saved (callee-save) 5 */
+#define s6  $22    /* saved (callee-save) 6 */
+#define s7  $23    /* saved (callee-save) 7 */
+#define t8  $24    /* temporary (caller-save) 8 */
+#define t9  $25    /* temporary (caller-save) 9 */
+#define k0  $26    /* kernel temporary 0 */
+#define k1  $27    /* kernel temporary 1 */
+#define gp  $28    /* global pointer */
+#define sp  $29    /* stack pointer */
+#define s8  $30    /* saved (callee-save) 8 = frame pointer */
+#define ra  $31    /* return address */
+
+
+#endif /* _KERN_MIPS_REGDEFS_H_ */
diff --git a/build/install/include/kern/mips/setjmp.h b/build/install/include/kern/mips/setjmp.h
new file mode 100644
index 0000000..13596a1
--- /dev/null
+++ b/build/install/include/kern/mips/setjmp.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _MIPS_SETJMP_H_
+#define _MIPS_SETJMP_H_
+
+/*
+ * MIPS jmp_buf definition.
+ */
+
+/*
+ * Must save: s0-s8, sp, ra (11 registers)
+ * Don't change __JB_REGS without adjusting mips_setjmp.S accordingly.
+ */
+#define __JB_REGS  11
+
+/* A jmp_buf is an array of __JB_REGS registers */
+typedef uint32_t jmp_buf[__JB_REGS];
+
+
+#endif /* _MIPS_SETJMP_H_ */
diff --git a/build/install/include/kern/mips/signal.h b/build/install/include/kern/mips/signal.h
new file mode 100644
index 0000000..fbc713d
--- /dev/null
+++ b/build/install/include/kern/mips/signal.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+
+#ifndef _KERN_MIPS_SIGNAL_H_
+#define _KERN_MIPS_SIGNAL_H_
+
+/*
+ * Structure used to hold the register values for returning from a
+ * userland signal handler - basically the saved register values from
+ * whatever userlevel execution context the signal interrupted. Fill
+ * this in as needed, if you ever implement signal handlers. (Which you
+ * probably won't.)
+ */
+struct sigcontext {
+	/* Dummy. */
+};
+
+#endif /* _KERN_MIPS_SIGNAL_H_ */
diff --git a/build/install/include/kern/mips/types.h b/build/install/include/kern/mips/types.h
new file mode 100644
index 0000000..fd93ba4
--- /dev/null
+++ b/build/install/include/kern/mips/types.h
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_MIPS_TYPES_H_
+#define _KERN_MIPS_TYPES_H_
+
+/*
+ * Machine-dependent types visible to userland.
+ * (Kernel-only types should go in mips/types.h.)
+ * 32-bit MIPS version.
+ *
+ * See kern/types.h for an explanation of the underscores.
+ */
+
+
+/* Sized integer types, with convenient short names */
+typedef char      __i8;                 /* 8-bit signed integer */
+typedef short     __i16;                /* 16-bit signed integer */
+typedef int       __i32;                /* 32-bit signed integer */
+typedef long long __i64;                /* 64-bit signed integer */
+
+typedef unsigned char      __u8;        /* 8-bit unsigned integer */
+typedef unsigned short     __u16;       /* 16-bit unsigned integer */
+typedef unsigned int       __u32;       /* 32-bit unsigned integer */
+typedef unsigned long long __u64;       /* 64-bit unsigned integer */
+
+/* Further standard C types */
+typedef long __intptr_t;                /* Signed pointer-sized integer */
+typedef unsigned long __uintptr_t;      /* Unsigned pointer-sized integer */
+
+/*
+ * Since we're a 32-bit platform, size_t, ssize_t, and ptrdiff_t can
+ * correctly be either (unsigned) int or (unsigned) long. However, if we
+ * don't define it to the same one gcc is using, gcc will get
+ * upset. If you switch compilers and see otherwise unexplicable type
+ * errors involving size_t, try changing this.
+ */
+#if 1
+typedef unsigned __size_t;              /* Size of a memory region */
+typedef int __ssize_t;                  /* Signed type of same size */
+typedef int __ptrdiff_t;                /* Difference of two pointers */
+#else
+typedef unsigned long __size_t;         /* Size of a memory region */
+typedef long __ssize_t;                 /* Signed type of same size */
+typedef long __ptrdiff_t;               /* Difference of two pointers */
+#endif
+
+/* Number of bits per byte. */
+#define __CHAR_BIT  8
+
+
+#endif /* _KERN_MIPS_TYPES_H_ */
diff --git a/build/install/include/kern/reboot.h b/build/install/include/kern/reboot.h
new file mode 100644
index 0000000..6130466
--- /dev/null
+++ b/build/install/include/kern/reboot.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_REBOOT_H_
+#define _KERN_REBOOT_H_
+
+/*
+ * Constants for libc's <sys/reboot.h> and the reboot() system call.
+ * (Not all that important.)
+ */
+
+
+/* Codes for reboot */
+#define RB_REBOOT     0      /* Reboot system */
+#define RB_HALT       1      /* Halt system and do not reboot */
+#define RB_POWEROFF   2      /* Halt system and power off */
+
+
+#endif /* _KERN_REBOOT_H_ */
diff --git a/build/install/include/kern/resource.h b/build/install/include/kern/resource.h
new file mode 100644
index 0000000..bec2c3b
--- /dev/null
+++ b/build/install/include/kern/resource.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2004, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_RESOURCE_H_
+#define _KERN_RESOURCE_H_
+
+/*
+ * Definitions for resource usage and limits.
+ *
+ * Not very important.
+ */
+
+
+/* priorities for setpriority() */
+#define PRIO_MIN	(-20)
+#define PRIO_MAX	20
+
+/* "which" codes for setpriority() */
+#define PRIO_PROCESS	0
+#define PRIO_PGRP	1
+#define PRIO_USER	2
+
+/* flags for getrusage() */
+#define RUSAGE_SELF	0
+#define RUSAGE_CHILDREN	(-1)
+
+struct rusage {
+	struct timeval ru_utime;
+	struct timeval ru_stime;
+	__size_t ru_maxrss;		/* maximum RSS during lifespan (kb) */
+	__counter_t ru_ixrss;		/* text memory usage (kb-ticks) */
+	__counter_t ru_idrss;		/* data memory usage (kb-ticks) */
+	__counter_t ru_isrss;		/* stack memory usage (kb-ticks) */
+	__counter_t ru_minflt;		/* minor VM faults (count) */
+	__counter_t ru_majflt;		/* major VM faults (count) */
+	__counter_t ru_nswap;		/* whole-process swaps (count) */
+	__counter_t ru_inblock;		/* file blocks read (count) */
+	__counter_t ru_oublock;		/* file blocks written (count) */
+	__counter_t ru_msgrcv;		/* socket/pipe packets rcv'd (count) */
+	__counter_t ru_msgsnd;		/* socket/pipe packets sent (count) */
+	__counter_t ru_nsignals;	/* signals delivered (count) */
+	__counter_t ru_nvcsw;		/* voluntary context switches (count)*/
+	__counter_t ru_nivcsw;		/* involuntary ditto (count) */
+};
+
+/* limit codes for getrusage/setrusage */
+
+#define RLIMIT_NPROC		0	/* max procs per user (count) */
+#define RLIMIT_NOFILE		1	/* max open files per proc (count) */
+#define RLIMIT_CPU		2	/* cpu usage (seconds) */
+#define RLIMIT_DATA		3	/* max .data/sbrk size (bytes) */
+#define RLIMIT_STACK		4	/* max stack size (bytes) */
+#define RLIMIT_MEMLOCK		5	/* max locked memory region (bytes) */
+#define RLIMIT_RSS		6	/* max RSS (bytes) */
+#define RLIMIT_CORE		7	/* core file size (bytes) */
+#define RLIMIT_FSIZE		8	/* max file size (bytes) */
+#define __RLIMIT_NUM		9	/* number of limits */
+
+struct rlimit {
+	__rlim_t rlim_cur;	/* soft limit */
+	__rlim_t rlim_max;	/* hard limit */
+};
+
+#define RLIM_INFINITY	(~(__rlim_t)0)
+
+#endif /* _KERN_RESOURCE_H_ */
diff --git a/build/install/include/kern/seek.h b/build/install/include/kern/seek.h
new file mode 100644
index 0000000..cf1cfe6
--- /dev/null
+++ b/build/install/include/kern/seek.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SEEK_H_
+#define _KERN_SEEK_H_
+
+/*
+ * Codes for lseek(), which are shared in libc between <fcntl.h> and
+ * <unistd.h> and thus get their own file.
+ *
+ * These are pretty important. Back in the day (like 20+ years ago)
+ * people would often just write the values 0, 1, and 2, but that's
+ * really not recommended.
+ */
+
+#define SEEK_SET      0      /* Seek relative to beginning of file */
+#define SEEK_CUR      1      /* Seek relative to current position in file */
+#define SEEK_END      2      /* Seek relative to end of file */
+
+
+#endif /* _KERN_SEEK_H_ */
diff --git a/build/install/include/kern/sfs.h b/build/install/include/kern/sfs.h
new file mode 100644
index 0000000..b047e85
--- /dev/null
+++ b/build/install/include/kern/sfs.h
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SFS_H_
+#define _KERN_SFS_H_
+
+
+/*
+ * SFS definitions visible to userspace. This covers the on-disk format
+ * and is used by tools that work on SFS volumes, such as mksfs.
+ */
+
+#define SFS_MAGIC         0xabadf001    /* magic number identifying us */
+#define SFS_BLOCKSIZE     512           /* size of our blocks */
+#define SFS_VOLNAME_SIZE  32            /* max length of volume name */
+#define SFS_NDIRECT       15            /* # of direct blocks in inode */
+#define SFS_DBPERIDB      128           /* # direct blks per indirect blk */
+#define SFS_NAMELEN       60            /* max length of filename */
+#define SFS_SB_LOCATION    0            /* block the superblock lives in */
+#define SFS_ROOT_LOCATION  1            /* loc'n of the root dir inode */
+#define SFS_MAP_LOCATION   2            /* 1st block of the freemap */
+#define SFS_NOINO          0            /* inode # for free dir entry */
+
+/* Number of bits in a block */
+#define SFS_BLOCKBITS (SFS_BLOCKSIZE * CHAR_BIT)
+
+/* Utility macro */
+#define SFS_ROUNDUP(a,b)       ((((a)+(b)-1)/(b))*b)
+
+/* Size of bitmap (in bits) */
+#define SFS_BITMAPSIZE(nblocks) SFS_ROUNDUP(nblocks, SFS_BLOCKBITS)
+
+/* Size of bitmap (in blocks) */
+#define SFS_BITBLOCKS(nblocks)  (SFS_BITMAPSIZE(nblocks)/SFS_BLOCKBITS)
+
+/* File types for sfi_type */
+#define SFS_TYPE_INVAL    0       /* Should not appear on disk */
+#define SFS_TYPE_FILE     1
+#define SFS_TYPE_DIR      2
+
+/*
+ * On-disk superblock
+ */
+struct sfs_super {
+	uint32_t sp_magic;		/* Magic number, should be SFS_MAGIC */
+	uint32_t sp_nblocks;			/* Number of blocks in fs */
+	char sp_volname[SFS_VOLNAME_SIZE];	/* Name of this volume */
+	uint32_t reserved[118];
+};
+
+/*
+ * On-disk inode
+ */
+struct sfs_inode {
+	uint32_t sfi_size;			/* Size of this file (bytes) */
+	uint16_t sfi_type;			/* One of SFS_TYPE_* above */
+	uint16_t sfi_linkcount;			/* # hard links to this file */
+	uint32_t sfi_direct[SFS_NDIRECT];	/* Direct blocks */
+	uint32_t sfi_indirect;			/* Indirect block */
+	uint32_t sfi_waste[128-3-SFS_NDIRECT];	/* unused space, set to 0 */
+};
+
+/*
+ * On-disk directory entry
+ */
+struct sfs_dir {
+	uint32_t sfd_ino;			/* Inode number */
+	char sfd_name[SFS_NAMELEN];		/* Filename */
+};
+
+
+#endif /* _KERN_SFS_H_ */
diff --git a/build/install/include/kern/signal.h b/build/install/include/kern/signal.h
new file mode 100644
index 0000000..9b0fb4f
--- /dev/null
+++ b/build/install/include/kern/signal.h
@@ -0,0 +1,131 @@
+/*
+ * Copyright (c) 1982, 1986, 1989, 1991, 1993
+ *	The Regents of the University of California.  All rights reserved.
+ * (c) UNIX System Laboratories, Inc.
+ * All or some portions of this file are derived from material licensed
+ * to the University of California by American Telephone and Telegraph
+ * Co. or Unix System Laboratories, Inc. and are reproduced herein with
+ * the permission of UNIX System Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ *	@(#)signal.h	8.4 (Berkeley) 5/4/95
+ */
+
+#ifndef _KERN_SIGNAL_H_
+#define _KERN_SIGNAL_H_
+
+/*
+ * Machine-independent definitions for signals.
+ */
+ 
+
+/*
+ * The signals.
+ *
+ * The values of many of these are "well known", particularly 1, 9,
+ * 10, and 11.
+ *
+ * Note that Unix signals are a semantic cesspool; many have special
+ * properties or are supposed to interact with the system in special
+ * ways. It is gross.
+ */
+
+#define SIGHUP		1	/* Hangup */
+#define SIGINT		2	/* Interrupt (^C) */
+#define SIGQUIT		3	/* Quit (typically ^\) */
+#define SIGILL		4	/* Illegal instruction */
+#define SIGTRAP		5	/* Breakpoint trap */
+#define SIGABRT		6	/* abort() call */
+#define SIGEMT		7	/* Emulator trap */
+#define SIGFPE		8	/* Floating point exception */
+#define SIGKILL		9	/* Hard kill (unblockable) */
+#define SIGBUS		10	/* Bus error, typically bad pointer alignment*/
+#define SIGSEGV		11	/* Segmentation fault */
+#define SIGSYS		12	/* Bad system call */
+#define SIGPIPE		13	/* Broken pipe */
+#define SIGALRM		14	/* alarm() expired */
+#define SIGTERM		15	/* Termination requested (default kill) */
+#define SIGURG		16	/* Urgent data on socket */
+#define SIGSTOP		17	/* Hard process stop (unblockable) */
+#define SIGTSTP		18	/* Terminal stop (^Z) */
+#define SIGCONT		19	/* Time to continue after stop */
+#define SIGCHLD		20	/* Child process exited */
+#define SIGTTIN		21	/* Stop on tty read while in background */
+#define SIGTTOU		22	/* Stop on tty write while in background */
+#define SIGIO		23	/* Nonblocking or async I/O is now ready */
+#define SIGXCPU		24	/* CPU time resource limit exceeded */
+#define SIGXFSZ		25	/* File size resource limit exceeded */
+#define SIGVTALRM	26	/* Like SIGALRM but in virtual time */
+#define SIGPROF		27	/* Profiling timer */
+#define SIGWINCH	28	/* Window size change on tty */
+#define SIGINFO		29	/* Information request (typically ^T) */
+#define SIGUSR1		20	/* Application-defined */
+#define SIGUSR2		31	/* Application-defined */
+#define SIGPWR		32	/* Power failure */
+#define _NSIG		32
+
+
+/* Type for a set of signals; used by e.g. sigprocmask(). */
+typedef __u32 sigset_t;
+
+/* flags for sigaction.sa_flags */
+#define SA_ONSTACK	1	/* Use sigaltstack() stack. */
+#define SA_RESTART	2	/* Restart syscall instead of interrupting. */
+#define SA_RESETHAND	4	/* Clear handler after one usage. */
+
+/* codes for sigprocmask() */
+#define SIG_BLOCK	1	/* Block selected signals. */
+#define SIG_UNBLOCK	2	/* Unblock selected signals. */
+#define SIG_SETMASK	3	/* Set mask to the selected signals. */
+
+/* Type for a signal handler function. */
+typedef void (*__sigfunc)(int);
+
+/* Magic values for signal handlers. */
+#define SIG_DFL		((__sigfunc) 0)		/* Default behavior. */
+#define SIG_IGN		((__sigfunc) 1)		/* Ignore the signal. */
+
+/*
+ * Struct for sigaction().
+ */
+struct sigaction {
+	__sigfunc sa_handler;
+	sigset_t sa_mask;
+	unsigned sa_flags;
+};
+
+/*
+ * Struct for sigaltstack().
+ * (not very important)
+ */
+struct sigaltstack {
+	void *ss_sp;
+	size_t ss_size;
+	unsigned ss_flags;
+};
+
+
+#endif /* _KERN_SIGNAL_H_ */
diff --git a/build/install/include/kern/socket.h b/build/install/include/kern/socket.h
new file mode 100644
index 0000000..4796f9a
--- /dev/null
+++ b/build/install/include/kern/socket.h
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) 2004, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SOCKET_H_
+#define _KERN_SOCKET_H_
+
+/*
+ * Socket-related definitions, for <sys/socket.h>.
+ */
+
+
+/*
+ * Important
+ */
+
+/* Socket types that we (might) support. */
+#define SOCK_STREAM	1	/* stream */
+#define SOCK_DGRAM	2	/* packet */
+#define SOCK_RAW	3	/* raw packet */
+
+/* Address families that we (might) support. */
+#define AF_UNSPEC	0
+#define AF_UNIX		1
+#define AF_INET		2
+#define AF_INET6	3
+
+/* Protocol families. Pointless layer of indirection in the standard API. */
+#define PF_UNSPEC	AF_UNSPEC
+#define PF_UNIX		AF_UNIX
+#define PF_INET		AF_INET
+#define PF_INET6	AF_INET6
+
+/*
+ * Socket address structures. Socket addresses are polymorphic, and
+ * the polymorphism is handled by casting pointers. It's fairly gross,
+ * but way too deeply standardized to ever change.
+ *
+ * Each address family defines a sockaddr type (sockaddr_un,
+ * sockaddr_in, etc.) struct sockaddr is the common prefix of all
+ * these, and struct sockaddr_storage is defined to be large enough to
+ * hold any of them.
+ *
+ * The complex padding in sockaddr_storage forces it to be aligned,
+ * which wouldn't happen if it were just a char array.
+ */
+
+struct sockaddr {
+   __u8	sa_len;
+   __u8 sa_family;
+};
+
+#define _SS_SIZE	128
+struct sockaddr_storage {
+   __u8 ss_len;
+   __u8 ss_family;
+   __u8 __ss_pad1;
+   __u8 __ss_pad2;
+   __u32 __ss_pad3;
+   __u64 __ss_pad4;
+   char __ss_pad5[_SS_SIZE - sizeof(__u64) - sizeof(__u32) - 4*sizeof(__u8)];
+};
+
+
+/*
+ * Not very important.
+ */
+
+/*
+ * msghdr structures for sendmsg() and recvmsg().
+ */
+
+struct msghdr {
+	void *msg_name;		/* really sockaddr; address, or null */
+	socklen_t msg_namelen;	/* size of msg_name object, or 0 */
+	struct iovec *msg_iov;	/* I/O buffers */
+	int msg_iovlen;		/* number of iovecs */
+	void *msg_control;	/* auxiliary data area, or null */
+	socklen_t msg_controllen; /* size of msg_control area */
+	int msg_flags;		/* flags */
+};
+
+struct cmsghdr {
+	socklen_t cmsg_len;	/* length of control data, including header */
+	int cmsg_level;		/* protocol layer item originates from */
+	int cmsg_type;		/* protocol-specific message type */
+	/* char cmsg_data[];*/	/* data follows the header */
+};
+
+
+#endif /* _KERN_SOCKET_H_ */
diff --git a/build/install/include/kern/stat.h b/build/install/include/kern/stat.h
new file mode 100644
index 0000000..0f6cc54
--- /dev/null
+++ b/build/install/include/kern/stat.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_STAT_H_
+#define _KERN_STAT_H_
+
+/*
+ * The stat structure, for returning file information via stat(),
+ * fstat(), and lstat().
+ *
+ * Fields corresponding to things you aren't implementing should be
+ * set to zero.
+ *
+ * The file types are in kern/stattypes.h.
+ */
+struct stat {
+	/* Essential fields */
+	off_t st_size;		/* file size in bytes */
+	mode_t st_mode;		/* file type and protection mode */
+	nlink_t st_nlink;	/* number of hard links */
+	blkcnt_t st_blocks;	/* number of blocks file is using */
+
+ 	/* Identity */
+	dev_t st_dev;           /* device object lives on */
+	ino_t st_ino;           /* inode number (serial number) of object */
+	dev_t st_rdev;          /* device object is (if a device) */
+
+	/* Timestamps */
+	time_t st_atime;        /* last access time: seconds */
+	time_t st_ctime;        /* inode change time: seconds */
+	time_t st_mtime;        /* modification time: seconds */
+	__u32 st_atimensec;     /* last access time: nanoseconds */
+	__u32 st_ctimensec;     /* inode change time: nanoseconds */
+	__u32 st_mtimensec;     /* modification time: nanoseconds */
+
+	/* Permissions (also st_mode) */
+	uid_t st_uid;           /* owner */
+	gid_t st_gid;           /* group */
+
+	/* Other */
+	__u32 st_gen;           /* file generation number (root only) */
+	blksize_t st_blksize;   /* recommended I/O block size */
+};
+
+#endif /* _KERN_STAT_H_ */
diff --git a/build/install/include/kern/stattypes.h b/build/install/include/kern/stattypes.h
new file mode 100644
index 0000000..4157a4d
--- /dev/null
+++ b/build/install/include/kern/stattypes.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_STATTYPES_H_
+#define _KERN_STATTYPES_H_
+
+/*
+ * Further supporting material for stat(), fstat(), and lstat().
+ *
+ * File types for st_mode. (The permissions are the low 12 bits.)
+ * 
+ * These are also used, shifted right by those 12 bits, in struct
+ * dirent in libc, which is why they get their own file.
+ *
+ * Non-underscore versions of the names can be gotten from <stat.h>
+ * (kernel) or <sys/stat.h> (userland).
+ */
+
+#define _S_IFMT   070000	/* mask for type of file */
+#define _S_IFREG  010000	/* ordinary regular file */
+#define _S_IFDIR  020000	/* directory */
+#define _S_IFLNK  030000	/* symbolic link */
+#define _S_IFIFO  040000	/* pipe or named pipe */
+#define _S_IFSOCK 050000	/* socket */
+#define _S_IFCHR  060000	/* character device */
+#define _S_IFBLK  070000	/* block device */
+
+
+#endif /* _KERN_STATTYPES_H_ */
diff --git a/build/install/include/kern/syscall.h b/build/install/include/kern/syscall.h
new file mode 100644
index 0000000..c9b8b2b
--- /dev/null
+++ b/build/install/include/kern/syscall.h
@@ -0,0 +1,203 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SYSCALL_H_
+#define _KERN_SYSCALL_H_
+
+/*
+ * System call numbers.
+ *
+ * To foster compatibility, this file contains a number for every
+ * more-or-less standard Unix system call that someone might
+ * conceivably implement on OS/161. The commented-out ones are ones
+ * we're pretty sure you won't be implementing. The others, you might
+ * or might not. Check your own course materials to find out what's
+ * specifically required of you.
+ *
+ * Caution: this file is parsed by a shell script to generate the assembly
+ * language system call stubs. Don't add weird stuff between the markers.
+ */
+
+/*CALLBEGIN*/
+
+//                              -- Process-related --
+#define SYS_fork         0
+#define SYS_vfork        1
+#define SYS_execv        2
+#define SYS__exit        3
+#define SYS_waitpid      4
+#define SYS_getpid       5
+#define SYS_getppid      6
+//                              (virtual memory)
+#define SYS_sbrk         7
+#define SYS_mmap         8
+#define SYS_munmap       9
+#define SYS_mprotect     10
+//#define SYS_madvise    11
+//#define SYS_mincore    12
+//#define SYS_mlock      13
+//#define SYS_munlock    14
+//#define SYS_munlockall 15
+//#define SYS_minherit   16
+//                              (security/credentials)
+#define SYS_umask        17
+#define SYS_issetugid    18
+#define SYS_getresuid    19
+#define SYS_setresuid    20
+#define SYS_getresgid    21
+#define SYS_setresgid    22
+#define SYS_getgroups    23
+#define SYS_setgroups    24
+#define SYS___getlogin   25
+#define SYS___setlogin   26
+//                              (signals)
+#define SYS_kill         27
+#define SYS_sigaction    28
+#define SYS_sigpending   29
+#define SYS_sigprocmask  30
+#define SYS_sigsuspend   31
+#define SYS_sigreturn    32
+//#define SYS_sigaltstack 33
+//                              (resource tracking and usage)
+//#define SYS_wait4      34
+//#define SYS_getrusage  35
+//                              (resource limits)
+//#define SYS_getrlimit  36
+//#define SYS_setrlimit  37
+//                              (process priority control)
+//#define SYS_getpriority 38
+//#define SYS_setpriority 39
+//                              (process groups, sessions, and job control)
+//#define SYS_getpgid    40
+//#define SYS_setpgid    41
+//#define SYS_getsid     42
+//#define SYS_setsid     43
+//                              (userlevel debugging)
+//#define SYS_ptrace     44
+
+//                              -- File-handle-related --
+#define SYS_open         45
+#define SYS_pipe         46
+#define SYS_dup          47
+#define SYS_dup2         48
+#define SYS_close        49
+#define SYS_read         50
+#define SYS_pread        51
+//#define SYS_readv      52
+//#define SYS_preadv     53
+#define SYS_getdirentry  54
+#define SYS_write        55
+#define SYS_pwrite       56
+//#define SYS_writev     57
+//#define SYS_pwritev    58
+#define SYS_lseek        59
+#define SYS_flock        60
+#define SYS_ftruncate    61
+#define SYS_fsync        62
+#define SYS_fcntl        63
+#define SYS_ioctl        64
+#define SYS_select       65
+#define SYS_poll         66
+
+//                              -- Pathname-related --
+#define SYS_link         67
+#define SYS_remove       68
+#define SYS_mkdir        69
+#define SYS_rmdir        70
+#define SYS_mkfifo       71
+#define SYS_rename       72
+#define SYS_access       73
+//                              (current directory)
+#define SYS_chdir        74
+#define SYS_fchdir       75
+#define SYS___getcwd     76
+//                              (symbolic links)
+#define SYS_symlink      77
+#define SYS_readlink     78
+//                              (mount)
+#define SYS_mount        79
+#define SYS_unmount      80
+
+
+//                              -- Any-file-related --
+#define SYS_stat         81
+#define SYS_fstat        82
+#define SYS_lstat        83
+//                              (timestamps)
+#define SYS_utimes       84
+#define SYS_futimes      85
+#define SYS_lutimes      86
+//                              (security/permissions)
+#define SYS_chmod        87
+#define SYS_chown        88
+#define SYS_fchmod       89
+#define SYS_fchown       90
+#define SYS_lchmod       91
+#define SYS_lchown       92
+//                              (file system info)
+//#define SYS_statfs     93
+//#define SYS_fstatfs    94
+//#define SYS_getfsstat  95
+//                              (POSIX dynamic system limits stuff)
+//#define SYS_pathconf   96
+//#define SYS_fpathconf  97
+
+//                              -- Sockets and networking --
+#define SYS_socket       98
+#define SYS_bind         99
+#define SYS_connect      100
+#define SYS_listen       101
+#define SYS_accept       102
+//#define SYS_socketpair 103
+#define SYS_shutdown     104
+#define SYS_getsockname  105
+#define SYS_getpeername  106
+#define SYS_getsockopt   107
+#define SYS_setsockopt   108
+//#define SYS_recvfrom   109
+//#define SYS_sendto     110
+//#define SYS_recvmsg    111
+//#define SYS_sendmsg    112
+
+//                              -- Time-related --
+#define SYS___time       113
+#define SYS___settime    114
+#define SYS_nanosleep    115
+//#define SYS_getitimer  116
+//#define SYS_setitimer  117
+
+//                              -- Other --
+#define SYS_sync         118
+#define SYS_reboot       119
+//#define SYS___sysctl   120
+
+/*CALLEND*/
+
+
+#endif /* _KERN_SYSCALL_H_ */
diff --git a/build/install/include/kern/time.h b/build/install/include/kern/time.h
new file mode 100644
index 0000000..d52076e
--- /dev/null
+++ b/build/install/include/kern/time.h
@@ -0,0 +1,70 @@
+/*
+ * Copyright (c) 2004, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_TIME_H_
+#define _KERN_TIME_H_
+
+/*
+ * Time-related definitions, for <sys/time.h> and others.
+ */
+
+
+/*
+ * Time with fractional seconds. Important. Unfortunately, to be
+ * compatible, we need both timeval and timespec.
+ */
+
+struct timeval {
+        __time_t tv_sec;        /* seconds */
+        __i32 tv_usec;          /* microseconds */
+};
+
+struct timespec {
+        __time_t tv_sec;        /* seconds */
+        __i32 tv_nsec;          /* nanoseconds */
+};
+
+
+/*
+ * Bits for interval timers. Obscure and not really that important.
+ */
+
+/* codes for the various timers */
+#define ITIMER_REAL	0	/* Real (wall-clock) time. */
+#define ITIMER_VIRTUAL	1	/* Virtual (when process is executing) time. */
+#define ITIMER_PROF	2	/* For execution profiling. */
+
+/* structure for setitimer/getitimer */
+struct itimerval {
+        struct timeval it_interval;	/* Time to reload after expiry. */
+	struct timeval it_value;	/* Time to count. */
+};
+
+
+#endif /* _KERN_TIME_H_ */
diff --git a/build/install/include/kern/types.h b/build/install/include/kern/types.h
new file mode 100644
index 0000000..002d3b7
--- /dev/null
+++ b/build/install/include/kern/types.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_TYPES_H_
+#define _KERN_TYPES_H_
+
+/* Get machine-dependent types. */
+#include <kern/machine/types.h>
+
+/*
+ * Machine-independent types visible to user level.
+ *
+ * Define everything with leading underscores to avoid polluting the C
+ * namespace for applications.
+ *
+ * The C standard (and additionally the POSIX standard) define rules
+ * for what families of symbol names are allowed to be used by
+ * application programmers, and what families of symbol names can be
+ * defined by various standard header files. The C library needs to
+ * conform to those rules, to the extent reasonably practical, to make
+ * sure that application code compiles and behaves as intended.
+ *
+ * Many of the C library's headers need to use one or more of these
+ * types in places where the "real" name of the type cannot be
+ * exposed, or expose the names of some of these types and not others.
+ * (For example, <string.h> is supposed to define size_t, but is not
+ * supposed to also define e.g. pid_t.)
+ *
+ * For this reason we define everything with two underscores in front
+ * of it; in C such symbol names are reserved for the implementation,
+ * which we are, so this file can be included anywhere in any libc
+ * header without causing namespace problems. The "real" type names
+ * are defined with an additional layer of typedefs; this happens for
+ * the kernel in <types.h> and for userland in (mostly) <sys/types.h>
+ * and also various other places as per relevant standards.
+ */
+
+typedef __u32 __blkcnt_t;  /* Count of blocks */
+typedef __u32 __blksize_t; /* Size of an I/O block */
+typedef __u64 __counter_t; /* Event counter */
+typedef __u32 __daddr_t;   /* Disk block number */
+typedef __u32 __dev_t;     /* Hardware device ID */
+typedef __u32 __fsid_t;    /* Filesystem ID */
+typedef __i32 __gid_t;     /* Group ID */
+typedef __u32 __in_addr_t; /* Internet address */
+typedef __u32 __in_port_t; /* Internet port number */
+typedef __u32 __ino_t;     /* Inode number */
+typedef __u32 __mode_t;    /* File access mode */
+typedef __u16 __nlink_t;   /* Number of links (intentionally only 16 bits) */
+typedef __i64 __off_t;     /* Offset within file */
+typedef __i32 __pid_t;     /* Process ID */
+typedef __u64 __rlim_t;    /* Resource limit quantity */
+typedef __u8 __sa_family_t;/* Socket address family */
+typedef __i64 __time_t;    /* Time in seconds */
+typedef __i32 __uid_t;     /* User ID */
+
+typedef int __nfds_t;    /* Number of file handles */
+typedef int __socklen_t;   /* Socket-related length */
+
+/* See note in <stdarg.h> */
+#ifdef __GNUC__
+typedef __builtin_va_list __va_list;
+#endif
+
+
+#endif /* _KERN_TYPES_H_ */
diff --git a/build/install/include/kern/unistd.h b/build/install/include/kern/unistd.h
new file mode 100644
index 0000000..30f2678
--- /dev/null
+++ b/build/install/include/kern/unistd.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_UNISTD_H_
+#define _KERN_UNISTD_H_
+
+/* Constants for read/write/etc: special file handles */
+#define STDIN_FILENO  0      /* Standard input */
+#define STDOUT_FILENO 1      /* Standard output */
+#define STDERR_FILENO 2      /* Standard error */
+
+
+#endif /* _KERN_UNISTD_H_ */
diff --git a/build/install/include/kern/wait.h b/build/install/include/kern/wait.h
new file mode 100644
index 0000000..06ffab6
--- /dev/null
+++ b/build/install/include/kern/wait.h
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2003, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_WAIT_H_
+#define _KERN_WAIT_H_
+
+/*
+ * Definitions for wait().
+ */
+
+
+/* Flags for waitpid() and equivalent. */
+#define WNOHANG      1	/* Nonblocking. */
+#define WUNTRACED    2	/* Report stopping as well as exiting processes. */
+
+/* Special "pids" to wait for. */
+#define WAIT_ANY     (-1)	/* Any child process. */
+#define WAIT_MYPGRP  0		/* Any process in the same process group. */
+
+/*
+ * Result encoding.
+ *
+ * The lowest two bits say what happened; the rest encodes up to 30
+ * bits of exit code. Note that the traditional Unix encoding, which
+ * is different, wastes most of the bits and can only transmit 8 bits
+ * of exit code...
+ */
+#define _WWHAT(x)  ((x)&3)	/* lower two bits say what happened */
+#define _WVAL(x)   ((x)>>2)	/* the rest is the value */
+#define _MKWVAL(x) ((x)<<2)	/* encode a value */
+
+/* Four things can happen... */
+#define __WEXITED    0		/* Process exited by calling _exit(). */
+#define __WSIGNALED  1		/* Process received a fatal signal. */
+#define __WCORED     2		/* Process dumped core on a fatal signal. */
+#define __WSTOPPED   3		/* Process stopped (and didn't exit). */
+
+/* Test macros, used by applications. */
+#define WIFEXITED(x)   (_WWHAT(x)==__WEXITED)
+#define WIFSIGNALED(x) (_WWHAT(x)==__WSIGNALED || _WWHAT(x)==__WCORED)
+#define WIFSTOPPED(x)  (_WWHAT(x)==__WSTOPPED)
+#define WEXITSTATUS(x) (_WVAL(x))
+#define WTERMSIG(x)    (_WVAL(x))
+#define WSTOPSIG(x)    (_WVAL(x))
+#define WCOREDUMP(x)   (_WWHAT(x)==__WCORED)
+
+/* Encoding macros, used by the kernel to generate the wait result. */
+#define _MKWAIT_EXIT(x) (_MKWVAL(x)|__WEXITED)
+#define _MKWAIT_SIG(x)  (_MKWVAL(x)|__WSIGNALED)
+#define _MKWAIT_CORE(x) (_MKWVAL(x)|__WCORED)
+#define _MKWAIT_STOP(x) (_MKWVAL(x)|__WSTOPPED)
+
+#endif /* _KERN_WAIT_H_ */
diff --git a/build/install/include/limits.h b/build/install/include/limits.h
new file mode 100644
index 0000000..7186b39
--- /dev/null
+++ b/build/install/include/limits.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _LIMITS_H_
+#define _LIMITS_H_
+
+/*
+ * System limits.
+ */
+
+/* Get the limits the kernel exports. libc doesn't have any limits :-) */ 
+#include <kern/limits.h>
+
+/* Provide the real names */
+#define NAME_MAX        __NAME_MAX
+#define PATH_MAX        __PATH_MAX
+#define ARG_MAX         __ARG_MAX
+#define PID_MIN         __PID_MIN
+#define PID_MAX         __PID_MAX
+#define PIPE_BUF        __PIPE_BUF
+#define NGROUPS_MAX     __NGROUPS_MAX
+#define LOGIN_NAME_MAX  __LOGIN_NAME_MAX
+#define OPEN_MAX        __OPEN_MAX
+#define IOV_MAX         __IOV_MAX
+
+
+#endif /* _LIMITS_H_ */
diff --git a/build/install/include/machine b/build/install/include/machine
new file mode 120000
index 0000000..1baf047
--- /dev/null
+++ b/build/install/include/machine
@@ -0,0 +1 @@
+kern/machine
\ No newline at end of file
diff --git a/build/install/include/setjmp.h b/build/install/include/setjmp.h
new file mode 100644
index 0000000..02cf813
--- /dev/null
+++ b/build/install/include/setjmp.h
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SETJMP_H_
+#define _SETJMP_H_
+
+/* Get the (machine-dependent) definition of jmp_buf. */
+#include <machine/setjmp.h>
+
+/*
+ * Functions.
+ *
+ * setjmp saves the current processor state in the jmp_buf and 
+ * returns 0. A subsequent call to longjmp with the same jmp_buf
+ * causes execution to return to where setjmp was called. setjmp
+ * returns a second time, this time returning CODE. (If CODE is
+ * 0, it is forced to 1.)
+ *
+ * If the stack frame that called setjmp returns before longjmp is
+ * called, the results are undefined. 
+ */
+
+int setjmp(jmp_buf jb);
+void longjmp(jmp_buf jb, int code);
+
+#endif /* _SETJMP_H_ */
diff --git a/build/install/include/signal.h b/build/install/include/signal.h
new file mode 100644
index 0000000..b7c2523
--- /dev/null
+++ b/build/install/include/signal.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <kern/signal.h>
diff --git a/build/install/include/stdarg.h b/build/install/include/stdarg.h
new file mode 100644
index 0000000..ff81e78
--- /dev/null
+++ b/build/install/include/stdarg.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDARG_H_
+#define _STDARG_H_
+
+#include <kern/types.h>
+
+/*
+ * As of gcc 3.0, the stdarg declarations can be made
+ * machine-independent because gcc abstracts the implementations away
+ * for us.
+ */
+
+typedef __va_list va_list;
+
+#define va_start(ap,fmt) __builtin_stdarg_start(ap,fmt)
+#define va_arg(ap,t) __builtin_va_arg(ap,t)
+#define va_copy(ap1,ap2) __builtin_va_copy(ap1,ap2)
+#define va_end(ap) __builtin_va_end(ap)
+
+#endif /* _STDARG_H_ */
diff --git a/build/install/include/stdint.h b/build/install/include/stdint.h
new file mode 100644
index 0000000..e9acb3d
--- /dev/null
+++ b/build/install/include/stdint.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDINT_H_
+#define _STDINT_H_
+
+/*
+ * <stdint.h> - C99 header file with sized integer types.
+ */
+
+#include <kern/types.h>
+
+typedef __i8 int8_t;
+typedef __i16 int16_t;
+typedef __i32 int32_t;
+typedef __i64 int64_t;
+typedef __u8 uint8_t;
+typedef __u16 uint16_t;
+typedef __u32 uint32_t;
+typedef __u64 uint64_t;
+
+typedef __intptr_t intptr_t;
+typedef __uintptr_t uintptr_t;
+
+#endif /* _STDINT_H_ */
diff --git a/build/install/include/stdio.h b/build/install/include/stdio.h
new file mode 100644
index 0000000..20e96cb
--- /dev/null
+++ b/build/install/include/stdio.h
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDIO_H_
+#define _STDIO_H_
+
+/*
+ * Get the __-protected definition of va_list. We aren't supposed to
+ * include stdarg.h here.
+ */
+#include <kern/types.h>
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/* Constant returned by a bunch of stdio functions on error */
+#define EOF (-1)
+
+/*
+ * The actual guts of printf
+ * (for libc internal use only)
+ */
+int __vprintf(void (*sendfunc)(void *clientdata, const char *, size_t len),
+	      void *clientdata,
+	      const char *fmt,
+	      __va_list ap);
+
+/* Printf calls for user programs */
+int printf(const char *fmt, ...);
+int vprintf(const char *fmt, __va_list ap);
+int snprintf(char *buf, size_t len, const char *fmt, ...);
+int vsnprintf(char *buf, size_t len, const char *fmt, __va_list ap);
+
+/* Print the argument string and then a newline. Returns 0 or -1 on error. */
+int puts(const char *);
+
+/* Like puts, but without the newline. Returns #chars written. */
+/* Nonstandard C, hence the __. */
+int __puts(const char *);
+
+/* Writes one character. Returns it. */
+int putchar(int);
+
+/* Reads one character (0-255) or returns EOF on error. */
+int getchar(void);
+
+#endif /* _STDIO_H_ */
diff --git a/build/install/include/stdlib.h b/build/install/include/stdlib.h
new file mode 100644
index 0000000..189e540
--- /dev/null
+++ b/build/install/include/stdlib.h
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDLIB_H_
+#define _STDLIB_H_
+
+#include <kern/types.h>
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/*
+ * Ascii to integer - turn a string holding a number into a number.
+ */
+int atoi(const char *);
+
+/*
+ * Standard routine to bail out of a program in a severe error condition.
+ */
+void abort(void);
+
+/*
+ * Routine to exit cleanly.
+ * (This does libc cleanup before calling the _exit system call.)
+ */
+void exit(int code);
+
+/*
+ * Run a command. Returns its exit status as it comes back from waitpid().
+ */
+int system(const char *command);
+
+/*
+ * Pseudo-random number generator.
+ */
+#define RAND_MAX  0x7fffffff
+long random(void);
+void srandom(unsigned long seed);
+char *initstate(unsigned long, char *, size_t);
+char *setstate(char *);
+
+/*
+ * Memory allocation functions.
+ */
+void *malloc(size_t size);
+void free(void *ptr);
+
+#endif /* _STDLIB_H_ */
diff --git a/build/install/include/string.h b/build/install/include/string.h
new file mode 100644
index 0000000..2c9de95
--- /dev/null
+++ b/build/install/include/string.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STRING_H_
+#define _STRING_H_
+
+#include <kern/types.h>
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/*
+ * Standard C string functions.
+ */
+char *strcat(char *, const char *);
+char *strcpy(char *, const char *);
+char *strchr(const char *, int);
+char *strrchr(const char *, int);
+int strcmp(const char *, const char *);
+size_t strlen(const char *);
+char *strtok_r(char *, const char *, char **);
+char *strtok(char *, const char *);
+
+void *memset(void *, int c, size_t);
+void *memcpy(void *, const void *, size_t);
+void *memmove(void *, const void *, size_t);
+int memcmp(const void *, const void *, size_t);
+
+/*
+ * POSIX string functions.
+ */
+const char *strerror(int errcode);
+
+/*
+ * BSD string functions.
+ */
+void bzero(void *, size_t);
+
+
+#endif /* _STRING_H_ */
diff --git a/build/install/include/sys/endian.h b/build/install/include/sys/endian.h
new file mode 100644
index 0000000..f957631
--- /dev/null
+++ b/build/install/include/sys/endian.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_ENDIAN_H_
+#define _SYS_ENDIAN_H_
+
+#include <kern/endian.h>
+
+#endif /* _SYS_ENDIAN_H_ */
diff --git a/build/install/include/sys/ioctl.h b/build/install/include/sys/ioctl.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/sys/ioctl.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/sys/null.h b/build/install/include/sys/null.h
new file mode 100644
index 0000000..8ed8971
--- /dev/null
+++ b/build/install/include/sys/null.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_NULL_H_
+#define _SYS_NULL_H_
+
+/*
+ * Null pointer.
+ */
+
+#define NULL ((void *)0)
+
+#endif /* _SYS_NULL_H_ */
diff --git a/build/install/include/sys/reboot.h b/build/install/include/sys/reboot.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/sys/reboot.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/sys/stat.h b/build/install/include/sys/stat.h
new file mode 100644
index 0000000..404608d
--- /dev/null
+++ b/build/install/include/sys/stat.h
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_STAT_H_
+#define _SYS_STAT_H_
+
+/*
+ * Get struct stat and all the #defines from the kernel
+ */
+#include <kern/stat.h>
+#include <kern/stattypes.h>
+
+/*
+ * Test macros for object types.
+ */
+#define S_ISDIR(mode) ((mode & _S_IFMT) == _S_IFDIR)
+#define S_ISREG(mode) ((mode & _S_IFMT) == _S_IFREG)
+#define S_ISDIR(mode) ((mode & _S_IFMT) == _S_IFDIR)
+#define S_ISLNK(mode) ((mode & _S_IFMT) == _S_IFLNK)
+#define S_ISIFO(mode) ((mode & _S_IFMT) == _S_IFIFO)
+#define S_ISSOCK(mode) ((mode & _S_IFMT) ==_S_IFSOCK)
+#define S_ISCHR(mode) ((mode & _S_IFMT) == _S_IFCHR)
+#define S_ISBLK(mode) ((mode & _S_IFMT) == _S_IFBLK)
+
+/*
+ * Provide non-underscore names. These are not actually standard; for
+ * some reason only the test macros are.
+ */
+#define S_IFMT   _S_IFMT
+#define S_IFREG  _S_IFREG
+#define S_IFDIR  _S_IFDIR
+#define S_IFLNK  _S_IFLNK
+#define S_IFIFO  _S_IFIFO
+#define S_IFSOCK _S_IFSOCK
+#define S_IFCHR  _S_IFCHR
+#define S_IFBLK  _S_IFBLK
+
+/*
+ * stat is the same as fstat, only on a file that isn't already
+ * open. lstat is the same as stat, only if the name passed names a
+ * symlink, information about the symlink is returned rather than
+ * information about the file it points to. You don't need to
+ * implement lstat unless you're implementing symbolic links.
+ */
+int fstat(int filehandle, struct stat *buf);
+int stat(const char *path, struct stat *buf);
+int lstat(const char *path, struct stat *buf);
+
+/* 
+ * The second argument to mkdir is the mode for the new directory.
+ * Unless you're implementing security and permissions, you can
+ * (and should) ignore it. See notes in unistd.h.
+ */
+int mkdir(const char *dirname, int ignore);
+
+
+#endif /* _SYS_STAT_H_ */
diff --git a/build/install/include/sys/types.h b/build/install/include/sys/types.h
new file mode 100644
index 0000000..a3f8f94
--- /dev/null
+++ b/build/install/include/sys/types.h
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_TYPES_H_
+#define _SYS_TYPES_H_
+
+/*
+ * This header file is supposed to define standard system types,
+ * stuff like size_t and pid_t, as well as define a few other
+ * standard symbols like NULL.
+ *
+ * There are no such types that are user-level only.
+ */
+
+/* Get the exported kernel definitions, protected with __ */
+#include <kern/types.h>
+
+/* Pick up stuff that needs to be defined individually due to standards. */
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/*
+ * Define the rest with user-visible names.
+ *
+ * Note that the standards-compliance stuff is not by any means
+ * complete here yet...
+ */
+
+typedef __ssize_t ssize_t;
+typedef __ptrdiff_t ptrdiff_t;
+
+/* ...and machine-independent from <kern/types.h>. */
+typedef __blkcnt_t blkcnt_t;
+typedef __blksize_t blksize_t;
+typedef __daddr_t daddr_t;
+typedef __dev_t dev_t;
+typedef __fsid_t fsid_t;
+typedef __gid_t gid_t;
+typedef __in_addr_t in_addr_t;
+typedef __in_port_t in_port_t;
+typedef __ino_t ino_t;
+typedef __mode_t mode_t;
+typedef __nlink_t nlink_t;
+typedef __off_t off_t;
+typedef __pid_t pid_t;
+typedef __rlim_t rlim_t;
+typedef __sa_family_t sa_family_t;
+typedef __time_t time_t;
+typedef __uid_t uid_t;
+
+typedef __nfds_t nfds_t;
+typedef __socklen_t socklen_t;
+
+/*
+ * Number of bits per byte.
+ */
+
+#define CHAR_BIT __CHAR_BIT
+
+
+#endif /* _SYS_TYPES_H_ */
diff --git a/build/install/include/sys/wait.h b/build/install/include/sys/wait.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/sys/wait.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/time.h b/build/install/include/time.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/time.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/types/size_t.h b/build/install/include/types/size_t.h
new file mode 100644
index 0000000..d7a9532
--- /dev/null
+++ b/build/install/include/types/size_t.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _TYPES_SIZE_T_H_
+#define _TYPES_SIZE_T_H_
+
+#include <kern/types.h>
+typedef __size_t size_t;
+
+#endif /* _TYPES_SIZE_T_H_ */
diff --git a/build/install/include/unistd.h b/build/install/include/unistd.h
new file mode 100644
index 0000000..a9b2ca3
--- /dev/null
+++ b/build/install/include/unistd.h
@@ -0,0 +1,167 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _UNISTD_H_
+#define _UNISTD_H_
+
+#include <sys/types.h>
+
+/*
+ * Get the various constants (flags, codes, etc.) for calls from
+ * kernel includes. This way user-level code doesn't need to know
+ * about the kern/ headers.
+ */
+#include <kern/fcntl.h>
+#include <kern/ioctl.h>
+#include <kern/reboot.h>
+#include <kern/seek.h>
+#include <kern/time.h>
+#include <kern/unistd.h>
+#include <kern/wait.h>
+
+
+/*
+ * Prototypes for OS/161 system calls.
+ *
+ * Note that the following system calls are prototyped in other
+ * header files, as follows:
+ *
+ *     stat:     sys/stat.h
+ *     fstat:    sys/stat.h
+ *     lstat:    sys/stat.h
+ *     mkdir:    sys/stat.h
+ *
+ * If this were standard Unix, more prototypes would go in other
+ * header files as well, as follows:
+ * 
+ *     waitpid:  sys/wait.h
+ *     open:     fcntl.h or sys/fcntl.h
+ *     reboot:   sys/reboot.h
+ *     ioctl:    sys/ioctl.h
+ *     remove:   stdio.h
+ *     rename:   stdio.h
+ *     time:     time.h
+ *
+ * Also note that the prototypes for open() and mkdir() contain, for
+ * compatibility with Unix, an extra argument that is not meaningful
+ * in OS/161. This is the "mode" (file permissions) for a newly created
+ * object. (With open, if no file is created, this is ignored, and the
+ * call prototype is gimmicked so it doesn't have to be passed either.)
+ * 
+ * You should ignore these arguments in the OS/161 kernel unless you're
+ * implementing security and file permissions. 
+ *
+ * If you are implementing security and file permissions and using a 
+ * model different from Unix so that you need different arguments to
+ * these calls, you may make appropriate changes, or define new syscalls
+ * with different names and take the old ones out, or whatever. 
+ *
+ * As a general rule of thumb, however, while you can make as many new
+ * syscalls of your own as you like, you shouldn't change the
+ * definitions of the ones that are already here. They've been written
+ * to be pretty much compatible with Unix, and the teaching staff has
+ * test code that expects them to behave in particular ways.
+ *
+ * Of course, if you want to redesign the user/kernel API and make a
+ * lot of work for yourself, feel free, just contact the teaching
+ * staff beforehand. :-)
+ *
+ * The categories (required/recommended/optional) are guesses - check
+ * the text of the various assignments for an authoritative list.
+ */
+
+
+/*
+ * NOTE NOTE NOTE NOTE NOTE
+ *
+ * This file is *not* shared with the kernel, even though in a sense
+ * the kernel needs to know about these prototypes. This is because,
+ * due to error handling concerns, the in-kernel versions of these
+ * functions will usually have slightly different signatures.
+ */
+
+
+#ifdef __GNUC__
+/* GCC gets into a snit if _exit isn't declared to not return */
+#define __DEAD __attribute__((__noreturn__))
+#else
+#define __DEAD
+#endif
+
+/* Required. */
+__DEAD void _exit(int code);
+int execv(const char *prog, char *const *args);
+pid_t fork(void);
+int waitpid(pid_t pid, int *returncode, int flags);
+/* 
+ * Open actually takes either two or three args: the optional third
+ * arg is the file mode used for creation. Unless you're implementing
+ * security and permissions, you can ignore it.
+ */
+int open(const char *filename, int flags, ...);
+int read(int filehandle, void *buf, size_t size);
+int write(int filehandle, const void *buf, size_t size);
+int close(int filehandle);
+int reboot(int code);
+int sync(void);
+/* mkdir - see sys/stat.h */
+int rmdir(const char *dirname);
+
+/* Recommended. */
+int getpid(void);
+int ioctl(int filehandle, int code, void *buf);
+off_t lseek(int filehandle, off_t pos, int code);
+int fsync(int filehandle);
+int ftruncate(int filehandle, off_t size);
+int remove(const char *filename);
+int rename(const char *oldfile, const char *newfile);
+int link(const char *oldfile, const char *newfile);
+/* fstat - see sys/stat.h */
+int chdir(const char *path);
+
+/* Optional. */
+void *sbrk(int change);
+int getdirentry(int filehandle, char *buf, size_t buflen);
+int symlink(const char *target, const char *linkname);
+int readlink(const char *path, char *buf, size_t buflen);
+int dup2(int filehandle, int newhandle);
+int pipe(int filehandles[2]);
+time_t __time(time_t *seconds, unsigned long *nanoseconds);
+int __getcwd(char *buf, size_t buflen);
+/* stat - see sys/stat.h */
+/* lstat - see sys/stat.h */
+
+/*
+ * These are not themselves system calls, but wrapper routines in libc.
+ */
+
+char *getcwd(char *buf, size_t buflen);		/* calls __getcwd */
+time_t time(time_t *seconds);			/* calls __time */
+
+#endif /* _UNISTD_H_ */
diff --git a/build/install/lib/crt0.o b/build/install/lib/crt0.o
new file mode 100644
index 0000000..a24f143
Binary files /dev/null and b/build/install/lib/crt0.o differ
diff --git a/build/install/lib/libc.a b/build/install/lib/libc.a
new file mode 100644
index 0000000..06a8d2f
Binary files /dev/null and b/build/install/lib/libc.a differ
diff --git a/build/install/man/bin/cat.html b/build/install/man/bin/cat.html
new file mode 100644
index 0000000..2b79d84
--- /dev/null
+++ b/build/install/man/bin/cat.html
@@ -0,0 +1,42 @@
+<html>
+<head>
+<title>cat</title>
+<body bgcolor=#ffffff>
+<h2 align=center>cat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+cat - concatenate and print files
+
+<h3>Synopsis</h3>
+/bin/cat <em>files...</em>
+
+<h3>Description</h3>
+
+cat prints the files listed on its command line in order to its
+standard output. If the magic filename "-" is encountered, cat
+prints its standard input up to the first EOF.
+<p>
+
+With no arguments, cat prints its standard input.
+<p>
+
+cat takes no options.
+<p>
+
+<h3>Requirements</h3>
+
+cat uses the following syscalls:
+<ul>
+<li><A HREF=../syscall/open.html>open</A>
+<li><A HREF=../syscall/read.html>read</A>
+<li><A HREF=../syscall/write.html>write</A>
+<li><A HREF=../syscall/close.html>close</A>
+<li><A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+cat should function properly once the basic system calls assignment is
+completed.
+
+</body>
+</html>
diff --git a/build/install/man/bin/cp.html b/build/install/man/bin/cp.html
new file mode 100644
index 0000000..ebc38b3
--- /dev/null
+++ b/build/install/man/bin/cp.html
@@ -0,0 +1,42 @@
+<html>
+<head>
+<title>cp</title>
+<body bgcolor=#ffffff>
+<h2 align=center>cp</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+cp - copy files
+
+<h3>Synopsis</h3>
+/bin/cp <em>oldfile</em> <em>newfile</em>
+
+<h3>Description</h3>
+
+cp copies the file <em>oldfile</em> to the file <em>newfile</em>,
+overwriting <em>newfile</em> if it already exists.
+<p>
+
+cp supports no options.
+<p>
+
+<h3>Requirements</h3>
+
+cp uses the following syscalls:
+<ul>
+<li><A HREF=../syscall/open.html>open</A>
+<li><A HREF=../syscall/read.html>read</A>
+<li><A HREF=../syscall/write.html>write</A>
+<li><A HREF=../syscall/close.html>close</A>
+<li><A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+cp should function properly once the basic system calls assignment is
+completed.
+
+<h3>See Also</h3>
+
+<A HREF=ln.html>ln</A>, <A HREF=mv.html>mv<A>
+
+</body>
+</html>
diff --git a/build/install/man/bin/false.html b/build/install/man/bin/false.html
new file mode 100644
index 0000000..faed42f
--- /dev/null
+++ b/build/install/man/bin/false.html
@@ -0,0 +1,31 @@
+<html>
+<head>
+<title>false</title>
+<body bgcolor=#ffffff>
+<h2 align=center>false</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+false - return false value
+
+<h3>Synopsis</h3>
+/bin/false
+
+<h3>Description</h3>
+
+false exits with exit code 1, signifying failure.
+
+<h3>Requirements</h3>
+
+false uses the <A HREF=../syscall/_exit.html>_exit</A> system call.
+<p>
+
+false should function properly once the basic system calls assignment
+is completed.
+
+<h3>See Also</h3>
+
+<A HREF=true.html>true</A>
+
+</body>
+</html>
diff --git a/build/install/man/bin/index.html b/build/install/man/bin/index.html
new file mode 100644
index 0000000..6aa8880
--- /dev/null
+++ b/build/install/man/bin/index.html
@@ -0,0 +1,37 @@
+<html>
+<head>
+<title>OS/161 Binaries</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Binaries (/bin)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=cat.html>cat</A> - concatenate and print files
+<li> <A HREF=cp.html>cp</A> - copy files
+<li> <A HREF=false.html>false</A> - return false value
+<li> <A HREF=ln.html>ln</A> - link files
+<li> <A HREF=ls.html>ls</A> - list files or directory contents
+<li> <A HREF=mkdir.html>mkdir</A> - create directory
+<li> <A HREF=mv.html>mv</A> - rename or move files
+<li> <A HREF=pwd.html>pwd</A> - print working directory
+<li> <A HREF=rm.html>rm</A> - remove (unlink) files
+<li> <A HREF=rmdir.html>rmdir</A> - remove directory
+<li> <A HREF=sh.html>sh</A> - user command shell
+<li> <A HREF=sync.html>sync</A> - synchronize buffers to disk
+<li> <A HREF=true.html>true</A> - return true value
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/bin/ln.html b/build/install/man/bin/ln.html
new file mode 100644
index 0000000..2e52ca8
--- /dev/null
+++ b/build/install/man/bin/ln.html
@@ -0,0 +1,52 @@
+<html>
+<head>
+<title>ln</title>
+<body bgcolor=#ffffff>
+<h2 align=center>ln</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+ln - link files
+
+<h3>Synopsis</h3>
+/bin/ln <em>oldfile</em> <em>newfile</em>
+<br>
+/bin/ln -s <em>oldfile</em> <em>newfile</em>
+
+<h3>Description</h3>
+
+ln creates links to files. The first usage creates a hard link, that
+is, an additional name for the <strong>same</strong> file. The second
+usage, with the -s option, creates a symbolic link, a special
+filesystem entry that redirects accesses back to the first original
+file.
+<p>
+
+The symlink created is of the form <em>newfile</em> -> <em>oldfile</em>.
+<p>
+
+<h3>Requirements</h3>
+
+ln uses the following syscalls:
+<ul>
+<li><A HREF=../syscall/link.html>link</A>
+<li><A HREF=../syscall/symlink.html>symlink</A>
+<li><A HREF=../syscall/write.html>write</A>
+<li><A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+ln without the -s option should work once (or if) you implement hard
+links.  ln with the -s option should work once (or if) you implement
+symbolic links. Check your assignments for when (or if) you need to
+implement these features.
+<p>
+
+ln is able to create symlinks even if hard links are not implemented,
+and vice versa.
+
+<h3>See Also</h3>
+
+<A HREF=cp.html>cp</A>, <A HREF=mv.html>mv<A>
+
+</body>
+</html>
diff --git a/build/install/man/bin/ls.html b/build/install/man/bin/ls.html
new file mode 100644
index 0000000..bf9e769
--- /dev/null
+++ b/build/install/man/bin/ls.html
@@ -0,0 +1,60 @@
+<html>
+<head>
+<title>ls</title>
+<body bgcolor=#ffffff>
+<h2 align=center>ls</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+ls - list files or directory contents
+
+<h3>Synopsis</h3>
+/bin/ls [-adlRs] [<em>path</em>...]
+
+<h3>Description</h3>
+
+ls lists the filesystem objects specified on the command line. If they
+are directories, the contents of the directories are listed (unless
+the -d option is used).
+<p>
+
+If the -a option is given, filenames beginning with dot (.) will be
+listed. Ordinarily, they are skipped.
+<p>
+
+If the -d option is given, directory contents will not be listed; the
+directories themselves will be.
+<p>
+
+If the -l option is given, a long format listing showing the file
+size, type, and link count will be displayed instead of just the
+filenames.
+<p>
+
+If the -R option is given, subdirectories encountered will be listed
+recursively.
+<p>
+
+If the -s option is given, the number of filesystem blocks used by
+each object will be displayed in addition to other information.
+<p>
+
+If no <em>paths</em> are specified, the current directory is assumed.
+
+<h3>Requirements</h3>
+
+ls uses the following syscalls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/fstat.html>fstat</A>
+<li> <A HREF=../syscall/getdirentry.html>getdirentry</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+ls should function properly once the file system assignment is
+completed.
+
+</body>
+</html>
diff --git a/build/install/man/bin/mkdir.html b/build/install/man/bin/mkdir.html
new file mode 100644
index 0000000..1e91557
--- /dev/null
+++ b/build/install/man/bin/mkdir.html
@@ -0,0 +1,36 @@
+<html>
+<head>
+<title>mkdir</title>
+<body bgcolor=#ffffff>
+<h2 align=center>mkdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+mkdir - create directory
+
+<h3>Synopsis</h3>
+/bin/mkdir <em>directory</em>
+
+<h3>Description</h3>
+
+mkdir creates the named directory. All intermediate components must
+already exist. If the named directory already exists, an error occurs.
+
+<h3>Requirements</h3>
+
+mkdir uses the following syscalls:
+<ul>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+mkdir should function properly once the file system assignment is
+completed.
+
+<h3>See Also</h3>
+
+<A HREF=rmdir.html>rmdir</A>
+
+</body>
+</html>
diff --git a/build/install/man/bin/mv.html b/build/install/man/bin/mv.html
new file mode 100644
index 0000000..6e2ee2b
--- /dev/null
+++ b/build/install/man/bin/mv.html
@@ -0,0 +1,42 @@
+<html>
+<head>
+<title>mv</title>
+<body bgcolor=#ffffff>
+<h2 align=center>mv</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+mv - rename or move files
+
+<h3>Synopsis</h3>
+/bin/mv <em>oldname</em> <em>newname</em>
+
+<h3>Description</h3>
+
+mv renames the filesystem object specified by <em>oldname</em> so that
+it is subsequently named <em>newname</em>. Both files and directories
+can be renamed or moved into other parts of the filesystem tree.
+However, devices may not be renamed and filesystem objects may not be
+moved across filesystems.
+<p>
+
+mv accepts no options.
+
+<h3>Requirements</h3>
+
+mv uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/rename.html>rename</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+mv should function properly once the file system assignment is
+completed.
+
+<h3>See Also</h3>
+
+<A HREF=cp.html>cp</A>, <A HREF=ln.html>ln<A>
+
+</body>
+</html>
diff --git a/build/install/man/bin/pwd.html b/build/install/man/bin/pwd.html
new file mode 100644
index 0000000..a43a202
--- /dev/null
+++ b/build/install/man/bin/pwd.html
@@ -0,0 +1,36 @@
+<html>
+<head>
+<title>pwd</title>
+<body bgcolor=#ffffff>
+<h2 align=center>pwd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+pwd - print working directory
+
+<h3>Synopsis</h3>
+/bin/pwd
+
+<h3>Description</h3>
+
+pwd prints the current working directory.
+
+<h3>Requirements</h3>
+
+pwd uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/__getcwd.html>__getcwd</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+pwd should function properly once the basic system calls assignment is
+completed, except on filesystems or in directories that do not support
+getcwd.
+<p>
+
+pwd should function properly in all directories of your filesystem
+once the file system assignment is completed.
+
+</body>
+</html>
diff --git a/build/install/man/bin/rm.html b/build/install/man/bin/rm.html
new file mode 100644
index 0000000..1bd861d
--- /dev/null
+++ b/build/install/man/bin/rm.html
@@ -0,0 +1,47 @@
+<html>
+<head>
+<title>rm</title>
+<body bgcolor=#ffffff>
+<h2 align=center>rm</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+rm - remove (unlink) files
+
+<h3>Synopsis</h3>
+/bin/rm <em>file...</em>
+
+<h3>Description</h3>
+
+rm deletes the files specified on its command line. (If one of the
+filenames specified is one of several hard links to the same file, the
+actual file is only erased when all links are removed.)
+<p>
+
+Using rm on directories produces an error. Use 
+<A HREF=rmdir.html>rmdir</A> to remove
+directories. 
+
+<h3>Requirements</h3>
+
+rm uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+rm should function properly once the file system assignment is
+completed.
+
+<h3>Restrictions</h3>
+
+<A HREF=../dev/emu.html>emufs</A> does not support rm. (This is
+intentional.)
+
+<h3>See Also</h3>
+
+<A HREF=rmdir.html>rmdir</A>
+
+</body>
+</html>
diff --git a/build/install/man/bin/rmdir.html b/build/install/man/bin/rmdir.html
new file mode 100644
index 0000000..8d19a1f
--- /dev/null
+++ b/build/install/man/bin/rmdir.html
@@ -0,0 +1,45 @@
+<html>
+<head>
+<title>rmdir</title>
+<body bgcolor=#ffffff>
+<h2 align=center>rmdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+rmdir - remove directory
+
+<h3>Synopsis</h3>
+/bin/rmdir <em>directory</em>
+
+<h3>Description</h3>
+
+rmdir removes the specified directory. The directory must be empty.
+<p>
+
+It is an error to attempt to remove the . or .. names in a directory,
+or to apply rmdir to a filesystem object that is not a directory.
+<p>
+
+<h3>Requirements</h3>
+
+rmdir uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+rmdir should function properly once the file system assignment is
+completed.
+
+<h3>Restrictions</h3>
+
+<A HREF=../dev/emu.html>emufs</A> does not support rmdir. (This is
+intentional.)
+
+<h3>See Also</h3>
+
+<A HREF=mkdir.html>mkdir</A>, <A HREF=rm.html>rm</A>
+
+</body>
+</html>
diff --git a/build/install/man/bin/sh.html b/build/install/man/bin/sh.html
new file mode 100644
index 0000000..81fed55
--- /dev/null
+++ b/build/install/man/bin/sh.html
@@ -0,0 +1,40 @@
+<html>
+<head>
+<title>sh</title>
+<body bgcolor=#ffffff>
+<h2 align=center>sh</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+sh - user command shell
+
+<h3>Synopsis</h3>
+/bin/sh [-c command]
+
+<h3>Description</h3>
+
+This is a simple command interpreter. The shell provided with OS/161
+(or, perhaps, provided as a solution set, if you had to write a shell)
+is a simple shell accepting some basic Unix-like syntax.
+
+<h3>Requirements</h3>
+
+sh uses these system calls:
+
+<ul>
+<li> <A HREF=../syscall/chdir.html>chdir</A>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+<li> <A HREF=../syscall/__time.html>__time</A>
+</ul>
+
+This shell's basic functionality should work properly once the basic
+system calls assignment is complete. Some features may require
+additional support which may be part of subsequent assignments.
+
+</body>
+</html>
diff --git a/build/install/man/bin/sync.html b/build/install/man/bin/sync.html
new file mode 100644
index 0000000..16fb450
--- /dev/null
+++ b/build/install/man/bin/sync.html
@@ -0,0 +1,25 @@
+<html>
+<head>
+<title>sync</title>
+<body bgcolor=#ffffff>
+<h2 align=center>sync</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+sync - synchronize buffers to disk
+
+<h3>Synopsis</h3>
+/bin/sync
+
+<h3>Description</h3>
+
+sync causes filesystem I/O buffers that have been modified but not yet
+written to be written to disk.
+
+<h3>Requirements</h3>
+
+sync uses the <A HREF=../syscall/sync.html>sync</A> system call, and
+of course <A HREF=../syscall/_exit.html>_exit</A>.
+
+</body>
+</html>
diff --git a/build/install/man/bin/true.html b/build/install/man/bin/true.html
new file mode 100644
index 0000000..c594546
--- /dev/null
+++ b/build/install/man/bin/true.html
@@ -0,0 +1,31 @@
+<html>
+<head>
+<title>true</title>
+<body bgcolor=#ffffff>
+<h2 align=center>true</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+true - return true value
+
+<h3>Synopsis</h3>
+/bin/true
+
+<h3>Description</h3>
+
+true exits with exit code 0, signifying success.
+
+<h3>Requirements</h3>
+
+true uses the <A HREF=../syscall/_exit.html>_exit</A> system call.
+<p>
+
+true should function properly once the basic system calls assignment
+is completed.
+
+<h3>See Also</h3>
+
+<A HREF=false.html>false</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/beep.html b/build/install/man/dev/beep.html
new file mode 100644
index 0000000..a788f87
--- /dev/null
+++ b/build/install/man/dev/beep.html
@@ -0,0 +1,27 @@
+<html>
+<head>
+<title>beep</title>
+<body bgcolor=#ffffff>
+<h2 align=center>beep</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+beep - console beep device
+
+<h3>Synopsis</h3>
+device beep0 at ltimer*
+
+<h3>Description</h3>
+
+The beep device is an abstract entry point for in-kernel beeping. The
+beep() function is provided, and redirected to the first attached
+device. If no beep device is available, beeping will cause a warning
+to be printed to the system console.
+<p>
+
+<h3>See Also</h3>
+
+<A HREF=ltimer.html>ltimer</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/console.html b/build/install/man/dev/console.html
new file mode 100644
index 0000000..2142b2d
--- /dev/null
+++ b/build/install/man/dev/console.html
@@ -0,0 +1,35 @@
+<html>
+<head>
+<title>console</title>
+<body bgcolor=#ffffff>
+<h2 align=center>con</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+con - system login console
+
+<h3>Synopsis</h3>
+device con0 at lser*<br>
+device con0 at lscreen*<br>
+
+<h3>Description</h3>
+
+The generic console device can be attached to either a serial port or
+a memory-mapped screen. It provides no internal buffering or input
+editing. You may add such features if you desire.
+<p>
+
+The in-kernel kprintf() routine and its relatives send their
+output to the console device.
+
+<h3>Files</h3>
+
+<tt>con:</tt>
+
+<h3>See Also</h3>
+
+<A HREF=lser.html>lser</A>,
+<A HREF=lscreen.html>lscreen</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/emu.html b/build/install/man/dev/emu.html
new file mode 100644
index 0000000..4b7481a
--- /dev/null
+++ b/build/install/man/dev/emu.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>emu</title>
+<body bgcolor=#ffffff>
+<h2 align=center>emu</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+emu - emulator pass-through filesystem
+
+<h3>Synopsis</h3>
+device emu* at lamebus*
+
+<h3>Description</h3>
+
+emu, also known as emufs, is a driver for a special-purpose System/161
+device that provides access to the filesystem System/161 is running
+atop. It provides the appearance of a mounted filesystem.
+<p>
+
+It is not recommended to access the same underlying files through
+different instances of emufs.
+
+<h3>Files</h3>
+
+<tt>emu0:</tt>, <tt>emu1:</tt>, etc.
+
+<h3>See Also</h3>
+<A HREF=lamebus.html>lamebus</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/index.html b/build/install/man/dev/index.html
new file mode 100644
index 0000000..1a0e4bc
--- /dev/null
+++ b/build/install/man/dev/index.html
@@ -0,0 +1,37 @@
+<html>
+<head>
+<title>OS/161 Devices</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Devices</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=beep.html>beep</A> - console beep device
+<li> <A HREF=console.html>con</A> - system login console
+<li> <A HREF=emu.html>emu</A> - emulator pass-through filesystem
+<li> <A HREF=lamebus.html>lamebus</A> - driver for LAMEbus system bus
+<li> <A HREF=lhd.html>lhd</A> - LAMEbus hard drive
+<li> <A HREF=lnet.html>lnet</A> - LAMEbus network card
+<li> <A HREF=lrandom.html>lrandom</A> - LAMEbus random source
+<li> <A HREF=lscreen.html>lscreen</A> - LAMEbus memory-mapped screen
+<li> <A HREF=lser.html>lser</A> - LAMEbus serial port
+<li> <A HREF=ltimer.html>ltimer</A> - LAMEbus timer device
+<li> <A HREF=null.html>null</A> - null device
+<li> <A HREF=random.html>random</A> - kernel randomness source
+<li> <A HREF=rtclock.html>rtclock</A> - realtime clock
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lamebus.html b/build/install/man/dev/lamebus.html
new file mode 100644
index 0000000..e5f7a1c
--- /dev/null
+++ b/build/install/man/dev/lamebus.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>lamebus</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lamebus</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lamebus - driver for LAMEbus system bus
+
+<h3>Synopsis</h3>
+device lamebus0
+
+<h3>Description</h3>
+
+LAMEbus is the system bus for System/161. This driver takes care of
+managing the bus controller, distributing interrupts, and similar
+issues. It serves mostly as an attachment point for other drivers.
+
+<h3>See Also</h3>
+<A HREF=emu.html>emu</A>,
+<A HREF=lhd.html>lhd</A>,
+<A HREF=lnet.html>lnet</A>,
+<A HREF=lrandom.html>lrandom</A>,
+<A HREF=lscreen.html>lscreen</A>,
+<A HREF=lser.html>lser</A>,
+<A HREF=ltimer.html>ltimer</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lhd.html b/build/install/man/dev/lhd.html
new file mode 100644
index 0000000..15d7a37
--- /dev/null
+++ b/build/install/man/dev/lhd.html
@@ -0,0 +1,27 @@
+<html>
+<head>
+<title>lhd</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lhd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lhd - LAMEbus hard drive
+
+<h3>Synopsis</h3>
+device lhd* at lamebus*
+
+<h3>Description</h3>
+
+lhd is the driver for the CS161 LAMEbus fixed disk interface. It
+provides mountable block-device and raw-device access to the disk.
+
+<h3>Files</h3>
+
+<tt>lhd0:</tt>, <tt>lhd0raw:</tt>, <tt>lhd1:</tt>, <tt>lhd1raw:</tt>, etc.
+
+<h3>See Also</h3>
+<A HREF=lamebus.html>lamebus</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lnet.html b/build/install/man/dev/lnet.html
new file mode 100644
index 0000000..51b2e78
--- /dev/null
+++ b/build/install/man/dev/lnet.html
@@ -0,0 +1,25 @@
+<html>
+<head>
+<title>lnet</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lnet</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lnet - LAMEbus network card
+
+<h3>Synopsis</h3>
+options net<br>
+device lnet* at lamebus*<br>
+
+<h3>Description</h3>
+
+lnet is the driver for the CS161 LAMEbus network interface card.  As
+of this writing the driver is not completed and is thus not available
+for actual use yet.
+
+<h3>See Also</h3>
+<A HREF=lamebus.html>lamebus</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lrandom.html b/build/install/man/dev/lrandom.html
new file mode 100644
index 0000000..b228a5e
--- /dev/null
+++ b/build/install/man/dev/lrandom.html
@@ -0,0 +1,26 @@
+<html>
+<head>
+<title>lrandom</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lrandom</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lrandom - LAMEbus random source
+
+<h3>Synopsis</h3>
+device lrandom* at lamebus*
+
+<h3>Description</h3>
+
+lrandom is the driver for the CS161 LAMEbus random source card.
+<p>
+
+The generic <A HREF=random.html>random</A> device can be attached to
+an lrandom instance.
+
+<h3>See Also</h3>
+<A HREF=lamebus.html>lamebus</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lscreen.html b/build/install/man/dev/lscreen.html
new file mode 100644
index 0000000..a65c35c
--- /dev/null
+++ b/build/install/man/dev/lscreen.html
@@ -0,0 +1,33 @@
+<html>
+<head>
+<title>lscreen</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lscreen</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lscreen - LAMEbus memory-mapped screen
+
+<h3>Synopsis</h3>
+device lscreen* at lamebus*
+
+<h3>Description</h3>
+
+lscreen is the driver for the CS161 LAMEbus memory-mapped screen
+card. It does not provide any internal input buffering; that is
+expected to happen at a higher level.
+<p>
+
+Since the memory-mapped screen card is not actually available yet as
+of this writing, the driver has not been tested and probably does not
+work.
+<p>
+
+The <A HREF=console.html>system console</A> device can be attached to an
+lscreen instance.
+
+<h3>See Also</h3>
+<A HREF=lamebus.html>lamebus</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lser.html b/build/install/man/dev/lser.html
new file mode 100644
index 0000000..79d32ad
--- /dev/null
+++ b/build/install/man/dev/lser.html
@@ -0,0 +1,29 @@
+<html>
+<head>
+<title>lser</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lser</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lser - LAMEbus serial port
+
+<h3>Synopsis</h3>
+device lser* at lamebus*
+
+<h3>Description</h3>
+
+lser is the driver for the CS161 LAMEbus serial port card. It does not
+provide any internal buffering; that is expected to happen at a higher
+level. It can, however, operate in either polled or interrupt-driven
+output mode.
+<p>
+
+The <A HREF=console.html>system console</A> device can be attached to an
+lser instance.
+
+<h3>See Also</h3>
+<A HREF=lamebus.html>lamebus</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/ltimer.html b/build/install/man/dev/ltimer.html
new file mode 100644
index 0000000..c2fa3f6
--- /dev/null
+++ b/build/install/man/dev/ltimer.html
@@ -0,0 +1,27 @@
+<html>
+<head>
+<title>ltimer</title>
+<body bgcolor=#ffffff>
+<h2 align=center>ltimer</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+ltimer - LAMEbus timer device
+
+<h3>Synopsis</h3>
+ltimer* at lamebus*
+
+<h3>Description</h3>
+
+ltimer is a driver for the CS161 LAMEbus clock/timer card. The
+card can also provide beep services to the kernel.
+<p>
+
+The <A HREF=beep.html>beep</A> and <A HREF=rtclock.html>rtclock</A>
+generic devices can be attached to an ltimer instance.
+
+<h3>See Also</h3>
+<A HREF=lamebus.html>lamebus</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/null.html b/build/install/man/dev/null.html
new file mode 100644
index 0000000..2c9b251
--- /dev/null
+++ b/build/install/man/dev/null.html
@@ -0,0 +1,21 @@
+<html>
+<head>
+<title>null</title>
+<body bgcolor=#ffffff>
+<h2 align=center>null</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+null - null device
+
+<h3>Description</h3>
+
+The null device does nothing. Reads generate immediate EOF; any data
+written is thrown away.
+
+<h3>Files</h3>
+
+<tt>null:</tt>
+
+</body>
+</html>
diff --git a/build/install/man/dev/random.html b/build/install/man/dev/random.html
new file mode 100644
index 0000000..e71ecf5
--- /dev/null
+++ b/build/install/man/dev/random.html
@@ -0,0 +1,35 @@
+<html>
+<head>
+<title>random</title>
+<body bgcolor=#ffffff>
+<h2 align=center>random</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+random - kernel randomness source
+
+<h3>Synopsis</h3>
+device random0 at lrandom*<br>
+device random0 at pseudorand0<br>
+
+<h3>Description</h3>
+
+The random device is the generalized interface to randomness sources.
+Only one random device is used; if more are attached they are ignored.
+If no random device is found, the kernel may not run.
+<p>
+
+The random device provides both the in-kernel random() function and a
+VFS character device, called <tt>random:</tt>. Bytes read from the
+latter have random values; writes are discarded.
+<p>
+
+<h3>Files</h3>
+<tt>random:</tt>
+
+<h3>See Also</h3>
+<A HREF=lrandom.html>lrandom</A>,
+<A HREF=pseudorand.html>pseudorand</A>
+
+</body>
+</html>
diff --git a/build/install/man/dev/rtclock.html b/build/install/man/dev/rtclock.html
new file mode 100644
index 0000000..9c13c0b
--- /dev/null
+++ b/build/install/man/dev/rtclock.html
@@ -0,0 +1,28 @@
+<html>
+<head>
+<title>rtclock</title>
+<body bgcolor=#ffffff>
+<h2 align=center>rtclock</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+rtclock - realtime clock
+
+<h3>Synopsis</h3>
+device rtclock0 at ltimer*
+
+<h3>Description</h3>
+
+The rtclock device is the generalized interface to the time of day. It
+provides the in-kernel function gettime().
+<p>
+
+Only the first clock attached is used. If no clock at all is found,
+the system will panic if gettime() is called.
+<p>
+
+<h3>See Also</h3>
+<A HREF=ltimer.html>ltimer</A>
+
+</body>
+</html>
diff --git a/build/install/man/index.html b/build/install/man/index.html
new file mode 100644
index 0000000..4921021
--- /dev/null
+++ b/build/install/man/index.html
@@ -0,0 +1,20 @@
+<html>
+<head>
+<title>OS/161 Manual</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h1 align=center>OS/161 Manual</h1>
+
+<ul>
+<li> <A HREF=bin>Binaries (/bin)</A>
+<li> <A HREF=sbin>Sysadmin binaries (/sbin)</A>
+<li> <A HREF=testbin>Test binaries (/testbin)</A>
+<li> <A HREF=syscall>System calls</A>
+<li> <A HREF=libc>C standard library (libc)</A>
+<li> <A HREF=dev>Device drivers</A>
+<li> <A HREF=misc>Miscellaneous</A>
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/libc/__vprintf.html b/build/install/man/libc/__vprintf.html
new file mode 100644
index 0000000..1927e60
--- /dev/null
+++ b/build/install/man/libc/__vprintf.html
@@ -0,0 +1,53 @@
+<html>
+<head>
+<title>__vprintf</title>
+<body bgcolor=#ffffff>
+<h2 align=center>__vprintf</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+__vprintf - printf backend
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+__vprintf(void (*<em>func</em>)(void *<em>clientdata</em>, 
+				const char *<em>str</em>, 
+				size_t <em>len</em>), 
+          void *<em>clientdata</em>, const char *<em>format</em>,
+	  va_list)
+
+<h3>Description</h3>
+
+In OS/161, __vprintf is the back-end engine for
+<A HREF=printf.html>printf</A> and printf-like functions. 
+Note that it is not portable - application code should use 
+<A HREF=snprintf.html>snprintf or vsnprintf</A> when implementing
+their own printf-like functions. This documentation is provided for
+use when extending OS/161 itself.
+<p>
+
+The <em>format</em> and subsequent arguments are treated as described
+under <A HREF=printf.html>printf</A>.
+<p>
+
+The <em>func</em> argument is called to print text generated by the
+formatting process. The <em>clientdata</em> argument is passed
+straight through __vprintf to <em>func</em>. The <em>str</em> argument
+to func points to some text that is to be printed; the <em>len</em>
+argument is the length of that string, which should not be assumed to
+be null-terminated.
+<p>
+
+The strings passed to <em>func</em> may be small; if printing is
+expensive buffering is probably indicated.
+
+<h3>Return Values</h3>
+__vprintf returns the number of characters printed.
+
+</body>
+</html>
diff --git a/build/install/man/libc/abort.html b/build/install/man/libc/abort.html
new file mode 100644
index 0000000..5cbc1b7
--- /dev/null
+++ b/build/install/man/libc/abort.html
@@ -0,0 +1,29 @@
+<html>
+<head>
+<title>abort</title>
+<body bgcolor=#ffffff>
+<h2 align=center>abort</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+abort - abnormal program termination
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;abort.h&gt;<br>
+<br>
+void<br>
+abort(void);
+
+<h3>Description</h3>
+
+The abort function causes immediate abnormal program termination.
+Cleanup is not performed.
+
+<h3>Return Values</h3>
+abort does not return.
+
+</body>
+</html>
diff --git a/build/install/man/libc/assert.html b/build/install/man/libc/assert.html
new file mode 100644
index 0000000..8b83a79
--- /dev/null
+++ b/build/install/man/libc/assert.html
@@ -0,0 +1,35 @@
+<html>
+<head>
+<title>assert</title>
+<body bgcolor=#ffffff>
+<h2 align=center>assert</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+assert - check assumptions at run time
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;assert.h&gt;<br>
+<br>
+assert(expression);
+
+<h3>Description</h3>
+
+assert checks that its argument evaluates to true. If this is not the
+case, an error message is printed and <A HREF=abort.html>abort</A> is
+called.
+<p>
+
+assert is a macro. If the macro NDEBUG is defined at compile time,
+assertion tests are removed.
+
+<h3>Caution</h3>
+
+Avoid writing assert expressions with side effects, as compiling with
+NDEBUG may or may not cause the side effects to disappear.
+
+</body>
+</html>
diff --git a/build/install/man/libc/atoi.html b/build/install/man/libc/atoi.html
new file mode 100644
index 0000000..a1e8c22
--- /dev/null
+++ b/build/install/man/libc/atoi.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>atoi</title>
+<body bgcolor=#ffffff>
+<h2 align=center>atoi</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+atoi - convert ascii to integer
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+int<br>
+atoi(const char *<em>string</em>);
+
+<h3>Description</h3>
+
+<em>string</em>, which should be a textual representation of an
+integer, is converted to the machine representation of that integer.
+Leading whitespace, if any, is skipped. Conversion stops when a
+non-numeric character is found.
+
+<h3>Return Values</h3>
+atoi returns the number converted. If no digits at all were found, it
+returns 0. 
+
+</body>
+</html>
diff --git a/build/install/man/libc/bzero.html b/build/install/man/libc/bzero.html
new file mode 100644
index 0000000..18382d2
--- /dev/null
+++ b/build/install/man/libc/bzero.html
@@ -0,0 +1,26 @@
+<html>
+<head>
+<title>bzero</title>
+<body bgcolor=#ffffff>
+<h2 align=center>bzero</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+bzero - zero out memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+void<br>
+bzero(void *<em>buf</em>, size_t <em>len</em>);
+
+<h3>Description</h3>
+
+The region of memory pointed to by <em>buf</em>, of length
+<em>len</em>, is zeroed out.
+
+</body>
+</html>
diff --git a/build/install/man/libc/calloc.html b/build/install/man/libc/calloc.html
new file mode 100644
index 0000000..8d67243
--- /dev/null
+++ b/build/install/man/libc/calloc.html
@@ -0,0 +1,37 @@
+<html>
+<head>
+<title>calloc</title>
+<body bgcolor=#ffffff>
+<h2 align=center>calloc</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+calloc - allocate and clear memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+void *<br>
+calloc(size_t <em>number</em>, size_t <em>size</em>);
+
+<h3>Description</h3>
+
+calloc allocates <em>number</em>*<em>size</em> bytes of memory, zeros
+it, and returns a pointer to it. It is exactly equivalent to 
+<A HREF=malloc.html>malloc</A>(<em>number</em>*<em>size</em>) followed
+by <A HREF=bzero.html>bzero</A>.
+
+<h3>Return Values</h3>
+calloc returns a pointer to the memory allocated. If memory cannot be
+obtained, NULL is returned.
+
+<h3>See Also</h3>
+<A HREF=malloc.html>malloc</A>,
+<A HREF=realloc.html>realloc</A>,
+<A HREF=free.html>free</A>
+
+</body>
+</html>
diff --git a/build/install/man/libc/err.html b/build/install/man/libc/err.html
new file mode 100644
index 0000000..8e4b026
--- /dev/null
+++ b/build/install/man/libc/err.html
@@ -0,0 +1,60 @@
+<html>
+<head>
+<title>err</title>
+<body bgcolor=#ffffff>
+<h2 align=center>err</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+err - print error messages
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;err.h&gt;<br>
+<br>
+void<br>
+err(int <em>exitcode</em>, const char *<em>format</em>, ...);<br>
+<br>
+void<br>
+errx(int <em>exitcode</em>, const char *<em>format</em>, ...);<br>
+<br>
+void<br>
+verr(int <em>exitcode</em>, const char *<em>format</em>, va_list);<br>
+<br>
+void<br>
+verrx(int <em>exitcode</em>, const char *<em>format</em>, va_list);<br>
+
+<h3>Description</h3>
+
+The err, errx, verr, and verrx functions print error messages to
+the standard error stream.
+<p>
+
+errx prints the name of the program, a colon, the text generated by
+passing <em>format</em> and subsequent args through
+<A HREF=printf.html>printf</A>, and a newline. Then,
+<A HREF=exit.html>exit</A> is called and passed the supplied 
+<em>exitcode</em>.
+<p>
+
+err does the same thing, except that a colon and the error string
+for the current error (obtained by calling 
+<A HREF=strerror.html>strerror</A> on 
+<A HREF=../syscall/errno.html>errno</A>) are printed prior to the
+newline.
+<p>
+
+verrx and verr are the same as errx and err respectively, except
+that the additional arguments for printf are taken to have been
+already packaged up in a va_list by use of the
+<A HREF=stdarg.html>stdarg</A> facility.
+<p>
+
+<h3>See Also</h3>
+
+<A HREF=warn.html>warn</A>
+
+</body>
+</html>
diff --git a/build/install/man/libc/exit.html b/build/install/man/libc/exit.html
new file mode 100644
index 0000000..3f9cbd4
--- /dev/null
+++ b/build/install/man/libc/exit.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>exit</title>
+<body bgcolor=#ffffff>
+<h2 align=center>exit</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+exit - terminate program
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+int<br>
+exit(int <em>code</em>);
+
+<h3>Description</h3>
+
+exit causes the program to exit. It calls internal cleanup routines,
+and then performs the actual exit by calling 
+<A HREF=../syscall/_exit.html>_exit</A>.
+
+<h3>Return Values</h3>
+exit does not return.
+
+</body>
+</html>
diff --git a/build/install/man/libc/free.html b/build/install/man/libc/free.html
new file mode 100644
index 0000000..566fc3c
--- /dev/null
+++ b/build/install/man/libc/free.html
@@ -0,0 +1,58 @@
+<html>
+<head>
+<title>free</title>
+<body bgcolor=#ffffff>
+<h2 align=center>free</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+free - release/deallocate memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+void<br>
+malloc(void *<em>ptr</em>);
+
+<h3>Description</h3>
+
+free releases a block of memory previously allocated with
+<A HREF=malloc.html>malloc</A>, <A HREF=calloc.html>calloc</A>,
+or <A HREF=realloc.html>realloc</A>.
+<p>
+
+Once free has been called, <em>ptr</em> is no longer valid and
+attempts to dereference it result in undefined behavior.
+(Pedantically, in fact, even using the <strong>value</strong> of
+<em>ptr</em> may produce undefined behavior.) Passing <em>ptr</em> to
+free a second or subsequent time (unless of course the same pointer
+value is again returned from malloc) is particularly likely to provoke
+undefined behavior in most implementations.
+<p>
+
+free(NULL) has no effect.
+<p>
+
+In practice it is desirable for implementations of free to detect, to
+the extent practically possible, pointers that were not previously
+allocated by one of the above functions or that are passed to free
+multiple times. However, this can be difficult and there is no useful
+standard mechanism for error reporting.
+<p>
+
+free does not necessarily unmap free memory or return it to the
+operating system, but may do so if it chooses.
+
+<h3>Return Values</h3>
+free returns no value.
+
+<h3>See Also</h3>
+<A HREF=calloc.html>calloc</A>,
+<A HREF=malloc.html>malloc</A>,
+<A HREF=realloc.html>realloc</A>
+
+</body>
+</html>
diff --git a/build/install/man/libc/getchar.html b/build/install/man/libc/getchar.html
new file mode 100644
index 0000000..a3dadfa
--- /dev/null
+++ b/build/install/man/libc/getchar.html
@@ -0,0 +1,36 @@
+<html>
+<head>
+<title>getchar</title>
+<body bgcolor=#ffffff>
+<h2 align=center>getchar</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+getchar - read character from standard input
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdio.h&gt;<br>
+<br>
+int<br>
+getchar(void);
+
+<h3>Description</h3>
+
+getchar reads a single character from standard input. The character is
+converted to unsigned char before being returned; thus, EOF, which is
+negative, is not a possible successful return value.
+
+<h3>Return Values</h3>
+On success, getchar returns the character read. On error, or end of
+file, EOF is returned.
+
+<h3>Errors</h3>
+
+Any of the errors associated with <A HREF=../syscall/read>read</A>
+may occur.
+
+</body>
+</html>
diff --git a/build/install/man/libc/getcwd.html b/build/install/man/libc/getcwd.html
new file mode 100644
index 0000000..b1b903c
--- /dev/null
+++ b/build/install/man/libc/getcwd.html
@@ -0,0 +1,53 @@
+<html>
+<head>
+<title>getcwd</title>
+<body bgcolor=#ffffff>
+<h2 align=center>getcwd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+getcwd - get name of current working directory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+char *<br>
+getcwd(char *<em>buf</em>, size_t <em>buflen</em>);
+
+<h3>Description</h3>
+
+The name of the current directory is computed and stored in
+<em>buf</em>, an area of size <em>buflen</em>. The resulting string is
+0-terminated.
+<p>
+
+This call is a wrapper (for Unix compatibility) around the system call
+<A HREF=../syscall/__getcwd.html>__getcwd</A>.
+<p>
+
+Note, however, that the BSD extension whereby space is allocated with
+<A HREF=malloc.html>malloc</A> if <em>buf</em> is NULL is not supported.
+
+<h3>Return Values</h3>
+On success, getcwd returns <em>buf</em>.
+On error, NULL is returned, and <A HREF=errno.html>errno</A>
+is set according to the error encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENOENT</td>	<td>A component of the pathname no longer exists.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>buf</em> points to an invalid address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/libc/index.html b/build/install/man/libc/index.html
new file mode 100644
index 0000000..aaa8634
--- /dev/null
+++ b/build/install/man/libc/index.html
@@ -0,0 +1,64 @@
+<html>
+<head>
+<title>OS/161 C Standard Library</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 C Standard Library (libc)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=__vprintf.html>__vprintf</A> - printf backend
+<li> <A HREF=abort.html>abort</A> - abnormal program termination
+<li> <A HREF=assert.html>assert</A> - check assumptions at run time
+<li> <A HREF=atoi.html>atoi</A> - convert ascii to integer
+<li> <A HREF=bzero.html>bzero</A> - zero out memory
+<li> <A HREF=calloc.html>calloc</A> - allocate and clear memory
+<li> <A HREF=err.html>err, errx</A> - print error messages
+<li> <A HREF=exit.html>exit</A> - terminate program
+<li> <A HREF=free.html>free</A> - release/deallocate memory
+<li> <A HREF=getchar.html>getchar</A> - read character from standard input
+<li> <A HREF=getcwd.html>getcwd</A> - get name of current working directory
+<li> <A HREF=setjmp.html>longjmp</A> - non-local jump operations
+<li> <A HREF=malloc.html>malloc</A> - allocate memory
+<li> <A HREF=memcpy.html>memcpy</A> - copy region of memory
+<li> <A HREF=memmove.html>memmove</A> - copy region of memory
+<li> <A HREF=memset.html>memset</A> - initialize region of memory
+<li> <A HREF=printf.html>printf</A> - print formatted output
+<li> <A HREF=putchar.html>putchar</A> - print character to standard output
+<li> <A HREF=puts.html>puts</A> - print string to standard output
+<li> <A HREF=random.html>random</A> - pseudorandom number generation
+<li> <A HREF=realloc.html>realloc</A> - resize allocated memory
+<li> <A HREF=setjmp.html>setjmp</A> - non-local jump operations
+<li> <A HREF=snprintf.html>snprintf</A> - print formatted text to string
+<li> <A HREF=stdarg.html>stdarg</A> - handle functions with variable arguments
+<li> <A HREF=strcat.html>strcat</A> - concatenate strings
+<li> <A HREF=strchr.html>strchr</A> - search string for character
+<li> <A HREF=strcmp.html>strcmp</A> - compare strings
+<li> <A HREF=strcpy.html>strcpy</A> - copy string
+<li> <A HREF=strerror.html>strerror</A> - get error message for error code
+<li> <A HREF=strlen.html>strlen</A> - determine length of string
+<li> <A HREF=strrchr.html>strrchr</A> - search string for character
+<li> <A HREF=strtok.html>strtok</A> - tokenize string
+<li> <A HREF=strtok_r.html>strtok_r</A> - tokenize string reentrantly
+<li> <A HREF=system.html>system</A> - run command as subprocess
+<li> <A HREF=time.html>time</A> - get time of day
+<li> <A HREF=err.html>verr, verrx</A> - print error messages
+<li> <A HREF=printf.html>vprintf</A> - print formatted output
+<li> <A HREF=snprintf.html>vsnprintf</A> - print formatted text to string
+<li> <A HREF=warn.html>vwarn, vwarnx</A> - print warning messages
+<li> <A HREF=warn.html>warn, warnx</A> - print warning messages
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/libc/malloc.html b/build/install/man/libc/malloc.html
new file mode 100644
index 0000000..a0c2862
--- /dev/null
+++ b/build/install/man/libc/malloc.html
@@ -0,0 +1,57 @@
+<html>
+<head>
+<title>malloc</title>
+<body bgcolor=#ffffff>
+<h2 align=center>malloc</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+malloc - allocate memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+void *<br>
+malloc(size_t <em>size</em>);
+
+<h3>Description</h3>
+
+malloc allocates <em>size</em> bytes of memory and returns a pointer
+to it. The memory is not necessarily zero-filled. (To get zero-filled
+memory, call <A HREF=bzero.html>bzero</A> or 
+<A HREF=memset.html>memset</A>, or use
+<A HREF=calloc.html>calloc</A>.) 
+<p>
+
+The pointer returned must be suitably aligned for use with any data
+type.
+<p>
+
+When asked to allocate zero bytes, malloc may either always return
+NULL, or may return distinct non-null pointers that do not point to
+any storage.
+<p>
+
+While malloc may at its option allocate more than <em>size</em> bytes
+to fill a request, code that calls malloc may not depend on such
+behavior and must not perform any accesses outside of the bounds
+defined by <em>size</em>.
+<p>
+
+It is legitimate for memory returned by malloc to not actually be
+physically mapped until it is used.
+
+<h3>Return Values</h3>
+malloc returns a pointer to the memory allocated. If memory cannot be
+obtained, NULL is returned.
+
+<h3>See Also</h3>
+<A HREF=calloc.html>calloc</A>,
+<A HREF=realloc.html>realloc</A>,
+<A HREF=free.html>free</A>
+
+</body>
+</html>
diff --git a/build/install/man/libc/memcpy.html b/build/install/man/libc/memcpy.html
new file mode 100644
index 0000000..2edb1bb
--- /dev/null
+++ b/build/install/man/libc/memcpy.html
@@ -0,0 +1,35 @@
+<html>
+<head>
+<title>memcpy</title>
+<body bgcolor=#ffffff>
+<h2 align=center>memcpy</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+memcpy - copy region of memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+void *<br>
+memcpy(void *<em>dest</em>, const void *<em>src</em>, size_t <em>len</em>);
+
+<h3>Description</h3>
+
+The block of memory beginning at <em>src</em>, of length <em>len</em>,
+is copied to <em>dest</em>. <em>dest</em> must point to a region large
+enough to hold it.
+<p>
+
+memcpy is not guaranteed to operate correctly if <em>src</em> and
+<em>dest</em> overlap. Use <A HREF=memmove.html>memmove</A> on
+overlapping regions.
+
+<h3>Return Values</h3>
+memcpy returns <em>dest</em>.
+
+</body>
+</html>
diff --git a/build/install/man/libc/memmove.html b/build/install/man/libc/memmove.html
new file mode 100644
index 0000000..1611c70
--- /dev/null
+++ b/build/install/man/libc/memmove.html
@@ -0,0 +1,34 @@
+<html>
+<head>
+<title>memmove</title>
+<body bgcolor=#ffffff>
+<h2 align=center>memmove</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+memmove - copy region of memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+void *<br>
+memmove(void *<em>dest</em>, const void *<em>src</em>, size_t <em>len</em>);
+
+<h3>Description</h3>
+
+The block of memory beginning at <em>src</em>, of length <em>len</em>,
+is copied to <em>dest</em>. <em>dest</em> must point to a region large
+enough to hold it.
+<p>
+
+Unlike <A HREF=memcpy.html>memcpy</A>, memmove is guaranteed to
+operate correctly if <em>src</em> and <em>dest</em> overlap.
+
+<h3>Return Values</h3>
+memmove returns <em>dest</em>.
+
+</body>
+</html>
diff --git a/build/install/man/libc/memset.html b/build/install/man/libc/memset.html
new file mode 100644
index 0000000..3aab74b
--- /dev/null
+++ b/build/install/man/libc/memset.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>memset</title>
+<body bgcolor=#ffffff>
+<h2 align=center>memset</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+memset - initialize region of memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+void *<br>
+memset(void *<em>buf</em>, int <em>chr</em>, size_t <em>len</em>);
+
+<h3>Description</h3>
+
+The memory region pointed to by <em>buf</em>, of length <em>len</em>,
+is initialized by setting each location of it to <em>chr</em>
+(converted to unsigned char).
+
+<h3>Return Values</h3>
+memset returns <em>buf</em>.
+
+</body>
+</html>
diff --git a/build/install/man/libc/printf.html b/build/install/man/libc/printf.html
new file mode 100644
index 0000000..1e6e431
--- /dev/null
+++ b/build/install/man/libc/printf.html
@@ -0,0 +1,93 @@
+<html>
+<head>
+<title>printf</title>
+<body bgcolor=#ffffff>
+<h2 align=center>printf</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+printf - print formatted output
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdio.h&gt;<br>
+<br>
+int<br>
+printf(const char *<em>format</em>, ...);
+
+<h3>Description</h3>
+
+printf prints formatted text to standard output. The text is generated
+from the <em>format</em> argument and subsequent arguments according
+to the following rules.
+<p>
+
+Characters in <em>format</em> that are not the percent sign (`%') are
+printed verbatim. When a percent sign is encountered, the next
+argument of the arguments following <em>format</em> is retrieved and
+printed. The type of the argument expected, as well as some simple
+formatting instructions, are derived from the characters following the
+percent sign.
+<p>
+
+The following characters designate types to print. One of these
+characters concludes the format sequence begun with a percent sign,
+and also determines the type expected as an argument.
+
+<blockquote>
+<table width=90%>
+<tr><td width=5%>%</td>	<td>A percent sign is printed; no argument 
+				is consumed.</td></tr>
+<tr><td>c</td>	<td>Character (char, passed as int)</td></tr>
+<tr><td>d</td>	<td>Signed integer printed in decimal</td></tr>
+<tr><td>o</td>	<td>Unsigned integer printed in octal</td></tr>
+<tr><td>p</td>	<td>Pointer (void *)</td></tr>
+<tr><td>s</td>	<td>String (const char *)</td></tr>
+<tr><td>u</td>	<td>Unsigned integer printed in decimal</td></tr>
+<tr><td>x</td>	<td>Unsigned integer printed in hexadecimal</td></tr>
+<tr><td>X</td>	<td>Unsigned integer printed in uppercase hex</td></tr>
+</table>
+</blockquote>
+
+The following characters are modifiers; they can be found between the
+percent sign and the type designator.
+
+<blockquote>
+<table width=90%>
+<tr><td width=5% valign=top>#</td> <td>Select an "alternate
+				format". On integer formats this
+				causes the C base prefix to be printed
+				along with the integer. On other
+				formats, this has no effect.</td></tr>
+<tr><td valign=top>l</td> <td>Assume an integer argument is long or
+				unsigned long instead of int or
+				unsigned int.</td></tr> 
+<tr><td valign=top>0-9</td> <td>Digits are treated as a decimal number,
+				which is considered to be the field
+				width. The argument is printed 
+				right-aligned in a field that many
+				characters wide.</td></tr>
+<tr><td valign=top>0</td> <td>If the field width has a leading 0, the
+				padding character for alignment is
+				made 0 (zero) instead of
+				space.</td></tr>
+<tr><td valign=top>-</td> <td>If a field width is given, use it for
+				left alignment instead of right
+				alignment.</td></tr>
+</table>
+</blockquote>
+
+<h3>Restrictions</h3>
+
+Note that this is a limited printf implementation - it has no support
+for precisions (".number" as a modifier), floating-point formats,
+field widths passed as arguments, or the rarely-used `+' and ` '
+modifiers.
+
+<h3>Return Values</h3>
+printf returns the number of characters printed.
+
+</body>
+</html>
diff --git a/build/install/man/libc/putchar.html b/build/install/man/libc/putchar.html
new file mode 100644
index 0000000..e86dca2
--- /dev/null
+++ b/build/install/man/libc/putchar.html
@@ -0,0 +1,35 @@
+<html>
+<head>
+<title>putchar</title>
+<body bgcolor=#ffffff>
+<h2 align=center>putchar</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+putchar - print character to standard output
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdio.h&gt;<br>
+<br>
+int<br>
+putchar(int <em>chr</em>);
+
+<h3>Description</h3>
+
+putchar writes its argument to standard output.
+
+<h3>Return Values</h3>
+putchar returns <em>chr</em>. On error, EOF is returned, and
+<A HREF=../syscall/errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+Any of the errors from <A HREF=../syscall/write.html>write</A> may
+occur.
+
+</body>
+</html>
diff --git a/build/install/man/libc/puts.html b/build/install/man/libc/puts.html
new file mode 100644
index 0000000..7e1575b
--- /dev/null
+++ b/build/install/man/libc/puts.html
@@ -0,0 +1,36 @@
+<html>
+<head>
+<title>puts</title>
+<body bgcolor=#ffffff>
+<h2 align=center>puts</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+puts - print string to standard output
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdio.h&gt;<br>
+<br>
+int<br>
+puts(const char *<em>string</em>);
+
+<h3>Description</h3>
+
+The string <em>string</em>, and a following newline character, is
+printed on the standard output.
+
+<h3>Return Values</h3>
+On success, puts returns a nonnegative integer. On error, -1 is
+returned, and <A HREF=../syscall/errno.html>errno</A> is set 
+according to the error encountered.
+
+<h3>Errors</h3>
+
+Any of the errors from <A HREF=../syscall/write.html>write</A> may
+occur.
+
+</body>
+</html>
diff --git a/build/install/man/libc/random.html b/build/install/man/libc/random.html
new file mode 100644
index 0000000..9de279c
--- /dev/null
+++ b/build/install/man/libc/random.html
@@ -0,0 +1,43 @@
+<html>
+<head>
+<title>random</title>
+<body bgcolor=#ffffff>
+<h2 align=center>random</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+random - pseudorandom number generation
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+long<br>
+random(void);<br>
+<br>
+void<br>
+srandom(unsigned long <em>seed</em>);<br>
+
+<h3>Description</h3>
+
+random returns a number between 0 and 0x7fffffff (RAND_MAX). This
+number is selected using a rather complex generator which is believed
+to generate randomness of an acceptable (though not cryptographic)
+quality. Unlike with some generators, all bits of the values returned
+are random.
+<p>
+
+srandom initializes the generator state based on the passed-in
+<em>seed</em>. If srandom is not called, the sequence of numbers
+returned by random is the same as if srandom had been called with a
+<em>seed</em> of 1.
+<p>
+
+The implementation of random and srandom used in OS/161 is software
+developed by the University of California, Berkeley and its
+contributors.
+
+</body>
+</html>
diff --git a/build/install/man/libc/realloc.html b/build/install/man/libc/realloc.html
new file mode 100644
index 0000000..3a3876b
--- /dev/null
+++ b/build/install/man/libc/realloc.html
@@ -0,0 +1,56 @@
+<html>
+<head>
+<title>realloc</title>
+<body bgcolor=#ffffff>
+<h2 align=center>realloc</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+realloc - resize allocated memory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+void *<br>
+realloc(void *<em>ptr</em>, size_t <em>newsize</em>);
+
+<h3>Description</h3>
+
+realloc attempts to change the size of the memory block pointed to by
+<em>ptr</em> to <em>newsize</em>, causing the block to shrink or grow
+as necessary. The size of NULL is treated as 0. Any newly allocated
+space has undefined contents; the contents of existing space not
+discarded by shrinkage are preserved.
+<p>
+
+<em>ptr</em> be NULL or have been previously returned by
+<A HREF=malloc.html>malloc</A>, <A HREF=calloc.html>calloc</A>, or
+realloc.
+<p>
+
+The alignment and other restrictions described for 
+<A HREF=malloc.html>malloc</A> apply equally to realloc.
+<p>
+
+<h3>Return Values</h3>
+realloc returns a pointer to the resized memory block. This may not be
+the same pointer as <em>ptr</em> if for internal reasons it is
+necessary to move the memory block. If such a move takes place, the
+old block is invalidated and <em>ptr</em> becomes invalid.
+<p>
+
+If the resize operation cannot be performed, NULL is returned, in
+which case the original block pointed to by <em>ptr</em> is untouched
+and remains valid.
+<p>
+
+<h3>See Also</h3>
+<A HREF=calloc.html>calloc</A>,
+<A HREF=malloc.html>malloc</A>,
+<A HREF=free.html>free</A>
+
+</body>
+</html>
diff --git a/build/install/man/libc/setjmp.html b/build/install/man/libc/setjmp.html
new file mode 100644
index 0000000..771c8e4
--- /dev/null
+++ b/build/install/man/libc/setjmp.html
@@ -0,0 +1,45 @@
+<html>
+<head>
+<title>setjmp</title>
+<body bgcolor=#ffffff>
+<h2 align=center>setjmp</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+setjmp, longjmp - non-local jump operations
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;setjmp.h&gt;<br>
+<br>
+int<br>
+setjmp(jmp_buf <em>jb</em>);<br>
+<br>
+void<br>
+longjmp(jmp_buf <em>jb</em>, int <em>returncode</em>);<br>
+
+<h3>Description</h3>
+
+setjmp saves the current stack frame and processor state in
+<em>jb</em>. A subsequent call to longjmp with the same <em>jb</em>
+causes execution to jump to where setjmp was called from.
+<p>
+
+If the stack frame that called setjmp returns before longjmp is
+called, the results are undefined.
+<p>
+
+<h3>Return Values</h3>
+
+When called, setjmp returns 0. When longjmp is called, it does not
+itself return, but instead causes setjmp to appear to return again,
+this time returning <em>returncode</em>.
+<p>
+
+If zero is passed <em>returncode</em>, it is forced to 1 instead.
+<p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/snprintf.html b/build/install/man/libc/snprintf.html
new file mode 100644
index 0000000..6ff9c27
--- /dev/null
+++ b/build/install/man/libc/snprintf.html
@@ -0,0 +1,44 @@
+<html>
+<head>
+<title>snprintf</title>
+<body bgcolor=#ffffff>
+<h2 align=center>snprintf</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+snprintf - print formatted text to string
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+snprintf(char *<em>buf</em>, size_t <em>buflen</em>, 
+const char *<em>format</em>, ...);<br>
+<br>
+int<br>
+vsnprintf(char *<em>buf</em>, size_t <em>buflen</em>, 
+const char *<em>format</em>, va_list);<br>
+
+<h3>Description</h3>
+
+snprintf performs <A HREF=printf.html>printf</A>-style formatting on
+the string <em>format</em> and subsequent arguments. The resulting
+string is placed in <em>buf</em>, which is a memory area at least
+<em>buflen</em> bytes long. A null terminator is always added to
+<em>buf</em>; the space for this is presumed to be counted in
+<em>buflen</em>.
+<p>
+
+vsnprintf is the same as snprintf, except that the subsequent
+arguments are presumed to have already been collected using the
+<A HREF=stdarg.html>stdarg</A> facility.
+<p>
+
+<h3>Return Values</h3>
+snprintf and vsnprintf return the number of characters printed.
+
+</body>
+</html>
diff --git a/build/install/man/libc/stdarg.html b/build/install/man/libc/stdarg.html
new file mode 100644
index 0000000..9c42d41
--- /dev/null
+++ b/build/install/man/libc/stdarg.html
@@ -0,0 +1,79 @@
+<html>
+<head>
+<title>stdarg</title>
+<body bgcolor=#ffffff>
+<h2 align=center>stdarg</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+stdarg - handle functions with variable arguments
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdarg.h&gt;<br>
+<br>
+va_start(va_list <em>ap</em>, <em>start-argument</em>);<br>
+<br>
+va_end(va_list <em>ap</em>);<br>
+<br>
+<em>type</em><br>
+va_arg(va_list <em>ap</em>, <em>type</em>);<br>
+<br>
+va_copy(va_list <em>dest</em>, va_list <em>src</em>);<br>
+
+<h3>Description</h3>
+
+Functions where the number of arguments is not fixed at compile time
+can be written using the stdarg facility. This provides a type,
+va_list, and the macros listed above, which allow iterating through
+the arguments.
+<p>
+
+va_start initializes a va_list <em>ap</em> to point to the current
+function's arguments. The <em>start-argument</em> argument should be
+the name of the last fixed parameter in the calling sequence.
+<p>
+
+va_end cleans up a va_list once it is no longer needed. While failure
+to use va_end may have no effect on some architectures (in fact, in
+some cases va_end does nothing at all) on other architectures it may
+be fatal.
+<p>
+
+va_arg retrieves the next argument, which is presumed to be of type
+<em>type</em>. The function must have some way to determine what types
+to expect, and how many arguments, as this information cannot be
+extracted from the argument list itself. To rewind, use va_end and
+then va_start again. 
+<p>
+
+Remember that default C argument promotions occur when passing the
+variable arguments. There is no run-time checking of any kind, and
+little to no compile-time checking: if you retrieve a type different
+from that which was passed using va_arg, you will silently get garbage
+for that and all subsequent arguments.
+<p>
+
+va_copy assigns a copy of <em>src</em> to <em>dest</em>. Subsequent
+operations on either will not affect the other.
+<p>
+
+<h3>Restrictions</h3>
+
+Because the va_list is not necessarily a simple type, but may involve
+pointers to state maintained elsewhere, it is not necessarily a simple
+value. Thus, assigning va_lists to each other with `=', memcpy, or the
+like, or passing them to functions, may not give multiple independent
+objects. When in doubt, use va_copy, or invoke va_start multiple
+times.
+<p>
+
+<h3>Return Values</h3>
+
+va_start, va_end, and va_copy do not return anything. va_arg returns
+the value of the requested argument.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strcat.html b/build/install/man/libc/strcat.html
new file mode 100644
index 0000000..6b5baf6
--- /dev/null
+++ b/build/install/man/libc/strcat.html
@@ -0,0 +1,38 @@
+<html>
+<head>
+<title>strcat</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strcat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strcat - concatenate strings
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+char *<br>
+strcat(char *<em>dest</em>, const char *<em>src</em>);
+
+<h3>Description</h3>
+
+strcat appends the contents of the string <em>src</em> to the string
+<em>dest</em>. 
+
+<h3>Restrictions</h3>
+
+If <em>dest</em> does not point to enough space to hold both strings,
+the resulting behavior is undefined.
+<p>
+
+If the memory areas pointed to by <em>dest</em> and <em>src</em>
+overlap, the behavior is undefined.
+
+<h3>Return Values</h3>
+strcat returns <em>dest</em>.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strchr.html b/build/install/man/libc/strchr.html
new file mode 100644
index 0000000..055eace
--- /dev/null
+++ b/build/install/man/libc/strchr.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>strchr</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strchr</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strchr - search string for character
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+char *<br>
+strchr(const char *<em>string</em>, int <em>chr</em>);
+
+<h3>Description</h3>
+
+strchr searches <em>string</em> from the left for the first instance
+of the character <em>chr</em>.
+
+<h3>Return Values</h3>
+strchr returns a pointer to the character found. If the character is
+not found, NULL is returned.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strcmp.html b/build/install/man/libc/strcmp.html
new file mode 100644
index 0000000..5ad9ab8
--- /dev/null
+++ b/build/install/man/libc/strcmp.html
@@ -0,0 +1,37 @@
+<html>
+<head>
+<title>strcmp</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strcmp</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strcmp - compare strings
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+int<br>
+strcmp(const char *<em>str1</em>, const char *<em>str2</em>);
+
+<h3>Description</h3>
+
+The two strings <em>str1</em> and <em>str2</em> are compared
+lexicographically.
+
+<h3>Return Values</h3>
+
+If <em>str1</em> sorts before <em>str2</em>, -1 is returned.
+<p>
+
+If <em>str1</em> sorts after <em>str2</em>, 1 is returned.
+<p>
+
+If <em>str1</em> is the same as <em>str2</em>, 0 is returned.
+<p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strcpy.html b/build/install/man/libc/strcpy.html
new file mode 100644
index 0000000..ebbf224
--- /dev/null
+++ b/build/install/man/libc/strcpy.html
@@ -0,0 +1,38 @@
+<html>
+<head>
+<title>strcpy</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strcpy</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strcpy - copy string
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+char *<br>
+strcpy(char *<em>dest</em>, const char *<em>src</em>);
+
+<h3>Description</h3>
+
+The contents of the string <em>src</em> are copied into
+<em>dest</em>.
+
+<h3>Restrictions</h3>
+
+If <em>dest</em> does not point to enough space to hold the string,
+the resulting behavior is undefined.
+<p>
+
+If the memory areas pointed to by <em>dest</em> and <em>src</em>
+overlap, the behavior is undefined.
+
+<h3>Return Values</h3>
+strcpy returns <em>dest</em>.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strerror.html b/build/install/man/libc/strerror.html
new file mode 100644
index 0000000..7bb4afc
--- /dev/null
+++ b/build/install/man/libc/strerror.html
@@ -0,0 +1,36 @@
+<html>
+<head>
+<title>strerror</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strerror</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strerror - get error message for error code
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+const char *<br>
+strerror(int <em>code</em>);
+
+<h3>Description</h3>
+
+The error string for the error specified by <em>code</em> (see
+<A HREF=../syscall/errno.html>errno</A> for more information) is
+retrieved.
+<p>
+
+It is not itself an error to request error strings for out-of-range
+values of <em>code</em>, but the string returned under such
+circumstances may not be very enlightening when printed.
+
+<h3>Return Values</h3>
+
+The error string is returned.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strlen.html b/build/install/man/libc/strlen.html
new file mode 100644
index 0000000..98de59f
--- /dev/null
+++ b/build/install/man/libc/strlen.html
@@ -0,0 +1,26 @@
+<html>
+<head>
+<title>strlen</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strlen</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strlen - determine length of string
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+size_t<br>
+strlen(const char *<em>string</em>);
+
+<h3>Description</h3>
+
+strlen returns the length of the string <em>string</em>. The length
+does not include the null terminator.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strrchr.html b/build/install/man/libc/strrchr.html
new file mode 100644
index 0000000..5e178c1
--- /dev/null
+++ b/build/install/man/libc/strrchr.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>strrchr</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strrchr</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strrchr - search string for character
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+char *<br>
+strrchr(const char *<em>string</em>, int <em>chr</em>);
+
+<h3>Description</h3>
+
+strrchr searches <em>string</em> from the right for the first instance
+of the character <em>chr</em>. 
+
+<h3>Return Values</h3>
+strrchr returns a pointer to the character found. If the character is
+not found, NULL is returned.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strtok.html b/build/install/man/libc/strtok.html
new file mode 100644
index 0000000..d27deeb
--- /dev/null
+++ b/build/install/man/libc/strtok.html
@@ -0,0 +1,57 @@
+<html>
+<head>
+<title>strtok</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strtok</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strtok - tokenize string
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+char *<br>
+strtok(char *<em>string</em>, const char *<em>separators</em>);
+
+<h3>Description</h3>
+
+strtok splits up the string <em>string</em> into fields using the
+characters found in <em>separators</em> as delimiters. The delimiters
+found are discarded. Multiple delimiter characters in a row are
+treated as a single delimiter.
+<p>
+
+When first called, strtok returns the first field of <em>string</em>.
+To retrieve successive fields of <em>string</em>, call strtok again
+repeatedly, passing NULL as the first argument. When no more fields
+are left, NULL is returned. If the string is empty or contains only
+delimiters, NULL will be returned on the first call.
+<p>
+
+<h3>Cautions</h3>
+
+Note that the state used to remember <em>string</em> across calls is
+global. Thus, strtok cannot be used from more than one thread at a
+time in a multithreaded program, nor can it be used in a subroutine
+called from within a loop that itself uses strtok. If these
+restrictions are problematic, use <A HREF=strtok_r.html>strtok_r</A>.
+<p>
+
+The behavior if strtok is called again without passing a new
+<em>string</em> after it has returned NULL is undefined.
+<p>
+
+The behavior if strtok is called with the first argument NULL without
+having first passed a valid <em>string</em> is also undefined.
+<p>
+
+<h3>Return Values</h3>
+strtok returns successive components of the passed-in string, and
+NULL when no more remain.
+
+</body>
+</html>
diff --git a/build/install/man/libc/strtok_r.html b/build/install/man/libc/strtok_r.html
new file mode 100644
index 0000000..404bce8
--- /dev/null
+++ b/build/install/man/libc/strtok_r.html
@@ -0,0 +1,39 @@
+<html>
+<head>
+<title>strtok_r</title>
+<body bgcolor=#ffffff>
+<h2 align=center>strtok_r</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+strtok_r - tokenize string reentrantly
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;string.h&gt;<br>
+<br>
+char *<br>
+strtok_r(char *<em>string</em>, const char *<em>separators</em>,
+char **<em>context</em>);
+
+<h3>Description</h3>
+
+strtok_r is a reentrant version of <A HREF=strtok.html>strtok</A>. It
+behaves the same way, except that the internal state is kept using the
+<em>context</em> parameter rather than being global.
+<p>
+
+The value passed to the <em>context</em> parameter should be the
+address of a char * whose value is preserved between successive
+related calls to strtok_r. The char * need not be initialized
+before the first call, and its value should not be inspected.
+<p>
+
+<h3>Return Values</h3>
+strtok_r returns successive components of the passed-in string, and
+NULL when no more remain.
+
+</body>
+</html>
diff --git a/build/install/man/libc/system.html b/build/install/man/libc/system.html
new file mode 100644
index 0000000..8d8df77
--- /dev/null
+++ b/build/install/man/libc/system.html
@@ -0,0 +1,49 @@
+<html>
+<head>
+<title>system</title>
+<body bgcolor=#ffffff>
+<h2 align=center>system</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+system - run command as subprocess
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;stdlib.h&gt;<br>
+<br>
+int<br>
+system(const char *<em>command</em>);
+
+<h3>Description</h3>
+
+The system routine executes <em>command</em> as if it were typed into
+the shell.
+
+<h3>Return Values</h3>
+On success, system returns the exit status returned from 
+<A HREF=../syscall/waitpid.html>waitpid</A>. 
+On error, -1 is returned, and <A HREF=../syscall/errno.html>errno</A> 
+is set according to the error encountered.
+
+<h3>Errors</h3>
+
+Any of the errors from <A HREF=../syscall/fork.html>fork</A> or
+<A HREF=../syscall/waitpid.html>waitpid</A>. Errors generated during
+<A HREF=../syscall/execv.html>execv</A> cannot readily be reported
+back in detail.
+
+<h3>Restrictions</h3>
+
+In OS/161 there may be no shell and when there is the shell's behavior
+and syntax is not specified. For this reason we make no assumptions
+about the shell's operation, and assume system() cannot reliably use
+the shell to parse and execute <em>command</em>. system() does this
+itself, in a way which may not necessarily be compatible with the
+shell as it finally appears. You may want to change system() to invoke
+the shell in a suitable fashion when/if a shell is available.
+
+</body>
+</html>
diff --git a/build/install/man/libc/time.html b/build/install/man/libc/time.html
new file mode 100644
index 0000000..a83018b
--- /dev/null
+++ b/build/install/man/libc/time.html
@@ -0,0 +1,47 @@
+<html>
+<head>
+<title>time</title>
+<body bgcolor=#ffffff>
+<h2 align=center>time</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+time - get time of day
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;time.h&gt;<br>
+<br>
+time_t<br>
+time(time_t *<em>ptr</em>);
+
+<h3>Description</h3>
+
+The current time (in seconds since midnight GMT on January 1, 1970) is
+retrieved. If <em>ptr</em> is non-null, the time is stored through
+<em>ptr</em>. The time is also returned.
+<p>
+
+time is a wrapper around the system call
+<A HREF=../syscall/__time.html>__time</A>, which returns nanoseconds
+as well as seconds.
+
+<h3>Return Values</h3>
+
+time returns the time. On error, -1 is returned, and errno is set to
+indicate the error.
+
+<h3>Errors</h3>
+
+The following error is the only way time should be capable of failing.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EFAULT</td>	<td><em>ptr</em> was an invalid non-NULL
+			address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/libc/warn.html b/build/install/man/libc/warn.html
new file mode 100644
index 0000000..a2544d8
--- /dev/null
+++ b/build/install/man/libc/warn.html
@@ -0,0 +1,58 @@
+<html>
+<head>
+<title>warn</title>
+<body bgcolor=#ffffff>
+<h2 align=center>warn</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+warn, warnx, vwarn, vwarnx - print warning messages
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;err.h&gt;<br>
+<br>
+void<br>
+warn(const char *<em>format</em>, ...);<br>
+<br>
+void<br>
+warnx(const char *<em>format</em>, ...);<br>
+<br>
+void<br>
+vwarn(const char *<em>format</em>, va_list);<br>
+<br>
+void<br>
+vwarnx(const char *<em>format</em>, va_list);<br>
+
+<h3>Description</h3>
+
+The warn, warnx, vwarn, and vwarnx functions print warning messages to
+the standard error stream.
+<p>
+
+warnx prints the name of the program, a colon, the text generated by
+passing <em>format</em> and subsequent args through
+<A HREF=printf.html>printf</A>, and a newline.
+<p>
+
+warn prints the same thing, except that a colon and the error string
+for the current error (obtained by calling 
+<A HREF=strerror.html>strerror</A> on 
+<A HREF=../syscall/errno.html>errno</A>) are printed prior to the
+newline.
+<p>
+
+vwarnx and vwarn are the same as warnx and warn respectively, except
+that the additional arguments for printf are taken to have been
+already packaged up in a va_list by use of the
+<A HREF=stdarg.html>stdarg</A> facility.
+<p>
+
+<h3>See Also</h3>
+
+<A HREF=err.html>err</A>
+
+</body>
+</html>
diff --git a/build/install/man/misc/index.html b/build/install/man/misc/index.html
new file mode 100644
index 0000000..926a67a
--- /dev/null
+++ b/build/install/man/misc/index.html
@@ -0,0 +1,23 @@
+<html>
+<head>
+<title>OS/161 Miscellaneous Docs</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Miscellaneous Docs</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A>
+</p>
+<br>
+
+<em>For now, there is nothing in this category.</em>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/dumpsfs.html b/build/install/man/sbin/dumpsfs.html
new file mode 100644
index 0000000..995060a
--- /dev/null
+++ b/build/install/man/sbin/dumpsfs.html
@@ -0,0 +1,44 @@
+<html>
+<head>
+<title>dumpsfs</title>
+<body bgcolor=#ffffff>
+<h2 align=center>dumpsfs</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+dumpsfs - dump information about an SFS filesystem
+
+<h3>Synopsis</h3>
+/sbin/dumpsfs <em>raw-device</em>
+<br>
+host-dumpsfs <em>disk-image-file</em>
+
+<h3>Description</h3>
+
+dumpsfs dumps out selected information regarding the contents and
+structure of the SFS filesystem on the device it is passed.
+<p>
+
+Like <A HREF=mksfs.html>mksfs</A>, it is also compiled for the
+System/161 host OS, and in that form can access System/161's disk
+image files.
+
+<h3>Requirements</h3>
+
+dumpsfs uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/fstat.html>fstat</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+dumpsfs should function properly once the file system assignment is
+complete. You may wish to extend it in the course of doing that
+assignment.
+
+</body>
+</html>
diff --git a/build/install/man/sbin/halt.html b/build/install/man/sbin/halt.html
new file mode 100644
index 0000000..493226d
--- /dev/null
+++ b/build/install/man/sbin/halt.html
@@ -0,0 +1,41 @@
+<html>
+<head>
+<title>halt</title>
+<body bgcolor=#ffffff>
+<h2 align=center>halt</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+halt - halt system
+
+<h3>Synopsis</h3>
+/sbin/halt
+
+<h3>Description</h3>
+
+halt shuts the system down. A clean shutdown is performed, flushing
+buffers to disk, unmounting filesystems, and so forth.
+<p>
+
+Once shutdown is complete, halt stops execution of the operating
+system. What this entails depends on the platform. On platforms with a
+hardware boot monitor, it normally returns to the boot monitor. On
+software-based platforms, such as System/161, it normally terminates
+the software simulation. On other platforms the system will generally
+wait for a keystroke on the console and then reboot.
+<p>
+
+<h3>Requirements</h3>
+
+halt uses the <A HREF=../syscall/reboot.html>reboot</A> system call.
+<p>
+
+halt will function properly even before you do any work on OS/161.
+
+<h3>See Also</h3>
+
+<A HREF=../bin/sync.html>/bin/sync</A><br>
+<A HREF=reboot.html>reboot</A>, <A HREF=poweroff.html>poweroff</A>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/index.html b/build/install/man/sbin/index.html
new file mode 100644
index 0000000..6108621
--- /dev/null
+++ b/build/install/man/sbin/index.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>OS/161 Sysadmin binaries</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Sysadmin binaries (/sbin)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=dumpsfs.html>dumpsfs</A> - dump information about an 
+   SFS filesystem
+<li> <A HREF=halt.html>halt</A> - halt system
+<li> <A HREF=mksfs.html>mksfs</A> - create an SFS filesystem
+<li> <A HREF=poweroff.html>poweroff</A> - halt system and power it off
+<li> <A HREF=reboot.html>reboot</A> - reboot system
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/mksfs.html b/build/install/man/sbin/mksfs.html
new file mode 100644
index 0000000..3679b1e
--- /dev/null
+++ b/build/install/man/sbin/mksfs.html
@@ -0,0 +1,58 @@
+<html>
+<head>
+<title>mksfs</title>
+<body bgcolor=#ffffff>
+<h2 align=center>mksfs</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+mksfs - create an SFS filesystem
+
+<h3>Synopsis</h3>
+/sbin/mksfs <em>raw-device</em> <em>volname</em>
+<br>
+host-mksfs <em>disk-image-file</em> <em>volname</em>
+
+<h3>Description</h3>
+
+mksfs creates a new SFS filesystem on the specified device or disk
+image. The volume name is set to <em>volname</em>.
+<p>
+
+If mksfs is used under OS/161, the first form should be used, where
+<em>raw-device</em> is a raw device name (such as "lhd1raw:"). Don't
+use a device that's already mounted (or being used for swap).
+<p>
+
+mksfs can also be used on the System/161 host OS, in which case the
+second form should be used. The host-compiled version of mksfs knows
+how to deal with the header on System/161 disk images and does the
+right thing.
+<p>
+
+Note that as of this writing host-mksfs cannot create disk image
+files. This is a bug and will hopefully be addressed eventually.
+
+<h3>Requirements</h3>
+
+mksfs uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/fstat.html>fstat</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+mksfs should function properly once the file system assignment is
+complete. You will likely need to make some changes to it in the
+course of doing that assignment.
+
+<h3>See Also</h3>
+
+<A HREF=dumpsfs.html>dumpsfs</A>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/poweroff.html b/build/install/man/sbin/poweroff.html
new file mode 100644
index 0000000..877a207
--- /dev/null
+++ b/build/install/man/sbin/poweroff.html
@@ -0,0 +1,33 @@
+<html>
+<head>
+<title>poweroff</title>
+<body bgcolor=#ffffff>
+<h2 align=center>poweroff</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+poweroff - halt system and power it off
+
+<h3>Synopsis</h3>
+/sbin/poweroff
+
+<h3>Description</h3>
+
+poweroff shuts down the system and then turns the system power off. 
+On platforms where soft power-off is not supported, poweroff functions
+the same way as <A HREF=halt.html>halt</A>.
+
+<h3>Requirements</h3>
+
+poweroff uses the <A HREF=../syscall/reboot.html>reboot</A> system call.
+<p>
+
+poweroff will function properly even before you do any work on OS/161.
+
+<h3>See Also</h3>
+
+<A HREF=../bin/sync.html>/bin/sync</A><br>
+<A HREF=halt.html>halt</A>, <A HREF=reboot.html>reboot</A>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/reboot.html b/build/install/man/sbin/reboot.html
new file mode 100644
index 0000000..e29dd7d
--- /dev/null
+++ b/build/install/man/sbin/reboot.html
@@ -0,0 +1,33 @@
+<html>
+<head>
+<title>reboot</title>
+<body bgcolor=#ffffff>
+<h2 align=center>reboot</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+reboot - reboot system
+
+<h3>Synopsis</h3>
+/sbin/reboot
+
+<h3>Description</h3>
+
+reboot shuts the system down and then attempts to restart it. On
+platforms where reboot is not possible, it behaves the same way 
+as <A HREF=halt.html>halt</A>.
+
+<h3>Requirements</h3>
+
+reboot uses the <A HREF=../syscall/reboot.html>reboot</A> system call.
+<p>
+
+reboot will function properly even before you do any work on OS/161.
+
+<h3>See Also</h3>
+
+<A HREF=../bin/sync.html>/bin/sync</A><br>
+<A HREF=halt.html>halt</A>, <A HREF=poweroff.html>poweroff</A>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/__getcwd.html b/build/install/man/syscall/__getcwd.html
new file mode 100644
index 0000000..fe9307f
--- /dev/null
+++ b/build/install/man/syscall/__getcwd.html
@@ -0,0 +1,54 @@
+<html>
+<head>
+<title>__getcwd</title>
+<body bgcolor=#ffffff>
+<h2 align=center>__getcwd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+__getcwd - get name of current working directory (backend)
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+__getcwd(char *<em>buf</em>, size_t <em>buflen</em>);
+
+<h3>Description</h3>
+
+The name of the current directory is computed and stored in
+<em>buf</em>, an area of size <em>buflen</em>. The length of data
+actually stored, which must be non-negative, is returned.
+<p>
+
+Note: this call behaves like <A HREF=read.html>read</A> - the name
+stored in <em>buf</em> is not 0-terminated.
+<p>
+
+This function is not meant to be called except by the C library;
+application programmers should use <A HREF=../libc/getcwd.html>getcwd</A>
+instead.
+
+<h3>Return Values</h3>
+On success, __getcwd returns the length of the data returned. 
+On error, -1 is returned, and <A HREF=errno.html>errno</A>
+is set according to the error encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENOENT</td>	<td>A component of the pathname no longer exists.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>buf</em> points to an invalid address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/__time.html b/build/install/man/syscall/__time.html
new file mode 100644
index 0000000..c8c3191
--- /dev/null
+++ b/build/install/man/syscall/__time.html
@@ -0,0 +1,49 @@
+<html>
+<head>
+<title>__time</title>
+<body bgcolor=#ffffff>
+<h2 align=center>__time</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+__time - get time of day
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;time.h&gt;<br>
+<br>
+time_t<br>
+__time(time_t *<em>seconds</em>, uint32_t *nanoseconds);
+
+<h3>Description</h3>
+
+The current time (in seconds and nanoseconds since midnight GMT on
+January 1, 1970) is retrieved. If <em>seconds</em> and/or
+<em>nanoseconds</em> are non-null, the corresponding components of the
+time are stored through those pointers. The time in seconds is also
+returned. 
+<p>
+
+<h3>Return Values</h3>
+
+__time returns 0 on success. On error, -1 is returned, and
+errno is set to indicate the error.
+
+<h3>Errors</h3>
+
+The following error is the only way __time should be capable of failing.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EFAULT</td>	<td><em>seconds</em> or <em>nanoseconds</em>
+			was an invalid non-NULL address.</td></tr>
+</table></blockquote>
+
+<h3>See Also</h3>
+
+<A HREF=../libc/time.html>time</A><br>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/_exit.html b/build/install/man/syscall/_exit.html
new file mode 100644
index 0000000..0b000ba
--- /dev/null
+++ b/build/install/man/syscall/_exit.html
@@ -0,0 +1,33 @@
+<html>
+<head>
+<title>_exit</title>
+<body bgcolor=#ffffff>
+<h2 align=center>_exit</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+_exit - terminate process
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+void<br>
+_exit(int <em>exitcode</em>);
+
+<h3>Description</h3>
+
+Cause the current process to exit. The exit code <em>exitcode</em> is
+reported back to other process(es) via the 
+<A HREF=waitpid.html>waitpid()</A> call. The process id of the exiting
+process should not be reused until all processes interested in
+collecting the exit code with waitpid have done so. (What "interested"
+means is intentionally left vague; you should design this.)
+
+<h3>Return Values</h3>
+_exit does not return.
+
+</body>
+</html>
diff --git a/build/install/man/syscall/chdir.html b/build/install/man/syscall/chdir.html
new file mode 100644
index 0000000..737a66f
--- /dev/null
+++ b/build/install/man/syscall/chdir.html
@@ -0,0 +1,51 @@
+<html>
+<head>
+<title>chdir</title>
+<body bgcolor=#ffffff>
+<h2 align=center>chdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+chdir - change current directory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+chdir(const char *<em>pathname</em>);
+
+<h3>Description</h3>
+
+The current directory of the current process is set to the directory
+named by <em>pathname</em>.
+<p>
+
+<h3>Return Values</h3>
+On success, chdir returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<tr><td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of <em>pathname</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td>ENOTDIR</td>	<td><em>pathname</em> did not refer to a
+				directory.</td> 
+<tr><td>ENOENT</td>	<td><em>pathname</em> did not exist.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>	<td><em>pathname</em> was an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/close.html b/build/install/man/syscall/close.html
new file mode 100644
index 0000000..7efc417
--- /dev/null
+++ b/build/install/man/syscall/close.html
@@ -0,0 +1,50 @@
+<html>
+<head>
+<title>close</title>
+<body bgcolor=#ffffff>
+<h2 align=center>close</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+close - close file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+close(int <em>fd</em>);
+
+<h3>Description</h3>
+
+The file handle <em>fd</em> is closed. The same file handle may then
+be returned again from <A HREF=open.html>open</A>,
+<A HREF=dup2.html>dup2</A>, <A HREF=pipe.html>pipe</A>, or similar
+calls.
+<p>
+
+Other file handles are not affected in any way, even if they are
+attached to the same file.
+<p>
+
+<h3>Return Values</h3>
+On success, close returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<tr><td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>	<td><em>fd</em> is not a valid file handle.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/dup2.html b/build/install/man/syscall/dup2.html
new file mode 100644
index 0000000..ac3130d
--- /dev/null
+++ b/build/install/man/syscall/dup2.html
@@ -0,0 +1,68 @@
+<html>
+<head>
+<title>dup2</title>
+<body bgcolor=#ffffff>
+<h2 align=center>dup2</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+dup2 - clone file handles
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+dup2(int <em>oldfd</em>, int <em>newfd</em>);
+
+<h3>Description</h3>
+
+dup2 clones the file handle <em>oldfd</em> onto the file handle
+<em>newfd</em>. If <em>newfd</em> names an open file, that file is
+closed.
+<p>
+
+The two handles refer to the same "open" of the file - that is,
+they are references to the same object and share the same seek
+pointer. Note that this is different from opening the same file
+twice. 
+<p>
+
+dup2 is most commonly used to relocate opened files onto
+STDIN_FILENO, STDOUT_FILENO, and/or STDERR_FILENO.
+<p>
+
+Both filehandles must be non-negative.
+<p>
+
+Using dup2 to clone a file handle onto itself has no effect.
+<p>
+
+(The "2" in "dup2" arises from the existence of an older and less
+powerful Unix system call "dup".)
+
+<h3>Return Values</h3>
+dup2 returns <em>newfd</em>. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<tr><td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>		<td><em>oldfd</em> is not a valid file handle,
+				or <em>newfd</em> is a value that
+				cannot be a valid file handle.</td></tr>
+<tr><td>EMFILE</td>		<td>The process's file table was full, or a
+				process-specific limit on open files
+				was reached.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/errno.html b/build/install/man/syscall/errno.html
new file mode 100644
index 0000000..9b3040f
--- /dev/null
+++ b/build/install/man/syscall/errno.html
@@ -0,0 +1,339 @@
+<html>
+<head>
+<title>errno</title>
+<body bgcolor=#ffffff>
+<h2 align=center>errno</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+errno - error code reporting
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;errno.h&gt;<br>
+<br>
+extern int errno;
+
+<h3>Description</h3>
+
+When system calls, and sometimes other functions, fail, a code
+representing or describing the error condition is placed in the global
+variable errno.
+<p>
+
+errno is always left unchanged by successful operations.
+<p>
+
+errno may be a macro. In a multithreaded process it is almost
+invariably a macro. However, it is always an lvalue, that is, it may
+be assigned to.
+<p>
+
+Each numeric code has a symbolic name and a textual expansion. The
+symbolic names are used in source code; the textual expansions are
+printed out when errors are reported to a user.
+<p>
+
+The textual expansions can be retrieved with 
+<A HREF=../libc/strerror.html>strerror</A> or printed with 
+<A HREF=../libc/err.html>err</A> or <A HREF=../libc/warn.html>warn</A>. 
+<p>
+
+<h3>Symbolic names</h3>
+
+The following symbolic errors are defined in the OS/161 base system.
+You may add more at your pleasure; but be sure to read the notes in 
+the file kern/errno.h that defines them.
+
+<blockquote>
+<table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+
+<tr><td valign=top>ENOSYS</td>
+<td>No such system call: the call made was not defined, or perhaps not
+	yet implemented.</td></tr>
+
+<tr><td valign=top>EUNIMP</td>
+<td>Unimplemented feature: functionality not yet implemented would
+	have been needed to perform the requested operation. This
+	error code is not found in production systems.</td></tr>
+
+<tr><td valign=top>ENOMEM</td>
+<td>Out of memory: a memory allocation failed. This normally means
+	that a process has used up all the memory available to it
+	(either because of limits or because it has used up all the
+	memory available to the system.) It may also mean that memory
+	allocation within the kernel has failed.</td></tr>
+
+<tr><td valign=top>EAGAIN</td>
+<td>Operation would block: some resource is temporarily unavailable,
+	or a non-blocking I/O operation (if such things exist) could
+	not be completed without waiting. Historically, the message
+	was "Try again later"; in 4.4BSD EAGAIN and the old
+	EWOULDBLOCK code were folded together.</td></tr>
+
+<tr><td valign=top>EINTR</td>
+<td>Interrupted system call: handling of a system call was interrupted
+	by the delivery of a signal. (If you have signals.)</td></tr>
+
+<tr><td valign=top>EFAULT</td>
+<td>Bad memory reference: a pointer passed as an argument was not
+	valid.</td></tr>
+
+<tr><td valign=top>ENAMETOOLONG</td>
+<td>String too long: a string passed as an argument was too long to
+	process.</td></tr>
+
+<tr><td valign=top>EINVAL</td>
+<td>Invalid argument: an argument passed to a command or system call
+	was badly formed, invalid, or nonsensical, in a way for which
+	some more specific error code is not available.</td></tr>
+
+<tr><td valign=top>EPERM</td>
+<td>Operation not permitted: the requested operation is restricted to
+	privileged users.</td></tr>
+
+<tr><td valign=top>EACCES</td>
+<td>Permission denied: the current process's credentials do not allow
+	the desired form of access to the target object according to
+	its permission settings.</td></tr>
+
+<tr><td valign=top>EMPROC</td>
+<td>Too many processes: the current user ID has reached its limit of
+	simultaneous running processes. In Unix, tihs is
+	EPROCLIM.</td></tr>
+
+<tr><td valign=top>ENPROC</td>
+<td>Too many processes on system: the system process table is full.
+	(Void where impossible or prohibited by law.)</td></tr>
+
+<tr><td valign=top>ENOEXEC</td>
+<td>File is not executable: an <A HREF=../syscall/execv.html>execv</A>
+	operation was attempted but the kernel was unable to run the
+	requested program.</td></tr>
+
+<tr><td valign=top>E2BIG</td>
+<td>Argument list too long: the space taken up by the argv[] strings
+	passed to a newly started program is larger than the system
+	allows.</td></tr>
+
+<tr><td valign=top>ESRCH</td>
+<td>No such process: the supplied process ID does not name any of the
+	currently running processes.</td></tr>
+
+<tr><td valign=top>ECHILD</td>
+<td>No child processes: the current process has no exited child
+	processes whose exit status has not yet been collected with
+	<A HREF=../syscall/waitpid.html>waitpid</A>.</td></tr>
+
+<tr><td valign=top>ENOTDIR</td>
+<td>Not a directory: a directory was expected and a non-directory
+	filesystem object was found.</td></tr>
+
+<tr><td valign=top>EISDIR</td>
+<td>Is a directory: a non-directory was expected and a directory was
+	found.</td></tr>
+
+<tr><td valign=top>ENOENT</td>
+<td>No such file or directory: the requested filesystem object
+	does/did not exist.</td></tr>
+
+<tr><td valign=top>ELOOP</td>
+<td>Too many levels of symbolic links: pathname lookup crossed more
+	than the maximum allowed number of symbolic links. Usually
+	means a link points to itself, or a family of links has been
+	arranged into a loop. (If you have symbolic links.)</td></tr>
+
+<tr><td valign=top>ENOTEMPTY</td>
+<td>Directory not empty: a directory must be empty of everything
+	(except . and ..) before it may be removed.</td></tr>
+
+<tr><td valign=top>EEXIST</td>
+<td>File exists: a filesystem object that was expected not to exist
+	did in fact already exist.</td></tr>
+
+<tr><td valign=top>EMLINK</td>
+<td>Too many hard links: the maximum number of hard links to the
+	target file already exist.</td></tr>
+
+<tr><td valign=top>EXDEV</td>
+<td>Cross-device link: an attempt was made to instruct one filesystem
+	to handle files on another filesystem.</td></tr>
+
+<tr><td valign=top>ENODEV</td>
+<td>No such device: the requested device does not exist.</td></tr>
+
+<tr><td valign=top>ENXIO</td>
+<td>Device not available: the requested device exists but is not
+	available (is not mounted, is powered off, etc.)</td></tr>
+
+<tr><td valign=top>EBUSY</td>
+<td>Device busy: the requested object cannot be used (or, perhaps,
+	released) because something else is using it.</td></tr>
+
+<tr><td valign=top>EMFILE</td>
+<td>Too many open files: the process file table is full, so the
+	process cannot open more files.</td></tr>
+
+<tr><td valign=top>ENFILE</td>
+<td>Too many open files in system: a system-wide limit of some sort,
+	if any exists, on the number of open files has been
+	reached.</td></tr>
+
+<tr><td valign=top>EBADF</td>
+<td>Bad file number: a file operation was requested on an illegal file
+	handle, or a file handle that was not open. Or, a write
+	operation was attempted on a file handle that was open only
+	for read or vice-versa.</td></tr>
+
+<tr><td valign=top>EIOCTL</td>
+<td>Invalid or inappropriate ioctl: an operation requested via the 
+	<A HREF=../syscall/ioctl.html>ioctl</A> system call was not
+	defined or could not be performed on the indicated
+	object. In Unix, for historical reasons, this is ENOTTY, with
+	the historic message "Not a typewriter".</td></tr>
+
+<tr><td valign=top>EIO</td>
+<td>Input/output error: a hardware error occured on a device. Media
+	errors on disks fall into this category.</td></tr>
+
+<tr><td valign=top>ESPIPE</td>
+<td>Illegal seek: a seek operation was attempted on a sequential
+	object where seeking makes no sense, like a
+	terminal.</td></tr>
+
+<tr><td valign=top>EROFS</td>
+<td>Read-only file system: an attempt was made to modify a filesystem
+	that was mounted read-only. (If you have read-only
+	mounts.)</td></tr>
+
+<tr><td valign=top>ENOSPC</td>
+<td>No space left on device: the target filesystem is full.</td></tr>
+
+<tr><td valign=top>EDQUOT</td>
+<td>Disc<font size=-2><i>(sic)</i></font> quota exceeded: the current user ID's quota (of space or
+	number of files) on the target filesystem has been used up.
+	(If you have disk quotas.)</td></tr>
+
+<tr><td valign=top>EFBIG</td>
+<td>File too large: an attempt was made to exceed the target
+	filesystem's maximum file size, or a per-user limit on maximum
+	file size was reached, if such a thing exists.</td></tr>
+
+<tr><td valign=top>EFTYPE</td>
+<td>Invalid file type or format: the file provided was the wrong kind
+	of file or contained invalid syntax.</td></tr>
+
+<tr><td valign=top>EDOM</td>
+<td>Argument out of range: the (numeric) argument provided was outside
+	the values upon which the operation is defined. For example,
+	attempting to evaluate the logarithm of zero.</td></tr>
+
+<tr><td valign=top>ERANGE</td>
+<td>Result out of range: the result of an operation did not fit in the
+	space provided or could not be represented.</td></tr>
+
+<tr><td valign=top>EILSEQ</td>
+<td>Invalid multibyte character sequence: the input string contained a
+	byte sequence whose value is undefined or whose use is
+	restricted. Only applicable when a multibyte character set is
+	in use, and if someone has added locale support.</td></tr>
+
+<tr><td valign=top>ENOTSOCK</td>
+<td>Not a socket: the file handle in question does not refer to a
+	socket, but a socket was expected.</td></tr>
+
+<tr><td valign=top>EISSOCK</td>
+<td>Is a socket: the file handle in question refers to a socket, but a
+	socket was not expected. In Unix this is EOPNOTSUPP,
+	"Operation not supported on socket".</td></tr>
+
+<tr><td valign=top>ENOTCONN</td>
+<td>Socket is not connected: given the protocol in use, the operation
+	requires a connected socket, but no connection has yet been
+	made.</td></tr>
+
+<tr><td valign=top>ESHUTDOWN</td>
+<td>Socket has been shut down: the operation requires a running
+	socket, but the socket provided has been closed down.</td></tr>
+
+<tr><td valign=top>EPFNOSUPPORT</td>
+<td>Protocol family not supported: the requested protocol family
+	(PF_INET, PF_LOCAL, etc.) is not supported by the system.</td></tr>
+
+<tr><td valign=top>ESOCKTNOSUPPORT</td>
+<td>Socket type not supported: the requested socket type (SOCK_STREAM,
+	SOCK_DGRAM, etc.) is not supported by the system.</td></tr>
+
+<tr><td valign=top>EPROTONOSUPPORT</td>
+<td>Protocol not supported: the protocol requested for a socket was
+	not one supported by the system.</td></tr>
+
+<tr><td valign=top>EAFNOSUPPORT</td>
+<td>Address family not supported by protocol family: the address
+	family named in a struct sockaddr (AF_INET, AF_LOCAL, etc.) is
+	not supported by the protocol family used to create the socket
+	(PF_INET, PF_LOCAL, etc.). In practice each protocol family
+	has exactly one address family and the values of AF_* and PF_*
+	are often, if incorrectly, used interchangeably.</td></tr>
+
+<tr><td valign=top>ENOPROTOOPT</td>
+<td>Protocol option not available: the protocol option that was
+	requested is not supported or cannot be activated.</td></tr>
+
+<tr><td valign=top>EADDRINUSE</td>
+<td>Address already in use: the requested socket address is already in
+	use by another socket somewhere on the system.</td></tr>
+
+<tr><td valign=top>EADDRNOTAVAIL</td>
+<td>Cannot assign requested address: the requested socket address is
+	unavailable. Usually caused by attempting to bind a socket to
+	the IP address of another machine. </td></tr>
+
+<tr><td valign=top>ENETDOWN</td>
+<td>Network is down: the network or subnet needed is offline.</td></tr>
+
+<tr><td valign=top>ENETUNREACH</td>
+<td>Network is unreachable: the network or subnet needed cannot be
+	reached from here, possibly due to routing problems on the
+	network, possibly due to local configuration trouble.</td></tr>
+
+<tr><td valign=top>EHOSTDOWN</td>
+<td>Host is down: the specific machine requested is offline.</td></tr>
+
+<tr><td valign=top>EHOSTUNREACH</td>
+<td>Host is unreachable: the specific machine requested cannot be
+	reached from here.</td></tr>
+
+<tr><td valign=top>ECONNREFUSED</td>
+<td>Connection refused: the remote machine is not listening for
+	connections on the requested port.</td></tr>
+
+<tr><td valign=top>ETIMEDOUT</td>
+<td>Connection timed out: there was no response from the remote
+machine; it may be down, it may not be listening, or it may not be
+	receiving our packets at all.</td></tr>
+
+<tr><td valign=top>ECONNRESET</td>
+<td>Connection reset by peer: the connection was abandoned by the
+	remote host. Usually seen on already-open connections after
+	the remote machine reboots and thereby loses its network
+	state. Sometimes also caused by defective network devices
+	between the local and remote hosts.</td></tr>
+
+<tr><td valign=top>EMSGSIZE</td>
+<td>Message too large: an internal protocol length limit was
+	exceeded.</td></tr>
+
+<tr><td valign=top>ENOTSUP</td>
+<td>Threads operation not supported: a special error code defined by
+	the POSIX threads standard, which is a "special"
+	interface.</td></tr>
+
+</table>
+</blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/execv.html b/build/install/man/syscall/execv.html
new file mode 100644
index 0000000..34d2d14
--- /dev/null
+++ b/build/install/man/syscall/execv.html
@@ -0,0 +1,78 @@
+<html>
+<head>
+<title>execv</title>
+<body bgcolor=#ffffff>
+<h2 align=center>execv</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+execv - execute a program
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+execv(const char *<em>program</em>, char **<em>args</em>);
+
+<h3>Description</h3>
+
+execv replaces the currently executing program with a newly loaded
+program image. This occurs within one process; the process id is
+unchanged.
+<p>
+
+The pathname of the program to run is passed as <em>program</em>. The
+<em>args</em> argument is an array of 0-terminated strings. The array
+itself should be terminated by a NULL pointer.
+<p>
+
+The argument strings should be copied into the new process as the
+new process's argv[] array. In the new process, argv[argc] must be
+NULL.
+<p>
+
+By convention, argv[0] in new processes contains the name that was
+used to invoke the program. This is not necessarily the same as
+<em>program</em>, and furthermore is only a convention and should not
+be enforced by the kernel.
+<p>
+
+The process file table and current working directory are not modified
+by execve.
+
+<h3>Return Values</h3>
+On success, execv does not return; instead, the new program begins
+executing. On failure, execv returns -1, and sets
+<A HREF=errno.html>errno</A> to a suitable error code for the error
+condition encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<tr><td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of <em>program</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>program</em>
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>	<td><em>program</em> did not exist.</td></tr>
+<tr><td>EISDIR</td>	<td><em>program</em> is a directory.</td></tr>
+<tr><td>ENOEXEC</td>	<td><em>program</em> is not in a recognizable
+				executable file format, was for the
+				wrong platform, or contained invalid
+				fields.</td></tr>
+<tr><td>ENOMEM</td>	<td>Insufficient virtual memory is available.</td></tr>
+<tr><td>E2BIG</td>		<td>The total size of the argument strings is
+				too large.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>	<td>One of the args is an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/fork.html b/build/install/man/syscall/fork.html
new file mode 100644
index 0000000..b8fa18d
--- /dev/null
+++ b/build/install/man/syscall/fork.html
@@ -0,0 +1,67 @@
+<html>
+<head>
+<title>fork</title>
+<body bgcolor=#ffffff>
+<h2 align=center>fork</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+fork - copy the current process
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+pid_t<br>
+fork(void);
+
+<h3>Description</h3>
+
+fork duplicates the currently running process. The two copies are
+identical, except that one (the "new" one, or "child"), has a new,
+unique process id, and in the other (the "parent") the process id is
+unchanged.
+<p>
+
+The process id must be greater than 0.
+<p>
+
+The two processes do not share memory or open file tables; this state
+is copied into the new process, and subsequent modification in one
+process does not affect the other.
+<p>
+
+However, the file handle objects the file tables point to are shared,
+so, for instance, calls to lseek in one process can affect the other.
+<p>
+
+<h3>Return Values</h3>
+On success, fork returns twice, once in the parent process and once in
+the child process. In the child process, 0 is returned. In the parent
+process, the process id of the new child process is returned.
+<p>
+
+On error, no new process is created, fork only returns once, returning
+-1, and <A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<tr><td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EMPROC</td>		<td>The current user already has too
+				many processes.</td></tr>
+<tr><td>ENPROC</td>		<td>There are already too many
+				processes on the system.</td></tr>
+<tr><td>ENOMEM</td>		<td>Sufficient virtual memory for the new
+				process was not available.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/fstat.html b/build/install/man/syscall/fstat.html
new file mode 100644
index 0000000..d842dc3
--- /dev/null
+++ b/build/install/man/syscall/fstat.html
@@ -0,0 +1,45 @@
+<html>
+<head>
+<title>fstat</title>
+<body bgcolor=#ffffff>
+<h2 align=center>fstat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+fstat - get file state information
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+fstat(int <em>fd</em>, struct stat *<em>statbuf</em>);
+
+<h3>Description</h3>
+
+fstat retrieves status information about the file referred to by the
+file handle <em>fd</em> and stores it in the stat structure pointed to
+by <em>statbuf</em>.
+
+<h3>Return Values</h3>
+On success, fstat returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>	<td><em>fd</em> is not a valid file handle.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>	<td><em>statbuf</em> points to an invalid address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/fsync.html b/build/install/man/syscall/fsync.html
new file mode 100644
index 0000000..5c4e429
--- /dev/null
+++ b/build/install/man/syscall/fsync.html
@@ -0,0 +1,48 @@
+<html>
+<head>
+<title>fsync</title>
+<body bgcolor=#ffffff>
+<h2 align=center>fsync</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+fsync - flush filesystem data for a specific file to disk
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+fsync(int <em>fd</em>);
+
+<h3>Description</h3>
+
+The fsync function forces a write of dirty filesystem buffers and
+other dirty filesystem state associated with the object referred to by
+<em>fd</em> to be written to disk.
+<p>
+
+fsync should not return until the writes are complete.
+<p>
+
+<h3>Return Values</h3>
+On success, fsync returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>		<td><em>fd</em> is not a valid file handle.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/ftruncate.html b/build/install/man/syscall/ftruncate.html
new file mode 100644
index 0000000..293f460
--- /dev/null
+++ b/build/install/man/syscall/ftruncate.html
@@ -0,0 +1,50 @@
+<html>
+<head>
+<title>ftruncate</title>
+<body bgcolor=#ffffff>
+<h2 align=center>ftruncate</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+ftruncate - set size of a file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+ftruncate(int <em>fd</em>, off_t <em>filesize</em>);
+
+<h3>Description</h3>
+
+ftruncate forcibly sets the size of the file referred to by
+<em>fd</em> to <em>filesize</em>. If this expands the file, the new
+data appears as if it is zero-filled. If this shrinks the file, the
+excess data is discarded.
+<p>
+
+The file must be open for write.
+
+<h3>Return Values</h3>
+On success, ftruncate returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>		<td><em>fd</em> is not a valid file handle, or
+				it is not open for writing.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>buf</em> points to an invalid address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/getdirentry.html b/build/install/man/syscall/getdirentry.html
new file mode 100644
index 0000000..d0bd8fd
--- /dev/null
+++ b/build/install/man/syscall/getdirentry.html
@@ -0,0 +1,57 @@
+<html>
+<head>
+<title>getdirentry</title>
+<body bgcolor=#ffffff>
+<h2 align=center>getdirentry</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+getdirentry - read filename from directory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+getdirentry(int <em>fd</em>, char *<em>buf</em>, size_t <em>buflen</em>);
+
+<h3>Description</h3>
+
+getdirentry retrieves the next filename from a directory referred to
+by the file handle <em>filehandle</em>. The name is stored in
+<em>buf</em>, an area of size <em>buflen</em>. The length of of the
+name actually found is returned.
+<p>
+
+Note: this call behaves like read() - the name stored in <em>buf</em>
+is not null-terminated.
+<p>
+
+Which filename is the "next" is chosen based on the seek pointer
+associated with the file handle. The meaning of the seek pointer on a
+directory is defined by the filesystem in use and should not be
+interpreted - the only ways in which <A HREF=lseek.html>lseek</A>
+should be used are with SEEK_SET and an offset previously returned by
+lseek, or with any of SEEK_SET, SEEK_CUR, or SEEK_EOF with an offset
+of 0.
+<p>
+
+<h3>Return Values</h3>
+On success, getdirentry returns the length of the name transferred.
+On error, -1 is returned, and <A HREF=errno.html>errno</A> is set
+according to the error encountered.
+
+<h3>Errors</h3>
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>		<td><em>fd</em> is not a valid file handle.</td></tr>
+<tr><td>ENOTDIR</td>	<td><em>fd</em> does not refer to a directory.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>buf</em> points to an invalid address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/getpid.html b/build/install/man/syscall/getpid.html
new file mode 100644
index 0000000..3c574e2
--- /dev/null
+++ b/build/install/man/syscall/getpid.html
@@ -0,0 +1,29 @@
+<html>
+<head>
+<title>getpid</title>
+<body bgcolor=#ffffff>
+<h2 align=center>getpid</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+getpid - get process id
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+pid_t<br>
+getpid(void);
+
+<h3>Description</h3>
+
+getpid returns the process id of the current process.
+
+<h3>Errors</h3>
+
+getpid does not fail.
+
+</body>
+</html>
diff --git a/build/install/man/syscall/index.html b/build/install/man/syscall/index.html
new file mode 100644
index 0000000..97ce46d
--- /dev/null
+++ b/build/install/man/syscall/index.html
@@ -0,0 +1,62 @@
+<html>
+<head>
+<title>OS/161 System calls</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 System calls</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=errno.html>errno</A> - error code reporting
+</ul>
+
+<ul>
+<li> <A HREF=_exit.html>_exit</A> - terminate process
+<li> <A HREF=chdir.html>chdir</A> - change current directory
+<li> <A HREF=close.html>close</A> - close file
+<li> <A HREF=dup2.html>dup2</A> - clone file handles
+<li> <A HREF=execv.html>execv</A> - execute a program
+<li> <A HREF=fork.html>fork</A> - copy the current process
+<li> <A HREF=fstat.html>fstat</A> - get file state information
+<li> <A HREF=fsync.html>fsync</A> - flush filesystem data for a
+   specific file to disk
+<li> <A HREF=ftruncate.html>ftruncate</A> - set size of a file
+<li> <A HREF=__getcwd.html>__getcwd</A> - get name of current working
+   directory (backend)
+<li> <A HREF=getdirentry.html>getdirentry</A> - read filename from directory
+<li> <A HREF=getpid.html>getpid</A> - get process id
+<li> <A HREF=ioctl.html>ioctl</A> - miscellaneous device I/O operations
+<li> <A HREF=link.html>link</A> - create hard link to a file
+<li> <A HREF=lseek.html>lseek</A> - change current position in file
+<li> <A HREF=lstat.html>lstat</A> - get file state information
+<li> <A HREF=mkdir.html>mkdir</A> - create directory
+<li> <A HREF=open.html>open</A> - open a file
+<li> <A HREF=pipe.html>pipe</A> - create pipe object
+<li> <A HREF=read.html>read</A> - read data from file
+<li> <A HREF=readlink.html>readlink</A> - fetch symbolic link contents
+<li> <A HREF=reboot.html>reboot</A> - reboot or halt system
+<li> <A HREF=remove.html>remove</A> - delete (unlink) a file
+<li> <A HREF=rename.html>rename</A> - rename or move a file
+<li> <A HREF=rmdir.html>rmdir</A> - remove directory
+<li> <A HREF=sbrk.html>sbrk</A> - set process break (allocate memory)
+<li> <A HREF=stat.html>stat</A> - get file state information
+<li> <A HREF=symlink.html>symlink</A> - create symbolic link
+<li> <A HREF=sync.html>sync</A> - flush filesystem data to disk
+<li> <A HREF=__time.html>__time</A> - get time of day
+<li> <A HREF=waitpid.html>waitpid</A> - wait for a process to exit
+<li> <A HREF=write.html>write</A> - write data to file
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/ioctl.html b/build/install/man/syscall/ioctl.html
new file mode 100644
index 0000000..b9a2c81
--- /dev/null
+++ b/build/install/man/syscall/ioctl.html
@@ -0,0 +1,61 @@
+<html>
+<head>
+<title>ioctl</title>
+<body bgcolor=#ffffff>
+<h2 align=center>ioctl</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+ioctl - miscellaneous device I/O operations
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;sys/ioctl.h&gt;<br>
+<br>
+int<br>
+ioctl(int <em>fd</em>, int <em>code</em>, void *<em>data</em>);
+
+<h3>Description</h3>
+
+ioctl performs an object-specific operation <em>code</em> on the
+object referred to by the file handle <em>fd</em>. The <em>data</em>
+argument may point to supplemental data required or returned by the
+operation. The size of buffer required, if any, and other such matters
+are operation-specific.
+<p>
+
+Traditionally, ioctl is a catchall function for performing operations
+that don't fit neatly into any other model.
+<p>
+
+The ioctl codes are defined in &lt;kern/ioctl.h&gt;, which should be
+included via &lt;sys/ioctl.h&gt; by user-level code. As of this
+writing, the base OS/161 system defines no ioctls. However, it may
+prove useful to implement some, particularly in connection with some
+less conventional possible projects.
+<p>
+
+<h3>Return Values</h3>
+On success, ioctl returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>		<td><em>fd</em> was not a valid file handle.</td></tr>
+<tr><td>EIOCTL</td>		<td><em>code</em> was an invalid ioctl for the
+				object referenced.</td></tr>
+<tr><td>EFAULT</td>		<td><em>data</em> was required by the operation
+				requested, but was an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/link.html b/build/install/man/syscall/link.html
new file mode 100644
index 0000000..0ab1926
--- /dev/null
+++ b/build/install/man/syscall/link.html
@@ -0,0 +1,64 @@
+<html>
+<head>
+<title>link</title>
+<body bgcolor=#ffffff>
+<h2 align=center>link</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+link - create hard link to a file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+link(const char *<em>oldname</em>, const char *<em>newname</em>);
+
+<h3>Description</h3>
+
+link creates a new name, <em>newname</em>, for the file referred to by
+<em>oldname</em>. Henceforth, both names are equally valid ways to
+refer to the same file. The file is only deleted when all names are
+removed. This is a "hard link".
+<p>
+
+The creation of the new name is atomic. The two names must be on the
+same filesystem. Directories may not be hard-linked.
+<p>
+
+<h3>Return Values</h3>
+On success, link returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of one of the names did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>		<td>A non-final component of one of the names
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>		<td>A non-final component of <em>newname</em>  
+				did not exist.</td></tr>
+<tr><td>ENOENT</td>		<td><em>oldname</em> does not exist.</td></tr>
+<tr><td>EEXIST</td>		<td><em>newname</em> already exists.</td></tr>
+<tr><td>EISDIR</td>		<td><em>oldname</em> is a directory.</td></tr>
+<tr><td>EXDEV</td>		<td>The two names are on different
+				filesystems.</td></tr>
+<tr><td>EMLINK</td>		<td>There are already too many links to
+				<em>oldname</em>.</td></tr>
+<tr><td>ENOSPC</td>		<td>The filesystem involved is full.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td>One of the arguments was an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/lseek.html b/build/install/man/syscall/lseek.html
new file mode 100644
index 0000000..debbdb7
--- /dev/null
+++ b/build/install/man/syscall/lseek.html
@@ -0,0 +1,73 @@
+<html>
+<head>
+<title>lseek</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lseek</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lseek - change current position in file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+off_t<br>
+lseek(int <em>fd</em>, off_t <em>pos</em>, int <em>whence</em>);
+
+<h3>Description</h3>
+
+lseek alters the current seek position of the file handle
+<em>filehandle</em>, seeking to a new position based on <em>pos</em>
+and <em>whence</em>.
+<p>
+
+If <em>whence</em> is
+<ul>
+<li> SEEK_SET, the new position is <em>pos</em>.
+<li> SEEK_CUR, the new position is the current position plus <em>pos</em>.
+<li> SEEK_END, the new position is the position of end-of-file 
+	plus <em>pos</em>.
+<li> anything else, lseek fails.
+</ul>
+
+Note that <em>pos</em> is a signed quantity.
+<p>
+
+It is not meaningful to seek on certain objects (such as the console
+device). All seeks on these objects fail.
+<p>
+
+Seek positions less than zero are invalid. Seek positions beyond EOF
+are legal.
+<p>
+
+Note that each distinct open of a file should have an independent seek
+pointer.
+<p>
+
+<h3>Return Values</h3>
+On success, lseek returns the new position. On error, -1 is returned,
+and <A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>		<td><em>fd</em> is not a valid file handle.</td></tr>
+<tr><td>ESPIPE</td>		<td><em>fd</em> refers to an object which does
+				not support seeking.</td></tr>
+<tr><td>EINVAL</td>		<td><em>whence</em> is invalid.</td></tr>
+<tr><td>EINVAL</td>		<td>The resulting seek position would be negative.</td></tr>
+</table></blockquote>
+
+
+</body>
+</html>
diff --git a/build/install/man/syscall/lstat.html b/build/install/man/syscall/lstat.html
new file mode 100644
index 0000000..2f6be57
--- /dev/null
+++ b/build/install/man/syscall/lstat.html
@@ -0,0 +1,53 @@
+<html>
+<head>
+<title>lstat</title>
+<body bgcolor=#ffffff>
+<h2 align=center>lstat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+lstat - get file state information
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;sys/stat.h&gt;<br>
+<br>
+int<br>
+lstat(const char *<em>pathname</em>, struct stat *<em>statbuf</em>);
+
+<h3>Description</h3>
+
+lstat retrieves status information about the file referred to by
+<em>pathname</em> and stores it in the stat structure pointed to
+by <em>statbuf</em>.
+<p>
+
+If <em>pathname</em> refers to a symbolic link, information about the
+link is retrieved rather than about the object the link points to.
+
+<h3>Return Values</h3>
+On success, lstat returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>		<td>The named file does not exist.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>statbuf</em> points to an invalid address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/mkdir.html b/build/install/man/syscall/mkdir.html
new file mode 100644
index 0000000..f4a00ea
--- /dev/null
+++ b/build/install/man/syscall/mkdir.html
@@ -0,0 +1,60 @@
+<html>
+<head>
+<title>mkdir</title>
+<body bgcolor=#ffffff>
+<h2 align=center>mkdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+mkdir - create directory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;sys/stat.h&gt;<br>
+<br>
+int<br>
+mkdir(const char *<em>pathname</em>, int <em>mode</em>);
+
+<h3>Description</h3>
+
+mkdir creates a directory named <em>name</em>, where <em>name</em> is
+the last filename component in <em>pathname</em>. All the directories
+named in the prefix portion of <em>pathname</em> must exist and must
+in fact be directories, not ordinary files. The name <em>name</em>
+must not already exist. The new directory must be created atomically.
+<p>
+
+The <em>mode</em> argument can be ignored in OS/161.
+<p>
+
+<h3>Return Values</h3>
+On success, mkdir returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of <em>pathname</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>		<td>A non-final component of <em>pathname</em>
+				did not exist.</td></tr>
+<tr><td>EEXIST</td>		<td>An object by the name <em>pathname</em>
+				already exists.</td></tr>
+<tr><td>ENOSPC</td>		<td>The filesystem the directory was to be
+				created on is full.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>pathname</em> was an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/open.html b/build/install/man/syscall/open.html
new file mode 100644
index 0000000..ffcc7a1
--- /dev/null
+++ b/build/install/man/syscall/open.html
@@ -0,0 +1,104 @@
+<html>
+<head>
+<title>open</title>
+<body bgcolor=#ffffff>
+<h2 align=center>open</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+open - open a file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+open(const char *<em>filename</em>, int <em>flags</em>);<br>
+int<br>
+open(const char *<em>filename</em>, int <em>flags</em>, int <em>mode</em>);<br>
+
+<h3>Description</h3>
+
+open opens the file, device, or other kernel object named by the
+pathname <em>filename</em>. The <em>flags</em> argument specifies how
+to open the file. The optional <em>mode</em> argument is only
+meaningful in Unix (or if you choose to implement Unix-style security
+later on) and can be ignored.
+<p>
+
+The flags argument should consist of one of
+<blockquote><table width=90%>
+<tr><td>O_RDONLY</td>	<td>Open for reading only.</td></tr>
+<tr><td>O_WRONLY</td>	<td>Open for writing only.</td></tr>
+<tr><td>O_RDWR</td>		<td>Open for reading and writing.</td></tr>
+</table></blockquote>
+
+It may also have any of the following flags OR'd in:
+<blockquote><table width=90%>
+<tr><td>O_CREAT</td>	<td>Create the file if it doesn't exist.</td></tr>
+<tr><td>O_EXCL</td>		<td>Fail if the file already exists.</td></tr>
+<tr><td>O_TRUNC</td>	<td>Truncate the file to length 0 upon open.</td></tr>
+<tr><td>O_APPEND</td>	<td>Open the file in append mode.</td></tr>
+</table></blockquote>
+
+O_EXCL is only meaningful if O_CREAT is also used.
+<p>
+
+O_APPEND causes all writes to the file to occur at the end of file, no
+matter what gets written to the file by whoever else. (This
+functionality may be optional; consult your course's assignments.)
+<p>
+
+open returns a file handle suitable for passing to 
+<A HREF=read.html>read</A>,
+<A HREF=write.html>write</A>,
+<A HREF=close.html>close</A>,
+etc. This file handle must be greater than or equal to zero.  Note
+that file handles 0 (STDIN_FILENO), 1 (STDOUT_FILENO), and 2
+(STDERR_FILENO) are used in special ways and are typically assumed by
+user-level code to always be open.
+
+<h3>Return Values</h3>
+On success, open returns a nonnegative file handle. On error, -1 is
+returned, and <A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>filename</em>
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>		<td>A non-final component of <em>filename</em>
+				did not exist.</td></tr>
+<tr><td>ENOENT</td>		<td>The named file does not exist, and O_CREAT
+				was not specified.</td></tr>
+<tr><td>EEXIST</td>		<td>The named file exists, and O_EXCL was
+				specified.</td></tr>
+<tr><td>EISDIR</td>		<td>The named object is a directory, and it
+				was to be opened for writing.</td></tr>
+<tr><td>EMFILE</td>		<td>The process's file table was full, or a
+				process-specific limit on open files
+				was reached.</td></tr>
+<tr><td>ENFILE</td>		<td>The system file table is full, if such a
+				thing exists, or a system-wide limit
+				on open files was reached.</td></tr>
+<tr><td>ENXIO</td>		<td>The named object is a block device with no
+				mounted filesystem.</td></tr>
+<tr><td>ENOSPC</td>		<td>The file was to be created, and the
+				filesystem involved is full.</td></tr>
+<tr><td>EINVAL</td>		<td><em>flags</em> contained invalid values.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>filename</em> was an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/pipe.html b/build/install/man/syscall/pipe.html
new file mode 100644
index 0000000..1b5cedb
--- /dev/null
+++ b/build/install/man/syscall/pipe.html
@@ -0,0 +1,74 @@
+<html>
+<head>
+<title>pipe</title>
+<body bgcolor=#ffffff>
+<h2 align=center>pipe</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+pipe - create pipe object
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+pipe(int *<em>fds</em>);
+
+<h3>Description</h3>
+
+The pipe call creates an anonymous pipe object in the system, and
+binds it to two file handles in the current process, one for the read
+end and one for the write end. (Pipes are unidirectional.)
+<p>
+
+Data written on the write end may be read from the read end. Once all
+references to the write end are closed, and all remaining data is
+read, further reads return EOF. If all references to the read end are
+closed before the write end is closed, further writes generate
+errors. The pipe object itself is destroyed when all references to
+both ends are closed.
+<p>
+
+<em>fds</em> is a pointer to two integers. A file handle for the read
+end of the pipe is stored in <em>fds</em>[0], and a file handle for
+the write end is stored in <em>fds</em>[1].
+<p>
+
+pipe is most often used in conjunction with <A HREF=dup2.html>dup2</A>
+and <A HREF=fork.html>fork</A> to send the standard output of one
+process to the standard input of another.
+<p>
+
+In POSIX, pipe I/O of data blocks smaller than a standard constant
+PIPE_BUF is guaranteed to be atomic. If you implement pipes, you need
+not necessarily implement POSIX semantics, but you should decide what
+sort of atomicity guarantees you wish to make and specify them
+carefully. 
+
+<h3>Return Values</h3>
+On success, pipe returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EMFILE</td>		<td>The process's file table was full, or a
+				process-specific limit on open files
+				was reached.</td></tr>
+<tr><td>ENFILE</td>		<td>The system file table is full, if such a
+				thing exists, or a system-wide limit
+				on open files was reached.</td></tr>
+<tr><td>EFAULT</td>		<td><em>fds</em> was an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/read.html b/build/install/man/syscall/read.html
new file mode 100644
index 0000000..c8da548
--- /dev/null
+++ b/build/install/man/syscall/read.html
@@ -0,0 +1,67 @@
+<html>
+<head>
+<title>read</title>
+<body bgcolor=#ffffff>
+<h2 align=center>read</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+read - read data from file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+read(int <em>fd</em>, void *<em>buf</em>, size_t <em>buflen</em>);
+
+<h3>Description</h3>
+
+read reads up to <em>buflen</em> bytes from the file specified by
+<em>fd</em>, at the location in the file specified by the current
+seek position of the file, and stores them in the space pointed to
+by <em>buf</em>. The file must be open for reading.
+<p>
+
+The current seek position of the file is advanced by the number of
+bytes read.
+<p>
+
+Each read (or <A HREF=write.html>write</A>) operation is atomic
+relative to other I/O to the same file.
+<p>
+
+<h3>Return Values</h3>
+
+The count of bytes read is returned. This count should be
+positive. A return value of 0 should be construed as signifying
+end-of-file. On error, read returns -1 and sets 
+<A HREF=errno.html>errno</A> to a suitable error code for the error 
+condition encountered.
+<p>
+
+Note that in some cases, particularly on devices, fewer than
+<em>buflen</em> (but greater than zero) bytes may be returned. This
+depends on circumstances and does not necessarily signify
+end-of-file.
+<p>
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>	<td><em>fd</em> is not a valid file descriptor, or was
+			not opened for reading.</td></tr>
+<tr><td>EFAULT</td>	<td>Part or all of the address space pointed to by
+			<em>buf</em> is invalid.</td></tr>
+<tr><td>EIO</td>	<td>A hardware I/O error occurred reading the data.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/readlink.html b/build/install/man/syscall/readlink.html
new file mode 100644
index 0000000..769bcac
--- /dev/null
+++ b/build/install/man/syscall/readlink.html
@@ -0,0 +1,55 @@
+<html>
+<head>
+<title>readlink</title>
+<body bgcolor=#ffffff>
+<h2 align=center>readlink</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+readlink - fetch symbolic link contents
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+readlink(const char *<em>path</em>, char *<em>buf</em>, size_t <em>len</em>);
+
+<h3>Description</h3>
+
+readlink retrieves the contents of the symbolic link named by
+<em>path</em> and places them in the buffer <em>buf</em>. At most
+<em>len</em> bytes are written.
+<p>
+
+readlink does not include a null terminator in <em>buf</em>.
+
+<h3>Return Values</h3>
+
+readlink returns the number of characters transferred. If an error
+occurs, -1 is returned, and <A HREF=errno.html>errno</A> is set
+according to the error encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>path</em>
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>		<td>The named file does not exist.</td></tr>
+<tr><td>EINVAL</td>		<td>The named file is not a symlink.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>buf</em> or <em>path</em> points to an 
+				invalid address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/reboot.html b/build/install/man/syscall/reboot.html
new file mode 100644
index 0000000..f7b8a95
--- /dev/null
+++ b/build/install/man/syscall/reboot.html
@@ -0,0 +1,52 @@
+<html>
+<head>
+<title>reboot</title>
+<body bgcolor=#ffffff>
+<h2 align=center>reboot</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+reboot - reboot or halt system
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+reboot(int <em>code</em>);
+
+<h3>Description</h3>
+
+reboot reboots or shuts down the system. The specific action depends
+on the <em>code</em> passed:
+<blockquote><table width=90%>
+<td width=10%>RB_REBOOT</td>	<td>The system is rebooted.</td></tr>
+<td width=10%>RB_HALT</td>	<td>The system is halted.</td></tr>
+<td width=10%>RB_POWEROFF</td>	<td>The system is powered off.</td></tr>
+</table></blockquote>
+
+<h3>Return Values</h3>
+
+On success, reboot does not return. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EINVAL</td>		<td><em>code</em> was not a valid
+				value.</td></tr>
+<tr><td>EPERM</td>		<td>The current process does not have
+				sufficient privilege to halt the
+				system.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/remove.html b/build/install/man/syscall/remove.html
new file mode 100644
index 0000000..aaf1cd0
--- /dev/null
+++ b/build/install/man/syscall/remove.html
@@ -0,0 +1,56 @@
+<html>
+<head>
+<title>remove</title>
+<body bgcolor=#ffffff>
+<h2 align=center>remove</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+remove - delete (unlink) a file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+remove(const char *<em>pathname</em>);
+
+<h3>Description</h3>
+
+The name of the file referred to by <em>pathname</em> is removed from
+the filesystem. The actual file itself is not removed until no further
+references to it exist, whether those references are on disk or in
+memory.
+<p>
+
+It is an error for <em>pathname</em> to not specify an existing file
+or to refer to a directory.
+<p>
+
+<h3>Return Values</h3>
+On success, remove returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td>EISDIR</td>		<td><em>pathname</em> referred to a directory.</td></tr>
+<tr><td>ENOENT</td>		<td>The target file did not exist.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td><em>pathname</em> was an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/rename.html b/build/install/man/syscall/rename.html
new file mode 100644
index 0000000..44950cb
--- /dev/null
+++ b/build/install/man/syscall/rename.html
@@ -0,0 +1,97 @@
+<html>
+<head>
+<title>rename</title>
+<body bgcolor=#ffffff>
+<h2 align=center>rename</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+rename - rename or move a file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+rename(const char *<em>oldname</em>, const char *<em>newname</em>);
+
+<h3>Description</h3>
+
+The file (or other object) referenced by <em>oldname</em> is given the
+name <em>newname</em>, and the name <em>oldname</em> is removed. If
+<em>newname</em> already exists, it is removed as well. (The semantics
+for removing files and directories described under 
+<A HREF=remove.html>remove</A> and <A HREF=rmdir.html>rmdir</A>
+must be honored.)
+<p>
+
+If <em>newname</em> exists, it must be a directory if and only if
+<em>oldname</em> also is.
+<p>
+
+If components of the path prefix of <em>newname</em> do not exist or
+are not directories, rename fails. Additionally, <em>oldname</em> and
+<em>newname</em> must refer to names on the same filesystem.
+<p>
+
+If <em>oldname</em> and <em>newname</em> are the same file, rename
+succeeds and the state of the filesystem is not altered.
+<p>
+
+Rename must be atomic; no other process on the system should be able
+to see the filesystem in a state where both (or neither)
+<em>oldname</em> and <em>newname</em> name the file. Additionally, if
+the system crashes, at least one name for the file must remain.
+<p>
+
+If <em>oldname</em> is a directory, <em>newname</em> must not refer to
+a subdirectory of <em>oldname</em>, as this would create a cycle in the
+directory tree.
+<p>
+
+Renaming the "." or ".." entries in directories is prohibited.
+<p>
+
+<h3>Return Values</h3>
+On success, rename returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>		<td>The device prefix of one of the names did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of one of the names
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>		<td>A non-final component of <em>newname</em>   
+				did not exist.</td></tr>
+<tr><td>ENOENT</td>		<td><em>oldname</em> does not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td><em>oldname</em> is a directory, and 
+				<em>newname</em> is not.</td></tr>
+<tr><td>EISDIR</td>		<td><em>oldname</em> is not a directory, and 
+				<em>newname</em> is.</td></tr>
+<tr><td>ENOTEMPTY</td>	<td><em>newname</em> is a directory, and it is
+				not empty.</td>   
+<tr><td>EXDEV</td>		<td>The two names are on different filesystems.</td></tr>
+<tr><td>EINVAL</td>		<td><em>newname</em> is a subdirectory of
+				<em>oldname</em>.</td></tr>
+<tr><td>EINVAL</td>		<td>An attempt was made to rename "."</td></tr>
+<tr><td>ENOSPC</td>		<td>The filesystem involved is full.</td></tr>
+<tr><td>EIO</td>		<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>		<td>One of the arguments was an invalid pointer.</td></tr>
+
+</table></blockquote>
+
+As with rmdir, attempts to rename ".." may generate either EINVAL or
+ENOTEMPTY. 
+
+</body>
+</html>
diff --git a/build/install/man/syscall/rmdir.html b/build/install/man/syscall/rmdir.html
new file mode 100644
index 0000000..a532fdf
--- /dev/null
+++ b/build/install/man/syscall/rmdir.html
@@ -0,0 +1,77 @@
+<html>
+<head>
+<title>rmdir</title>
+<body bgcolor=#ffffff>
+<h2 align=center>rmdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+rmdir - remove directory
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+rmdir(const char *<em>pathname</em>);
+
+<h3>Description</h3>
+
+rmdir removes the directory named by <em>pathname</em>. The directory
+(and all the components in its path prefix) must exist. The directory
+must be empty, except for "." and "..", and may not be the root
+directory of the filesystem.
+<p>
+
+It is invalid to attempt to remove the "." or ".." entries in a
+directory. What rmdir actually removes is a name in some (other)
+directory; removing the "." or ".." <strong>names</strong> would make
+a mess. It is not invalid for a process to remove its own current
+directory, but it does not work to do so by calling rmdir(".").
+<p>
+
+It is impossible in any event to remove a directory named with "..",
+because it is impossible to name a directory with ".." unless it is
+not empty.
+<p>
+
+You must decide what happens if an attempt is made to remove a
+directory that is presently in use (e.g., is being read by ls, or is
+some process's current directory, etc.)
+<p>
+
+The removal must be atomic.
+<p>
+
+<h3>Return Values</h3>
+On success, rmdir returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>	<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td>ENOTDIR</td>	<td><em>pathname</em> referred to an object that
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>	<td>The target directory did not exist.</td></tr>
+<tr><td>EINVAL</td>	<td>An attempt was made to remove "."</td></tr>
+<tr><td>ENOTEMPTY</td>	<td>The target directory was not empty.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>	<td><em>pathname</em> was an invalid pointer.</td></tr>
+</table></blockquote>
+
+Attempts to remove ".." may generate either EINVAL or ENOTEMPTY.
+
+</body>
+</html>
diff --git a/build/install/man/syscall/sbrk.html b/build/install/man/syscall/sbrk.html
new file mode 100644
index 0000000..7d7f915
--- /dev/null
+++ b/build/install/man/syscall/sbrk.html
@@ -0,0 +1,88 @@
+<html>
+<head>
+<title>sbrk</title>
+<body bgcolor=#ffffff>
+<h2 align=center>sbrk</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+sbrk - set process break (allocate memory)
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+void *<br>
+sbrk(intptr_t <em>amount</em>);
+
+<h3>Description</h3>
+
+The "break" is the end address of a process's heap region. The sbrk
+call adjusts the "break" by the amount <em>amount</em>. It returns the
+old "break". Thus, to determine the current "break", call sbrk(0).
+<p>
+
+The heap region is initially empty, so at process startup, the
+beginning of the heap region is the same as the end and may thus be
+retrieved using sbrk(0).
+<p>
+
+In OS/161, the initial "break" must be page-aligned, and sbrk only
+need support values of <em>amount</em> that result in page-aligned
+"break" addresses. Other values of <em>amount</em> may be rejected.
+(This may simplify the implementation. On the other hand, you may
+choose to support unaligned values anyway, as that may simplify your
+malloc code.)
+<p>
+
+Traditionally, the initial "break" is specifically defined to be the
+end of the BSS (uninitialized data) region, and any <em>amount</em>,
+page-aligned or not, may legally be used with sbrk.
+<p>
+
+Ordinarily, user-level code should call
+<A HREF=../libc/malloc.html>malloc</A> for memory allocation. The
+sbrk interface is intended only to be the back-end interface for
+malloc. Mixing calls to malloc and sbrk will likely confuse malloc and
+produces undefined behavior.
+<p>
+
+While one can lower the "break" by passing negative values of
+<em>amount</em>, one may not set the end of the heap to an address
+lower than the beginning of the heap. Attempts to do so must be
+rejected. 
+<p>
+
+<h3>Return Values</h3>
+
+On success, sbrk returns the previous value of the "break".  On error,
+((void *)-1) is returned, and <A HREF=errno.html>errno</A> is set
+according to the error encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENOMEM</td>	<td>Sufficient virtual memory to satisfy the
+				request was not available, or the
+				process has reached the limit of the
+				memory it is allowed to allocate.</td></tr>
+<tr><td>EINVAL</td>	<td>The request would move the "break" below
+				its initial value.</td></tr>
+</table></blockquote>
+
+<h3>Restrictions</h3>
+
+While you can return pages that happen to be at the end of the heap to
+the system, there is no way to use the sbrk interface to return unused
+pages in the middle of the heap. If you wish to do this, you will need
+to design a new or supplemental interface.
+
+</body>
+</html>
diff --git a/build/install/man/syscall/stat.html b/build/install/man/syscall/stat.html
new file mode 100644
index 0000000..65c77c4
--- /dev/null
+++ b/build/install/man/syscall/stat.html
@@ -0,0 +1,50 @@
+<html>
+<head>
+<title>stat</title>
+<body bgcolor=#ffffff>
+<h2 align=center>stat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+stat - get file state information
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;sys/stat.h&gt;<br>
+<br>
+int<br>
+stat(const char *<em>pathname</em>, struct stat *<em>statbuf</em>);
+
+<h3>Description</h3>
+
+stat retrieves status information about the file referred to by
+<em>pathname</em> and stores it in the stat structure pointed to
+by <em>statbuf</em>.
+
+<h3>Return Values</h3>
+On success, stat returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>	<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>	<td>The named file does not exist.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>	<td><em>statbuf</em> points to an invalid 
+				address.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/symlink.html b/build/install/man/syscall/symlink.html
new file mode 100644
index 0000000..b7eaaf9
--- /dev/null
+++ b/build/install/man/syscall/symlink.html
@@ -0,0 +1,56 @@
+<html>
+<head>
+<title>symlink</title>
+<body bgcolor=#ffffff>
+<h2 align=center>symlink</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+symlink - create symbolic link
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+symlink(const char *<em>oldname</em>, const char *<em>linkname</em>);
+
+<h3>Description</h3>
+
+symlink creates a symbolic link. The symlink itself is named
+<em>linkname</em>, and it points to <em>oldname</em>.
+<p>
+
+<em>oldname</em> need not exist or be on the same filesystem.
+
+<h3>Return Values</h3>
+On success, symlink returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>ENODEV</td>	<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>linkname</em>
+				was not a directory.</td></tr>
+<tr><td>ENOENT</td>	<td>A non-final component of <em>linkname</em>
+				did not exist.</td></tr>
+<tr><td>EEXIST</td>	<td><em>linkname</em> already exists.</td></tr>
+<tr><td>ENOSPC</td>	<td>The filesystem that was to hold the link
+				is full.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>	<td><em>linkname</em> or <em>oldname</em> was
+				an invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/sync.html b/build/install/man/syscall/sync.html
new file mode 100644
index 0000000..746b903
--- /dev/null
+++ b/build/install/man/syscall/sync.html
@@ -0,0 +1,35 @@
+<html>
+<head>
+<title>sync</title>
+<body bgcolor=#ffffff>
+<h2 align=center>sync</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+sync - flush filesystem data to disk
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+void<br>
+sync(void);
+
+<h3>Description</h3>
+
+The sync function forces a write of all dirty filesystem buffers and
+dirty filesystem state to disk.
+<p>
+
+<h3>Return Values</h3>
+
+No value is returned, and sync does not fail.
+
+<h3>Errors</h3>
+
+None.
+
+</body>
+</html>
diff --git a/build/install/man/syscall/waitpid.html b/build/install/man/syscall/waitpid.html
new file mode 100644
index 0000000..8146d2e
--- /dev/null
+++ b/build/install/man/syscall/waitpid.html
@@ -0,0 +1,142 @@
+<html>
+<head>
+<title>waitpid</title>
+<body bgcolor=#ffffff>
+<h2 align=center>waitpid</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+waitpid - wait for a process to exit
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;sys/wait.h&gt;<br>
+<br>
+pid_t<br>
+waitpid(pid_t <em>pid</em>, int *<em>status</em>, int <em>options</em>);
+
+<h3>Description</h3>
+
+Wait for the process specified by <em>pid</em> to exit, and return an
+encoded exit status in the integer pointed to by <em>status</em>. If
+that process has exited already, waitpid returns immediately. If that
+process does not exist, waitpid fails.
+<p>
+
+What it means for a process to move from "has exited already" to "does
+not exist", and when this occurs, is something you must decide.
+<p>
+
+If process P is "interested" in the exit code of process Q, process P
+should be able to find out that exit code by calling waitpid, even if
+Q exits somewhat before the time P calls waitpid. As described under
+<A HREF=_exit.html>_exit()</A>, precisely what is meant by "interested"
+is up to you.
+<p>
+
+You might implement restrictions or requirements on who may wait
+for which processes, like Unix does. You might also add a system
+call for one process to express interest in another process's exit
+code. If you do this, be sure to write a man page for the system 
+call, and discuss the rationale for your choices therein in your
+design document.
+<p>
+
+Note that in the absence of restrictions on who may wait for what, it
+is possible to set up situations that may result in deadlock. Your
+system must (of course) in some manner protect itself from these
+situations, either by prohibiting them or by detecting and resolving
+them.
+<p>
+
+In order to make the userlevel code that ships with OS/161 work, assume
+that a parent process is always interested in the exit codes of its
+child processes generated with <A HREF=fork.html>fork()</A>, unless it
+does something special to indicate otherwise.
+<p>
+
+The <em>options</em> argument should be 0. You are not required to
+implement any options. (However, your system should check to make sure
+that options you do not support are not requested.)
+<p>
+
+If you desire, you may implement the Unix option WNOHANG; this causes
+waitpid, when called for a process that has not yet exited, to return
+0 immediately instead of waiting.
+<p>
+
+The Unix option WUNTRACED, to ask for reporting of processes that stop
+as well as exit, is also defined in the header files, but implementing
+this feature is not required or necessary unless you are implementing
+job control.
+<p>
+
+You may also make up your own options if you find them helpful.
+However, please, document anything you make up.
+<p>
+
+The encoding of the exit status is comparable to Unix and is defined
+by the flags found in &lt;kern/wait.h&gt;. (Userlevel code should
+include &lt;sys/wait.h&gt; to get these definitions.) A process can
+exit by calling <A HREF=_exit.html>_exit()</A> or it can exit by
+receiving a fatal signal. In the former case the
+<tt>_MKWAIT_EXIT()</tt> macro should be used with the user-supplied
+exit code to prepare the exit status; in the latter, the
+<tt>_MKWAIT_SIG()</tt> macro (or <tt>_MKWAIT_CORE()</tt> if a core
+file was generated) should be used with the signal number. The result
+encoding also allows notification of processes that have stopped; this
+would be used in connection with job control and with
+<tt>ptrace</tt>-based debugging if you were to implement those things.
+<p>
+
+To <em>read</em> the wait status, use the macros <tt>WIFEXITED()</tt>,
+<tt>WIFSIGNALED()</tt>, and/or <tt>WIFSTOPPED()</tt> to find out what
+happened, and then <tt>WEXITSTATUS()</tt>, <tt>WTERMSIG()</tt>, or
+<tt>WSTOPSIG()</tt> respectively to get the exit code or signal
+number. If <tt>WIFSIGNALED()</tt> is true, <tt>WCOREDUMP()</tt> can be
+used to check if a core file was generated. This is the same as Unix,
+although the value encoding is different from the historic Unix
+format.
+<p>
+
+<h3>Return Values</h3>
+
+waitpid returns the process id whose exit status is reported in
+<em>status</em>. In OS/161, this is always the value of <em>pid</em>.
+<p>
+
+If you implement WNOHANG, and WNOHANG is given, and the process
+specified by <em>pid</em> has not yet exited, waitpid returns 0.
+<p>
+
+(In Unix, but not by default OS/161, you can wait for any of several
+processes by passing magic values of <em>pid</em>, so this return
+value can actually be useful.)
+<p>
+
+On error, -1 is returned, and errno is set to a suitable error code
+for the error condition encountered.
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EINVAL</td>	<td>The <em>options</em> argument requested invalid or
+			unsupported options.</td></tr>
+<tr><td>ECHILD</td>	<td>The <em>pid</em> argument named a process
+			that the current process was not interested
+			in or that has not yet exited.</td></tr>
+<tr><td>ESRCH</td>	<td>The <em>pid</em> argument named a
+			nonexistent process.</td></tr>
+<tr><td>EFAULT</td>	<td>The <em>status</em> argument was an 
+			invalid pointer.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/write.html b/build/install/man/syscall/write.html
new file mode 100644
index 0000000..804ccc9
--- /dev/null
+++ b/build/install/man/syscall/write.html
@@ -0,0 +1,72 @@
+<html>
+<head>
+<title>write</title>
+<body bgcolor=#ffffff>
+<h2 align=center>write</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+write - write data to file
+
+<h3>Library</h3>
+Standard C Library (libc, -lc)
+
+<h3>Synopsis</h3>
+#include &lt;unistd.h&gt;<br>
+<br>
+int<br>
+write(int <em>fd</em>, const void *<em>buf</em>, size_t <em>nbytes></em>);
+
+<h3>Description</h3>
+
+write writes up to <em>buflen</em> bytes to the file specified by
+<em>fd</em>, at the location in the file specified by the current
+seek position of the file, taking the data from the space pointed
+to by <em>buf</em>. The file must be open for writing.
+<p>
+
+The current seek position of the file is advanced by the number of
+bytes written.
+<p>
+
+Each write (or <A HREF=read.html>read</A>) operation is atomic
+relative to other I/O to the same file.
+<p>
+
+<h3>Return Values</h3>
+
+The count of bytes written is returned. This count should be
+positive. A return value of 0 means that nothing could be written,
+but that no error occurred; this only occurs at end-of-file on
+fixed-size objects. On error, write returns -1 and sets 
+<A HREF=errno.html>errno</A> to a suitable error code for the error
+condition encountered.
+<p>
+
+Note that in some cases, particularly on devices, fewer than
+<em>buflen</em> (but greater than zero) bytes may be written. This
+depends on circumstances and does not necessarily signify
+end-of-file. In most cases, one should loop to make sure that all
+output has actually been written.
+<p>
+
+<h3>Errors</h3>
+
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<blockquote><table width=90%>
+<td width=10%>&nbsp;</td><td>&nbsp;</td></tr>
+<tr><td>EBADF</td>	<td><em>fd</em> is not a valid file descriptor, or was
+			not opened for writing.</td></tr>
+<tr><td>EFAULT</td>	<td>Part or all of the address space pointed to by
+			<em>buf</em> is invalid.</td></tr>
+<tr><td>ENOSPC</td>	<td>There is no free space remaining on the filesystem
+			containing the file.</td></tr>
+<tr><td>EIO</td>	<td>A hardware I/O error occurred writing 
+			the data.</td></tr>
+</table></blockquote>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/add.html b/build/install/man/testbin/add.html
new file mode 100644
index 0000000..2a70333
--- /dev/null
+++ b/build/install/man/testbin/add.html
@@ -0,0 +1,29 @@
+<html>
+<head>
+<title>add</title>
+<body bgcolor=#ffffff>
+<h2 align=center>add</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+add - add two numbers
+
+<h3>Synopsis</h3>
+/testbin/add <em>n1</em> <em>n2</em>
+
+<h3>Description</h3>
+
+add prints the sum of the two numbers passed as arguments.
+
+<h3>Requirements</h3>
+
+add uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+add should work properly once the basic system calls are complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/argtest.html b/build/install/man/testbin/argtest.html
new file mode 100644
index 0000000..0215434
--- /dev/null
+++ b/build/install/man/testbin/argtest.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>argtest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>argtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+argtest - display arguments passed through execv
+
+<h3>Synopsis</h3>
+/testbin/argtest <em>args</em>
+
+<h3>Description</h3>
+
+argtest prints its arguments. This is likely to be helpful for testing
+execv during the basic system calls assignment.
+
+<h3>Requirements</h3>
+
+argtest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+argument passing should work once the basic system calls are complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/badcall.html b/build/install/man/testbin/badcall.html
new file mode 100644
index 0000000..679bd03
--- /dev/null
+++ b/build/install/man/testbin/badcall.html
@@ -0,0 +1,53 @@
+<html>
+<head>
+<title>badcall</title>
+<body bgcolor=#ffffff>
+<h2 align=center>badcall</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+badcall - make invalid system calls
+
+<h3>Synopsis</h3>
+/testbin/badcall [<em>test...</em>]
+
+<h3>Description</h3>
+
+badcall contains a variety of tests for system call error conditions
+and error handling. The tests are grouped by system call; all
+available tests for a particular system call are run when that system
+call is selected. 
+<p>
+
+None of the tests should crash the system. If you kill processes when
+system calls fail with EFAULT (a valid thing to do) badcall itself may
+get killed. Otherwise, badcall should not get killed either.
+<p>
+
+Tests may be selected on the command line; if so, all the tests
+selected on the command line will be run in order. If nothing is
+selected on the command line, a menu is printed and tests are prompted
+for.
+<p>
+
+The tests for the individual syscalls are specified with the letters
+`a' through `y'. A single-digit number may also be specified; this
+tests all the system calls that are supposed to work once the
+corresponding assignment is completed. `*' may be used to test
+everything. Use `!' to quit.
+
+<h3>Requirements</h3>
+
+badcall can test every system call. It requires
+<A HREF=../syscall/read.html>read</A> and 
+<A HREF=../syscall/write.html>write</A> itself to work properly, and
+some of the tests may use syscalls other than the ones being tested.
+<p>
+
+At the completion of each assignment, the system should pass the
+tests for the syscalls associated with that (and previous)
+assignments. At no time should anything badcall does crash the
+system. 
+
+</body>
+</html>
diff --git a/build/install/man/testbin/bigfile.html b/build/install/man/testbin/bigfile.html
new file mode 100644
index 0000000..aa33642
--- /dev/null
+++ b/build/install/man/testbin/bigfile.html
@@ -0,0 +1,33 @@
+<html>
+<head>
+<title>bigfile</title>
+<body bgcolor=#ffffff>
+<h2 align=center>bigfile</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+bigfile - create a large file in small chunks
+
+<h3>Synopsis</h3>
+/testbin/bigfile <em>filename</em> <em>size</em>
+
+<h3>Description</h3>
+
+bigfile creates a file of the specified size in fairly small chunks.
+
+<h3>Requirements</h3>
+
+bigfile uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+bigfile should run on emufs once the basic system calls are complete,
+and should run on SFS once the file system assignment is complete.
+Sufficiently small files should work on SFS even before that point.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/conman.html b/build/install/man/testbin/conman.html
new file mode 100644
index 0000000..ccad49b
--- /dev/null
+++ b/build/install/man/testbin/conman.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>conman</title>
+<body bgcolor=#ffffff>
+<h2 align=center>conman</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+conman - echo typed characters
+
+<h3>Synopsis</h3>
+/testbin/conman [-options] [args]
+
+<h3>Description</h3>
+
+conman echos characters typed on standard input until `q' is pressed.
+
+<h3>Requirements</h3>
+
+conman uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+conman should work once the basic system call assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/crash.html b/build/install/man/testbin/crash.html
new file mode 100644
index 0000000..4d3768f
--- /dev/null
+++ b/build/install/man/testbin/crash.html
@@ -0,0 +1,49 @@
+<html>
+<head>
+<title>crash</title>
+<body bgcolor=#ffffff>
+<h2 align=center>crash</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+crash - commit various exceptions
+
+<h3>Synopsis</h3>
+/testbin/crash [<em>operation</em>]
+
+<h3>Description</h3>
+
+crash will perform any one of fourteen illegal processor operations,
+any one of which should get it killed without causing the whole system
+to crash.
+<p>
+
+The operations are coded `a' through `n' and may be chosen on the
+command line. If no operation is chosen, a menu is displayed and a
+choice solicited.
+<p>
+
+<h3>Restrictions</h3>
+
+Test `f', which writes into the process's own code segment, will only
+cause a processor exception if you implement read-only code segments.
+Since this is not required, it is not required that test `f' pass.
+<p>
+
+However, using test `f' must not under any circumstances corrupt the
+code in the copy of crash on disk!
+
+<h3>Requirements</h3>
+
+crash uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+crash should operate properly once the basic system call assignment is
+complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/ctest.html b/build/install/man/testbin/ctest.html
new file mode 100644
index 0000000..91a2aac
--- /dev/null
+++ b/build/install/man/testbin/ctest.html
@@ -0,0 +1,39 @@
+<html>
+<head>
+<title>ctest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>ctest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+ctest - cyclic stride-oriented VM test
+
+<h3>Synopsis</h3>
+/testbin/ctest [<em>stride</em>]
+
+<h3>Description</h3>
+
+ctest creates a 1-megabyte array of pointers and sets it up as a
+circular linked list, then traverses the linked list. The linked
+list is set up so each entry points to the one <em>stride</em> entries
+away.
+<p>
+
+The <em>stride</em> argument should be odd, so all elements in the
+list are accessed.
+<p>
+
+The default stride is 477.
+
+<h3>Requirements</h3>
+
+ctest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+ctest should function properly once the VM assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/dirseek.html b/build/install/man/testbin/dirseek.html
new file mode 100644
index 0000000..51f3380
--- /dev/null
+++ b/build/install/man/testbin/dirseek.html
@@ -0,0 +1,41 @@
+<html>
+<head>
+<title>dirseek</title>
+<body bgcolor=#ffffff>
+<h2 align=center>dirseek</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+dirseek - seek on directories test
+
+<h3>Synopsis</h3>
+/testbin/dirseek
+
+<h3>Description</h3>
+
+dirseek creates a test directory, creates some files in it, and lists
+the directory repeatedly, seeking in a variety of ways (some legal,
+some not).
+
+<h3>Requirements</h3>
+
+dirseek uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/chdir.html>chdir</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/getdirentry.html>getdirentry</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+dirseek should run (on SFS filesystems) when the file system
+assignment is complete. It will not run on emufs, because emufs does
+not support mkdir or rmdir.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/dirtest.html b/build/install/man/testbin/dirtest.html
new file mode 100644
index 0000000..dd9d9b0
--- /dev/null
+++ b/build/install/man/testbin/dirtest.html
@@ -0,0 +1,33 @@
+<html>
+<head>
+<title>dirtest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>dirtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+dirtest - simple subdirectories test
+
+<h3>Synopsis</h3>
+/testbin/dirtest
+
+<h3>Description</h3>
+
+dirtest creates and then removes a series of nested directories.
+
+<h3>Requirements</h3>
+
+dirtest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+dirtest should run (on SFS filesystems) when the file system
+assignment is complete. It will not run on emufs, because emufs does
+not support rmdir.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/f_test.html b/build/install/man/testbin/f_test.html
new file mode 100644
index 0000000..0795929
--- /dev/null
+++ b/build/install/man/testbin/f_test.html
@@ -0,0 +1,51 @@
+<html>
+<head>
+<title>f_test</title>
+<body bgcolor=#ffffff>
+<h2 align=center>f_test</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+f_test - basic concurrent filesystem test
+
+<h3>Synopsis</h3>
+/testbin/f_test [1|2|3]
+
+<h3>Description</h3>
+
+f_test consists of three tests, 1-3, that can be specified on the
+command line. If nothing is specified, all three tests are run.
+<p>
+
+Test 1 writes a large file (a bit over 270k) and reads it back.
+<p>
+
+Test 2 creates and removes a directory tree, rather like
+<A HREF=dirtest.html>dirtest</A>.
+<p>
+
+Test 3 spawns three subprocesses that simultaneously read and write
+the same file.
+<p>
+
+<h3>Requirements</h3>
+
+f_test uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+f_test should run correctly once the file system assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/farm.html b/build/install/man/testbin/farm.html
new file mode 100644
index 0000000..eb220ef
--- /dev/null
+++ b/build/install/man/testbin/farm.html
@@ -0,0 +1,47 @@
+<html>
+<head>
+<title>farm</title>
+<body bgcolor=#ffffff>
+<h2 align=center>farm</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+farm - run some hogs and cats
+
+<h3>Synopsis</h3>
+/testbin/farm
+
+<h3>Description</h3>
+
+farm runs three copies of <A HREF=hog.html>hog</A> and one copy of
+<A HREF=../bin/cat.html>/bin/cat</A>.
+<p>
+
+The cat process reads and prints the file <strong>catfile</strong>,
+which you should create in advance.
+
+<h3>Requirements</h3>
+
+farm uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+The cat subprocess spawned by farm uses these additional system calls:
+<ul>
+<li><A HREF=../syscall/open.html>open</A>
+<li><A HREF=../syscall/read.html>read</A>
+<li><A HREF=../syscall/close.html>close</A>
+</ul>
+
+farm is only likely to be useful for testing the scheduler.
+
+<h3>Bugs</h3>
+
+farm does not wait for its child processes to finish.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/faulter.html b/build/install/man/testbin/faulter.html
new file mode 100644
index 0000000..1befaf6
--- /dev/null
+++ b/build/install/man/testbin/faulter.html
@@ -0,0 +1,31 @@
+<html>
+<head>
+<title>faulter</title>
+<body bgcolor=#ffffff>
+<h2 align=center>faulter</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+faulter - commit address fault
+
+<h3>Synopsis</h3>
+/testbin/faulter
+
+<h3>Description</h3>
+
+faulter accesses an invalid memory address, thus crashing. It should
+be killed and not crash the entire system.
+
+<h3>Requirements</h3>
+
+faulter uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+faulter should work properly, that is, get killed with an address
+fault, once the basic system calls assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/filetest.html b/build/install/man/testbin/filetest.html
new file mode 100644
index 0000000..a2abae9
--- /dev/null
+++ b/build/install/man/testbin/filetest.html
@@ -0,0 +1,40 @@
+<html>
+<head>
+<title>filetest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>filetest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+filetest - basic filesystem test
+
+<h3>Synopsis</h3>
+/testbin/filetest <em>filename</em>
+
+<h3>Description</h3>
+
+filetest tests the filesystem by opening, writing to, and reading from
+a user-specified file.
+
+<h3>Requirements</h3>
+
+filetest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+filetest should run correctly on SFS filesystems with the OS/161
+system as shipped. It should continue to work once the file system
+assignment is complete.
+<p>
+
+It will not work in full on emufs, because emufs does not support
+remove(). 
+
+</body>
+</html>
diff --git a/build/install/man/testbin/forkbomb.html b/build/install/man/testbin/forkbomb.html
new file mode 100644
index 0000000..7ece672
--- /dev/null
+++ b/build/install/man/testbin/forkbomb.html
@@ -0,0 +1,55 @@
+<html>
+<head>
+<title>forkbomb</title>
+<body bgcolor=#ffffff>
+<h2 align=center>forkbomb</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+forkbomb - create hundreds of processes
+
+<h3>Synopsis</h3>
+/testbin/forkbomb
+
+<h3>Description</h3>
+
+forkbomb does
+<pre>
+   while (1) fork();
+</pre>
+
+doing a bit of additional checking similar to that done by 
+<A HREF=forktest.html>forktest</A>.
+<p> 
+
+<strong>
+DO NOT RUN THIS ON A REAL SYSTEM - IT WILL GRIND TO A HALT AND
+PEOPLE WILL COME AFTER YOU WIELDING BASEBALL BATS AND/OR THE AD
+BOARD<sup><font size=-1>*</font></sup>. WE WARNED YOU.
+</strong>
+<p>
+
+<font size=-1><i><sup>*</sup> The Administrative Board of Harvard
+College handles formal disciplinary action.</i></font>
+
+<h3>Requirements</h3>
+
+forkbomb uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/getpid.html>getpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+We don't expect your system to withstand this without grinding to
+a halt, but once your basic system calls are complete it shouldn't
+crash. Likewise for after your virtual memory system is complete.
+<p>
+
+Note that this may turn out to be hard to achieve in practice. Don't
+spend much time fixing problems forkbomb triggers that won't arise
+under more normal operation. (If in doubt, consult the course staff.)
+
+</body>
+</html>
diff --git a/build/install/man/testbin/forktest.html b/build/install/man/testbin/forktest.html
new file mode 100644
index 0000000..1f9f682
--- /dev/null
+++ b/build/install/man/testbin/forktest.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>forktest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>forktest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+forktest - test fork system call
+
+<h3>Synopsis</h3>
+/testbin/forktest
+
+<h3>Description</h3>
+
+forktest forks a few times and tries to make sure each fork has its
+own data and stack.
+
+<h3>Requirements</h3>
+
+forktest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/getpid.html>getpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+forktest should run successfully once the VM assignment is completed.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/guzzle.html b/build/install/man/testbin/guzzle.html
new file mode 100644
index 0000000..19ce7e7
--- /dev/null
+++ b/build/install/man/testbin/guzzle.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>guzzle</title>
+<body bgcolor=#ffffff>
+<h2 align=center>guzzle</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+guzzle - waste cpu
+
+<h3>Synopsis</h3>
+/testbin/guzzle [<em>character</em>]
+
+<h3>Description</h3>
+
+guzzle burns cpu and periodically prints a character. The default
+character is a plus sign (+). It differs from <A HREF=hog.html>hog</A>
+chiefly in the printing and in that it runs longer.
+
+<h3>Requirements</h3>
+
+guzzle uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+It is only likely to be useful for testing the scheduler.
+</body>
+</html>
diff --git a/build/install/man/testbin/hash.html b/build/install/man/testbin/hash.html
new file mode 100644
index 0000000..3166a83
--- /dev/null
+++ b/build/install/man/testbin/hash.html
@@ -0,0 +1,41 @@
+<html>
+<head>
+<title>hash</title>
+<body bgcolor=#ffffff>
+<h2 align=center>hash</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+hash - compute a simple hash function of a file
+
+<h3>Synopsis</h3>
+/testbin/hash <em>file</em>
+<br>
+host-hash <em>file</em>
+
+<h3>Description</h3>
+
+hash takes a file and computes a hash value for it by adding all the
+bytes in the file together modulo a prime.
+<p>
+
+hash is by default also compiled for the System/161 host OS so you can
+cross-check the answers you get.
+
+<h3>Requirements</h3>
+
+hash uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+Once the basic system calls are complete, hash should work on any file
+the system supports. However, it will probably of most use for testing
+while working on the file system assignment.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/hog.html b/build/install/man/testbin/hog.html
new file mode 100644
index 0000000..8c3b6de
--- /dev/null
+++ b/build/install/man/testbin/hog.html
@@ -0,0 +1,27 @@
+<html>
+<head>
+<title>hog</title>
+<body bgcolor=#ffffff>
+<h2 align=center>hog</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+hog - waste cpu
+
+<h3>Synopsis</h3>
+/testbin/hog
+
+<h3>Description</h3>
+
+hog does nothing but burn cpu. It is not substantially different from
+<A HREF=guzzle.html>guzzle</A>.
+
+<h3>Requirements</h3>
+
+hog uses only the <A HREF=../syscall/_exit.html>_exit</A> system call.
+<p>
+
+It is only likely to be useful for testing the scheduler.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/huge.html b/build/install/man/testbin/huge.html
new file mode 100644
index 0000000..fae1191
--- /dev/null
+++ b/build/install/man/testbin/huge.html
@@ -0,0 +1,33 @@
+<html>
+<head>
+<title>huge</title>
+<body bgcolor=#ffffff>
+<h2 align=center>huge</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+huge - very large VM test
+
+<h3>Synopsis</h3>
+/testbin/huge
+
+<h3>Description</h3>
+
+huge creates an 8 megabyte data array and manipulates it. It will
+hopefully help show up bugs in the VM system.
+<p>
+
+It does not in fact do anything useful if it completes successfully..
+
+<h3>Requirements</h3>
+
+huge uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+huge should run properly once the VM assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/index.html b/build/install/man/testbin/index.html
new file mode 100644
index 0000000..334d135
--- /dev/null
+++ b/build/install/man/testbin/index.html
@@ -0,0 +1,59 @@
+<html>
+<head>
+<title>OS/161 Test binaries</title>
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Test binaries (/testbin)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=add.html>add</A> - add two numbers
+<li> <A HREF=argtest.html>argtest</A> - display arguments passed through execv
+<li> <A HREF=badcall.html>badcall</A> - make invalid system calls
+<li> <A HREF=bigfile.html>bigfile</A> - create a large file in small chunks
+<li> <A HREF=conman.html>conman</A> - echo typed characters
+<li> <A HREF=crash.html>crash</A> - commit various exceptions
+<li> <A HREF=ctest.html>ctest</A> - cyclic stride-oriented VM test
+<li> <A HREF=dirseek.html>dirseek</A> - seek on directories test
+<li> <A HREF=dirtest.html>dirtest</A> - simple subdirectories test
+<li> <A HREF=f_test.html>f_test</A> - basic concurrent filesystem test
+<li> <A HREF=farm.html>farm</A> - run some hogs and cats
+<li> <A HREF=faulter.html>faulter</A> - commit address fault
+<li> <A HREF=filetest.html>filetest</A> - basic filesystem test
+<li> <A HREF=forkbomb.html>forkbomb</A> - create hundreds of processes
+<li> <A HREF=forktest.html>forktest</A> - test fork system call
+<li> <A HREF=guzzle.html>guzzle</A> - waste cpu
+<li> <A HREF=hash.html>hash</A> - compute a simple hash function of a file
+<li> <A HREF=hog.html>hog</A> - waste cpu
+<li> <A HREF=huge.html>huge</A> - very large VM test
+<li> <A HREF=kitchen.html>kitchen</A> - run some sinks
+<li> <A HREF=malloctest.html>malloctest</A> - some simple tests for 
+   userlevel malloc
+<li> <A HREF=matmult.html>matmult</A> - baseline VM stress test
+<li> <A HREF=palin.html>palin</A> - simple VM test
+<li> <A HREF=randcall.html>randcall</A> - make randomized system calls
+<li> <A HREF=rmdirtest.html>rmdirtest</A> - test removing in-use directories
+<li> <A HREF=rmtest.html>rmtest</A> - test removing open files
+<li> <A HREF=sink.html>sink</A> - accept and throw away console input
+<li> <A HREF=sort.html>sort</A> - large quicksort-based VM test
+<li> <A HREF=sty.html>sty</A> - run some hogs
+<li> <A HREF=tail.html>tail</A> - print part of a file
+<li> <A HREF=tictac.html>tictac</A> - tic-tac-toe game
+<li> <A HREF=triplehuge.html>triplehuge</A> - very very large VM test
+<li> <A HREF=triplemat.html>triplemat</A> - very large VM test
+<li> <A HREF=userthreads.html>userthreads</A> - simple user-level threads test
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/kitchen.html b/build/install/man/testbin/kitchen.html
new file mode 100644
index 0000000..9628991
--- /dev/null
+++ b/build/install/man/testbin/kitchen.html
@@ -0,0 +1,42 @@
+<html>
+<head>
+<title>kitchen</title>
+<body bgcolor=#ffffff>
+<h2 align=center>kitchen</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+kitchen - run some sinks
+
+<h3>Synopsis</h3>
+/testbin/kitchen
+
+<h3>Description</h3>
+
+Runs four copies of <A HREF=sink.html>sink</A>. It may be useful for
+testing concurrent access to the console device. It may also be useful
+for testing job control, if you choose to pursue job control.
+
+<h3>Requirements</h3>
+
+kitchen uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+Additionally, the subprocesses it spawns use the
+<A HREF=../syscall/read.html>read</A> system call.
+<p>
+
+kitchen should function correctly once the basic system calls are
+complete.
+
+<h3>Bugs</h3>
+
+kitchen does not wait for its child processes to exit.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/malloctest.html b/build/install/man/testbin/malloctest.html
new file mode 100644
index 0000000..8dfe9ff
--- /dev/null
+++ b/build/install/man/testbin/malloctest.html
@@ -0,0 +1,64 @@
+<html>
+<head>
+<title>malloctest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>malloctest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+malloctest - some simple tests for userlevel malloc
+
+<h3>Synopsis</h3>
+/testbin/malloctest [<em>test</em>...]
+
+<h3>Description</h3>
+
+malloctest contains 7 tests, 1-7. These may be run interactively or
+from the command line.
+<p>
+
+Test 1 checks if all the bytes we ask for actually get allocated.
+<p>
+
+Test 2 checks if malloc gracefully handles failing requests. This test
+assumes that malloc will eventually fail if one keeps allocating
+enough memory, instead of promising memory it can't deliver and
+then (perhaps) killing processes when it runs out. More detail
+regarding this condition can be found in comments in the source code.
+<p>
+
+Test 3 also checks if malloc gracefully handles failing requests, and
+thus has the same restrictions as test 2.
+<p>
+
+Test 4 attempts to check if malloc coalesces the free list properly.
+This test is only meant for first-fit, next-fit, or best-fit
+allocators; anything else will most likely confuse it. Running test 4
+after other tests may confuse it as well.
+<p>
+
+Tests 5-7 are a randomized stress test. Test 5 uses pseudorandom seed
+0. Test 6 seeds the random generator from the
+<A HREF=../dev/random.html>random:</A> device. Test 7 prompts you for
+a specific seed.
+<p>
+
+<h3>Requirements</h3>
+
+malloctest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+malloctest also requires a user-level malloc/free implementation.
+<p>
+
+Your system should pass all the malloctest tests, subject to the
+conditions described above, once your user-level malloc is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/matmult.html b/build/install/man/testbin/matmult.html
new file mode 100644
index 0000000..0e09685
--- /dev/null
+++ b/build/install/man/testbin/matmult.html
@@ -0,0 +1,37 @@
+<html>
+<head>
+<title>matmult</title>
+<body bgcolor=#ffffff>
+<h2 align=center>matmult</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+matmult - baseline VM stress test
+
+<h3>Synopsis</h3>
+/testbin/matmult
+
+<h3>Description</h3>
+
+matmult multiplies two large matrices together and checks the result.
+Hopefully this will help detect bugs in the VM system.
+<p>
+
+The version for OS/161 has been gimmicked to be less efficient
+space-wise than normal matrix multiplication. This allows it to both
+take up an interesting amount of memory and run in a non-boring amount
+of time.
+
+<h3>Requirements</h3>
+
+matmult uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+matmult should run correctly once the VM system assignment is
+complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/palin.html b/build/install/man/testbin/palin.html
new file mode 100644
index 0000000..b03e1d7
--- /dev/null
+++ b/build/install/man/testbin/palin.html
@@ -0,0 +1,37 @@
+<html>
+<head>
+<title>palin</title>
+<body bgcolor=#ffffff>
+<h2 align=center>palin</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+palin - simple VM test
+
+<h3>Synopsis</h3>
+/testbin/palin [-options] [args]
+
+<h3>Description</h3>
+
+palin checks a long string contained within itself for being
+palindromic. The check should pass.
+<p>
+
+The string is not actually all that long and this test does not stress
+the VM in any real sense of the word. However, it might be a useful
+test early on in the debugging phase.
+
+<h3>Requirements</h3>
+
+palin uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+palin should run correctly once the basic system calls are complete,
+and should continue to run correctly once the VM system assignment is
+complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/randcall.html b/build/install/man/testbin/randcall.html
new file mode 100644
index 0000000..35fc35f
--- /dev/null
+++ b/build/install/man/testbin/randcall.html
@@ -0,0 +1,59 @@
+<html>
+<head>
+<title>randcall</title>
+<body bgcolor=#ffffff>
+<h2 align=center>randcall</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+randcall - make randomized system calls
+
+<h3>Synopsis</h3>
+/testbin/randcall [-f] [-c <em>count</em>] [-r <em>seed</em>] <em>callset</em>
+
+<h3>Description</h3>
+
+randcall makes randomized system calls, that is, system calls with
+completely random arguments. The <em>callset</em> determines which
+list of system calls it uses; it is either "all", which does
+everything, or a number that identifies one of the assignments, in
+which case it exercises all the system calls that are supposed to be
+working when that assignment is complete. (If the lists compiled into
+randcall are wrong, contact your course staff.)
+<p>
+
+Ordinarily, in case some of these calls cause process termination,
+randcall forks before making each call. This can be slow, so the -f
+option can be used to suppress this behavior.
+<p>
+
+The -c <em>count</em> option tells randcall to make <em>count</em>
+iterations through the list of calls it's using. (It always goes
+through the list sequentially.) The default count is 100.
+<p>
+
+The -r <em>seed</em> option allows one to set the pseudorandom seed
+used by randcall to generate the call arguments. The default seed is
+0.
+<p>
+
+randcall prints what it's doing, so if it blows up you should be able
+to see what happened.
+<p>
+
+The system calls that do not take arguments are not on any of the call
+lists. Neither is <A HREF=../syscall/reboot.html>reboot</A>, to prevent
+accidental system shutdown.
+
+<h3>Requirements</h3>
+
+randcall should never under any circumstances crash the kernel, no
+matter what call list is in use.
+
+<h3>Bugs</h3>
+
+There should be an option to seed the random generator from 
+<A HREF=../dev/random.html>random:</A>.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/rmdirtest.html b/build/install/man/testbin/rmdirtest.html
new file mode 100644
index 0000000..81a7699
--- /dev/null
+++ b/build/install/man/testbin/rmdirtest.html
@@ -0,0 +1,46 @@
+<html>
+<head>
+<title>rmdirtest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>rmdirtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+rmdirtest - test removing in-use directories
+
+<h3>Synopsis</h3>
+/testbin/rmdirtest
+
+<h3>Description</h3>
+
+rmdirtest creates a test directory, goes into it, removes it, and
+attempts to do various operations on it. It tries to check that the
+right things happen, although some cases are beyond its ability to
+test directly (such as whether storage is leaked).
+<p>
+
+Note that while it is not legal to remove the `.' <em>entry</em> in a
+directory, it is perfectly legal to remove a directory by name that
+happens to be some process's (or your own) current working directory.
+<p>
+
+<h3>Requirements</h3>
+
+rmdirtest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/chdir.html>chdir</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/__getcwd.html>__getcwd</A>
+<li> <A HREF=../syscall/getdirentry.html>getdirentry</A>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+rmdirtest should run correctly once the file system assignment is
+complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/rmtest.html b/build/install/man/testbin/rmtest.html
new file mode 100644
index 0000000..24cde75
--- /dev/null
+++ b/build/install/man/testbin/rmtest.html
@@ -0,0 +1,52 @@
+<html>
+<head>
+<title>rmtest</title>
+<body bgcolor=#ffffff>
+<h2 align=center>rmtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+rmtest - test removing open files
+
+<h3>Synopsis</h3>
+/testbin/rmtest
+
+<h3>Description</h3>
+
+rmtest deletes a file while it's open and then attempts to do further
+I/O to it, and tries to check that the right things happen.
+
+<h3>Requirements</h3>
+
+rmtest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+rmtest also spawns a copy of <A HREF=../bin/rm.html>/bin/rm</A>, which
+uses these system calls:
+<ul>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+rmtest should run correctly once the file system assignment is
+complete.
+
+<h3>Bugs</h3>
+
+There's no particular reason it should use /bin/rm instead of calling
+<A HREF=../syscall/remove.html>remove</A> itself. But I guess it makes
+life more exciting.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/sink.html b/build/install/man/testbin/sink.html
new file mode 100644
index 0000000..4f61926
--- /dev/null
+++ b/build/install/man/testbin/sink.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>sink</title>
+<body bgcolor=#ffffff>
+<h2 align=center>sink</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+sink - accept and throw away console input
+
+<h3>Synopsis</h3>
+/testbin/sink
+
+<h3>Description</h3>
+
+sink reads characters from standard input and throws them away. It is
+perhaps of some use for testing standard input or console devices.
+
+<h3>Requirements</h3>
+
+sink uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+sink should function properly once the basic system calls are
+complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/sort.html b/build/install/man/testbin/sort.html
new file mode 100644
index 0000000..20f42a0
--- /dev/null
+++ b/build/install/man/testbin/sort.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>sort</title>
+<body bgcolor=#ffffff>
+<h2 align=center>sort</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+sort - large quicksort-based VM test
+
+<h3>Synopsis</h3>
+/testbin/sort
+
+<h3>Description</h3>
+
+sort creates an array of 147456 random integers and then sorts it
+using quicksort. This will hopefully help show up bugs in the VM
+system.
+
+<h3>Requirements</h3>
+
+sort uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+sort should run correctly to completion once the VM assignment is
+complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/sty.html b/build/install/man/testbin/sty.html
new file mode 100644
index 0000000..91ffc5e
--- /dev/null
+++ b/build/install/man/testbin/sty.html
@@ -0,0 +1,35 @@
+<html>
+<head>
+<title>sty</title>
+<body bgcolor=#ffffff>
+<h2 align=center>sty</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+sty - run some hogs
+
+<h3>Synopsis</h3>
+/testbin/sty
+
+<h3>Description</h3>
+
+sty runs six copies of <A HREF=hog.html>hog</A>.
+
+<h3>Requirements</h3>
+
+sty uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+sty is only likely to be useful for testing the scheduler.
+
+<h3>Bugs</h3>
+
+sty does not wait for its child processes to finish.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/tail.html b/build/install/man/testbin/tail.html
new file mode 100644
index 0000000..aa9b403
--- /dev/null
+++ b/build/install/man/testbin/tail.html
@@ -0,0 +1,40 @@
+<html>
+<head>
+<title>tail</title>
+<body bgcolor=#ffffff>
+<h2 align=center>tail</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+tail - print part of a file
+
+<h3>Synopsis</h3>
+/testbin/tail <em>file</em> <em>location</em>
+
+<h3>Description</h3>
+
+tail prints the contents of a file starting at offset
+<em>location</em> within it, skipping the beginning.
+<p>
+
+It is somewhat similar in concept to the Unix tail command, but is not
+compatible, which is why it lives in testbin.
+
+<h3>Requirements</h3>
+
+tail uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+tail should work once the basic system calls are complete, but will
+probably be most useful as a debugging tool while working on the file
+system assignment.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/tictac.html b/build/install/man/testbin/tictac.html
new file mode 100644
index 0000000..54a204a
--- /dev/null
+++ b/build/install/man/testbin/tictac.html
@@ -0,0 +1,30 @@
+<html>
+<head>
+<title>tictac</title>
+<body bgcolor=#ffffff>
+<h2 align=center>tictac</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+tictac - tic-tac-toe game
+
+<h3>Synopsis</h3>
+/testbin/tictac
+
+<h3>Description</h3>
+
+tictac implements a simple version of tic-tac-toe.
+
+<h3>Requirements</h3>
+
+tictac uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+tictac should function correctly once the basic system calls are complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/triplehuge.html b/build/install/man/testbin/triplehuge.html
new file mode 100644
index 0000000..9f25126
--- /dev/null
+++ b/build/install/man/testbin/triplehuge.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>triplehuge</title>
+<body bgcolor=#ffffff>
+<h2 align=center>triplehuge</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+triplehuge - very very large VM test
+
+<h3>Synopsis</h3>
+/testbin/triplehuge
+
+<h3>Description</h3>
+
+triplehuge runs three copies of <A HREF=huge.html>huge</A> at once.
+
+<h3>Requirements</h3>
+
+triplehuge uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+triplehuge should run properly once the VM assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/triplemat.html b/build/install/man/testbin/triplemat.html
new file mode 100644
index 0000000..05ef788
--- /dev/null
+++ b/build/install/man/testbin/triplemat.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>triplemat</title>
+<body bgcolor=#ffffff>
+<h2 align=center>triplemat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+triplemat - very large VM test
+
+<h3>Synopsis</h3>
+/testbin/triplemat
+
+<h3>Description</h3>
+
+triplemat runs three copies of <A HREF=matmult.html>matmult</A> at once.
+
+<h3>Requirements</h3>
+
+triplemat uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+triplemat should run properly once the VM assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/triplesort.html b/build/install/man/testbin/triplesort.html
new file mode 100644
index 0000000..75f9692
--- /dev/null
+++ b/build/install/man/testbin/triplesort.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+<title>triplesort</title>
+<body bgcolor=#ffffff>
+<h2 align=center>triplesort</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+triplesort - very large VM test
+
+<h3>Synopsis</h3>
+/testbin/triplesort
+
+<h3>Description</h3>
+
+triplesort runs three copies of <A HREF=sort.html>sort</A> at once.
+
+<h3>Requirements</h3>
+
+triplesort uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+triplesort should run properly once the VM assignment is complete.
+
+</body>
+</html>
diff --git a/build/install/man/testbin/userthreads.html b/build/install/man/testbin/userthreads.html
new file mode 100644
index 0000000..b4dd7b7
--- /dev/null
+++ b/build/install/man/testbin/userthreads.html
@@ -0,0 +1,37 @@
+<html>
+<head>
+<title>userthreads</title>
+<body bgcolor=#ffffff>
+<h2 align=center>userthreads</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+userthreads - simple user-level threads test
+
+<h3>Synopsis</h3>
+/testbin/userthreads
+
+<h3>Description</h3>
+
+userthreads does simple console I/O from two threads in the same
+process.
+
+<h3>Requirements</h3>
+
+userthreads uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+It also assumes the existence of a function threadfork(), which takes
+the address of a function to start a new thread at, and makes certain
+other assumptions about thread semantics. See the source file.
+<p>
+
+If implementing user-level threads, part of your responsibility is to
+update the userthreads test to work with the threads package you
+write.
+
+</body>
+</html>
diff --git a/build/install/sbin/dumpsfs b/build/install/sbin/dumpsfs
new file mode 100755
index 0000000..7d8656e
Binary files /dev/null and b/build/install/sbin/dumpsfs differ
diff --git a/build/install/sbin/halt b/build/install/sbin/halt
new file mode 100755
index 0000000..430e633
Binary files /dev/null and b/build/install/sbin/halt differ
diff --git a/build/install/sbin/mksfs b/build/install/sbin/mksfs
new file mode 100755
index 0000000..98b5e60
Binary files /dev/null and b/build/install/sbin/mksfs differ
diff --git a/build/install/sbin/poweroff b/build/install/sbin/poweroff
new file mode 100755
index 0000000..066e2de
Binary files /dev/null and b/build/install/sbin/poweroff differ
diff --git a/build/install/sbin/reboot b/build/install/sbin/reboot
new file mode 100755
index 0000000..1457d72
Binary files /dev/null and b/build/install/sbin/reboot differ
diff --git a/build/install/sbin/sfsck b/build/install/sbin/sfsck
new file mode 100755
index 0000000..9369f03
Binary files /dev/null and b/build/install/sbin/sfsck differ
diff --git a/build/install/testbin/add b/build/install/testbin/add
new file mode 100755
index 0000000..fbfb4b6
Binary files /dev/null and b/build/install/testbin/add differ
diff --git a/build/install/testbin/argtest b/build/install/testbin/argtest
new file mode 100755
index 0000000..c1ba2a9
Binary files /dev/null and b/build/install/testbin/argtest differ
diff --git a/build/install/testbin/badcall b/build/install/testbin/badcall
new file mode 100755
index 0000000..327fe2e
Binary files /dev/null and b/build/install/testbin/badcall differ
diff --git a/build/install/testbin/bigfile b/build/install/testbin/bigfile
new file mode 100755
index 0000000..cae0d2b
Binary files /dev/null and b/build/install/testbin/bigfile differ
diff --git a/build/install/testbin/conman b/build/install/testbin/conman
new file mode 100755
index 0000000..ddda3e9
Binary files /dev/null and b/build/install/testbin/conman differ
diff --git a/build/install/testbin/crash b/build/install/testbin/crash
new file mode 100755
index 0000000..f692c69
Binary files /dev/null and b/build/install/testbin/crash differ
diff --git a/build/install/testbin/ctest b/build/install/testbin/ctest
new file mode 100755
index 0000000..c0aaf34
Binary files /dev/null and b/build/install/testbin/ctest differ
diff --git a/build/install/testbin/dirconc b/build/install/testbin/dirconc
new file mode 100755
index 0000000..eddbb8b
Binary files /dev/null and b/build/install/testbin/dirconc differ
diff --git a/build/install/testbin/dirseek b/build/install/testbin/dirseek
new file mode 100755
index 0000000..db1d140
Binary files /dev/null and b/build/install/testbin/dirseek differ
diff --git a/build/install/testbin/dirtest b/build/install/testbin/dirtest
new file mode 100755
index 0000000..d62fd59
Binary files /dev/null and b/build/install/testbin/dirtest differ
diff --git a/build/install/testbin/f_test b/build/install/testbin/f_test
new file mode 100755
index 0000000..35bd66f
Binary files /dev/null and b/build/install/testbin/f_test differ
diff --git a/build/install/testbin/farm b/build/install/testbin/farm
new file mode 100755
index 0000000..6e6ea1b
Binary files /dev/null and b/build/install/testbin/farm differ
diff --git a/build/install/testbin/faulter b/build/install/testbin/faulter
new file mode 100755
index 0000000..a462c1d
Binary files /dev/null and b/build/install/testbin/faulter differ
diff --git a/build/install/testbin/filetest b/build/install/testbin/filetest
new file mode 100755
index 0000000..8f72bef
Binary files /dev/null and b/build/install/testbin/filetest differ
diff --git a/build/install/testbin/forkbomb b/build/install/testbin/forkbomb
new file mode 100755
index 0000000..eb3ec11
Binary files /dev/null and b/build/install/testbin/forkbomb differ
diff --git a/build/install/testbin/forktest b/build/install/testbin/forktest
new file mode 100755
index 0000000..3e43cd4
Binary files /dev/null and b/build/install/testbin/forktest differ
diff --git a/build/install/testbin/guzzle b/build/install/testbin/guzzle
new file mode 100755
index 0000000..443defc
Binary files /dev/null and b/build/install/testbin/guzzle differ
diff --git a/build/install/testbin/hash b/build/install/testbin/hash
new file mode 100755
index 0000000..548251e
Binary files /dev/null and b/build/install/testbin/hash differ
diff --git a/build/install/testbin/hog b/build/install/testbin/hog
new file mode 100755
index 0000000..cb68ef4
Binary files /dev/null and b/build/install/testbin/hog differ
diff --git a/build/install/testbin/huge b/build/install/testbin/huge
new file mode 100755
index 0000000..8514625
Binary files /dev/null and b/build/install/testbin/huge differ
diff --git a/build/install/testbin/kitchen b/build/install/testbin/kitchen
new file mode 100755
index 0000000..00e3b18
Binary files /dev/null and b/build/install/testbin/kitchen differ
diff --git a/build/install/testbin/malloctest b/build/install/testbin/malloctest
new file mode 100755
index 0000000..850f2aa
Binary files /dev/null and b/build/install/testbin/malloctest differ
diff --git a/build/install/testbin/matmult b/build/install/testbin/matmult
new file mode 100755
index 0000000..4a1f89a
Binary files /dev/null and b/build/install/testbin/matmult differ
diff --git a/build/install/testbin/palin b/build/install/testbin/palin
new file mode 100755
index 0000000..802f68c
Binary files /dev/null and b/build/install/testbin/palin differ
diff --git a/build/install/testbin/parallelvm b/build/install/testbin/parallelvm
new file mode 100755
index 0000000..6d4a3e9
Binary files /dev/null and b/build/install/testbin/parallelvm differ
diff --git a/build/install/testbin/psort b/build/install/testbin/psort
new file mode 100755
index 0000000..48eae77
Binary files /dev/null and b/build/install/testbin/psort differ
diff --git a/build/install/testbin/randcall b/build/install/testbin/randcall
new file mode 100755
index 0000000..8ffedd7
Binary files /dev/null and b/build/install/testbin/randcall differ
diff --git a/build/install/testbin/rmdirtest b/build/install/testbin/rmdirtest
new file mode 100755
index 0000000..ac3141e
Binary files /dev/null and b/build/install/testbin/rmdirtest differ
diff --git a/build/install/testbin/rmtest b/build/install/testbin/rmtest
new file mode 100755
index 0000000..3105701
Binary files /dev/null and b/build/install/testbin/rmtest differ
diff --git a/build/install/testbin/sink b/build/install/testbin/sink
new file mode 100755
index 0000000..a4f3cdf
Binary files /dev/null and b/build/install/testbin/sink differ
diff --git a/build/install/testbin/sort b/build/install/testbin/sort
new file mode 100755
index 0000000..859fbd4
Binary files /dev/null and b/build/install/testbin/sort differ
diff --git a/build/install/testbin/sty b/build/install/testbin/sty
new file mode 100755
index 0000000..7d10528
Binary files /dev/null and b/build/install/testbin/sty differ
diff --git a/build/install/testbin/tail b/build/install/testbin/tail
new file mode 100755
index 0000000..f211df5
Binary files /dev/null and b/build/install/testbin/tail differ
diff --git a/build/install/testbin/tictac b/build/install/testbin/tictac
new file mode 100755
index 0000000..b42bf03
Binary files /dev/null and b/build/install/testbin/tictac differ
diff --git a/build/install/testbin/triplehuge b/build/install/testbin/triplehuge
new file mode 100755
index 0000000..c6271df
Binary files /dev/null and b/build/install/testbin/triplehuge differ
diff --git a/build/install/testbin/triplemat b/build/install/testbin/triplemat
new file mode 100755
index 0000000..3bdb1a6
Binary files /dev/null and b/build/install/testbin/triplemat differ
diff --git a/build/install/testbin/triplesort b/build/install/testbin/triplesort
new file mode 100755
index 0000000..53aa374
Binary files /dev/null and b/build/install/testbin/triplesort differ
diff --git a/build/tooldir/hostbin/host-psort b/build/tooldir/hostbin/host-psort
new file mode 100755
index 0000000..ef3c144
Binary files /dev/null and b/build/tooldir/hostbin/host-psort differ
diff --git a/build/tooldir/hostlib/libhostcompat.a b/build/tooldir/hostlib/libhostcompat.a
new file mode 100644
index 0000000..273a355
Binary files /dev/null and b/build/tooldir/hostlib/libhostcompat.a differ
diff --git a/build/user/bin/cat/cat b/build/user/bin/cat/cat
new file mode 100755
index 0000000..6a9b7bd
Binary files /dev/null and b/build/user/bin/cat/cat differ
diff --git a/build/user/bin/cat/cat.o b/build/user/bin/cat/cat.o
new file mode 100644
index 0000000..d219d4f
Binary files /dev/null and b/build/user/bin/cat/cat.o differ
diff --git a/build/user/bin/cp/cp b/build/user/bin/cp/cp
new file mode 100755
index 0000000..3f02a2f
Binary files /dev/null and b/build/user/bin/cp/cp differ
diff --git a/build/user/bin/cp/cp.o b/build/user/bin/cp/cp.o
new file mode 100644
index 0000000..fe6a1e0
Binary files /dev/null and b/build/user/bin/cp/cp.o differ
diff --git a/build/user/bin/false/false b/build/user/bin/false/false
new file mode 100755
index 0000000..f7e47bc
Binary files /dev/null and b/build/user/bin/false/false differ
diff --git a/build/user/bin/false/false.o b/build/user/bin/false/false.o
new file mode 100644
index 0000000..36c8148
Binary files /dev/null and b/build/user/bin/false/false.o differ
diff --git a/build/user/bin/ln/ln b/build/user/bin/ln/ln
new file mode 100755
index 0000000..0334ae7
Binary files /dev/null and b/build/user/bin/ln/ln differ
diff --git a/build/user/bin/ln/ln.o b/build/user/bin/ln/ln.o
new file mode 100644
index 0000000..7a34c82
Binary files /dev/null and b/build/user/bin/ln/ln.o differ
diff --git a/build/user/bin/ls/ls b/build/user/bin/ls/ls
new file mode 100755
index 0000000..f2999da
Binary files /dev/null and b/build/user/bin/ls/ls differ
diff --git a/build/user/bin/ls/ls.o b/build/user/bin/ls/ls.o
new file mode 100644
index 0000000..26246e1
Binary files /dev/null and b/build/user/bin/ls/ls.o differ
diff --git a/build/user/bin/mkdir/mkdir b/build/user/bin/mkdir/mkdir
new file mode 100755
index 0000000..bbfc233
Binary files /dev/null and b/build/user/bin/mkdir/mkdir differ
diff --git a/build/user/bin/mkdir/mkdir.o b/build/user/bin/mkdir/mkdir.o
new file mode 100644
index 0000000..74d62fc
Binary files /dev/null and b/build/user/bin/mkdir/mkdir.o differ
diff --git a/build/user/bin/mv/mv b/build/user/bin/mv/mv
new file mode 100755
index 0000000..8b867b9
Binary files /dev/null and b/build/user/bin/mv/mv differ
diff --git a/build/user/bin/mv/mv.o b/build/user/bin/mv/mv.o
new file mode 100644
index 0000000..8b1aa48
Binary files /dev/null and b/build/user/bin/mv/mv.o differ
diff --git a/build/user/bin/pwd/pwd b/build/user/bin/pwd/pwd
new file mode 100755
index 0000000..860899b
Binary files /dev/null and b/build/user/bin/pwd/pwd differ
diff --git a/build/user/bin/pwd/pwd.o b/build/user/bin/pwd/pwd.o
new file mode 100644
index 0000000..93ee886
Binary files /dev/null and b/build/user/bin/pwd/pwd.o differ
diff --git a/build/user/bin/rm/rm b/build/user/bin/rm/rm
new file mode 100755
index 0000000..0401206
Binary files /dev/null and b/build/user/bin/rm/rm differ
diff --git a/build/user/bin/rm/rm.o b/build/user/bin/rm/rm.o
new file mode 100644
index 0000000..333f023
Binary files /dev/null and b/build/user/bin/rm/rm.o differ
diff --git a/build/user/bin/rmdir/rmdir b/build/user/bin/rmdir/rmdir
new file mode 100755
index 0000000..53e2f37
Binary files /dev/null and b/build/user/bin/rmdir/rmdir differ
diff --git a/build/user/bin/rmdir/rmdir.o b/build/user/bin/rmdir/rmdir.o
new file mode 100644
index 0000000..5832e3a
Binary files /dev/null and b/build/user/bin/rmdir/rmdir.o differ
diff --git a/build/user/bin/sh/sh b/build/user/bin/sh/sh
new file mode 100755
index 0000000..8eb3217
Binary files /dev/null and b/build/user/bin/sh/sh differ
diff --git a/build/user/bin/sh/sh.o b/build/user/bin/sh/sh.o
new file mode 100644
index 0000000..ced2688
Binary files /dev/null and b/build/user/bin/sh/sh.o differ
diff --git a/build/user/bin/sync/sync b/build/user/bin/sync/sync
new file mode 100755
index 0000000..e77afe8
Binary files /dev/null and b/build/user/bin/sync/sync differ
diff --git a/build/user/bin/sync/sync.o b/build/user/bin/sync/sync.o
new file mode 100644
index 0000000..c6d2bbe
Binary files /dev/null and b/build/user/bin/sync/sync.o differ
diff --git a/build/user/bin/true/true b/build/user/bin/true/true
new file mode 100755
index 0000000..2b3ed19
Binary files /dev/null and b/build/user/bin/true/true differ
diff --git a/build/user/bin/true/true.o b/build/user/bin/true/true.o
new file mode 100644
index 0000000..645e968
Binary files /dev/null and b/build/user/bin/true/true.o differ
diff --git a/build/user/lib/crt0/crt0.o b/build/user/lib/crt0/crt0.o
new file mode 100644
index 0000000..a24f143
Binary files /dev/null and b/build/user/lib/crt0/crt0.o differ
diff --git a/build/user/lib/hostcompat/err.ho b/build/user/lib/hostcompat/err.ho
new file mode 100644
index 0000000..adf07b4
Binary files /dev/null and b/build/user/lib/hostcompat/err.ho differ
diff --git a/build/user/lib/hostcompat/hostcompat.ho b/build/user/lib/hostcompat/hostcompat.ho
new file mode 100644
index 0000000..6e7649c
Binary files /dev/null and b/build/user/lib/hostcompat/hostcompat.ho differ
diff --git a/build/user/lib/hostcompat/libhostcompat.a b/build/user/lib/hostcompat/libhostcompat.a
new file mode 100644
index 0000000..273a355
Binary files /dev/null and b/build/user/lib/hostcompat/libhostcompat.a differ
diff --git a/build/user/lib/hostcompat/time.ho b/build/user/lib/hostcompat/time.ho
new file mode 100644
index 0000000..5ecceb6
Binary files /dev/null and b/build/user/lib/hostcompat/time.ho differ
diff --git a/build/user/lib/libc/__assert.o b/build/user/lib/libc/__assert.o
new file mode 100644
index 0000000..134b443
Binary files /dev/null and b/build/user/lib/libc/__assert.o differ
diff --git a/build/user/lib/libc/__printf.o b/build/user/lib/libc/__printf.o
new file mode 100644
index 0000000..4bbc79f
Binary files /dev/null and b/build/user/lib/libc/__printf.o differ
diff --git a/build/user/lib/libc/__puts.o b/build/user/lib/libc/__puts.o
new file mode 100644
index 0000000..ed2767e
Binary files /dev/null and b/build/user/lib/libc/__puts.o differ
diff --git a/build/user/lib/libc/abort.o b/build/user/lib/libc/abort.o
new file mode 100644
index 0000000..a1d2598
Binary files /dev/null and b/build/user/lib/libc/abort.o differ
diff --git a/build/user/lib/libc/adddi3.o b/build/user/lib/libc/adddi3.o
new file mode 100644
index 0000000..7a0504b
Binary files /dev/null and b/build/user/lib/libc/adddi3.o differ
diff --git a/build/user/lib/libc/anddi3.o b/build/user/lib/libc/anddi3.o
new file mode 100644
index 0000000..0541601
Binary files /dev/null and b/build/user/lib/libc/anddi3.o differ
diff --git a/build/user/lib/libc/ashldi3.o b/build/user/lib/libc/ashldi3.o
new file mode 100644
index 0000000..67647db
Binary files /dev/null and b/build/user/lib/libc/ashldi3.o differ
diff --git a/build/user/lib/libc/ashrdi3.o b/build/user/lib/libc/ashrdi3.o
new file mode 100644
index 0000000..9f019f0
Binary files /dev/null and b/build/user/lib/libc/ashrdi3.o differ
diff --git a/build/user/lib/libc/atoi.o b/build/user/lib/libc/atoi.o
new file mode 100644
index 0000000..5093701
Binary files /dev/null and b/build/user/lib/libc/atoi.o differ
diff --git a/build/user/lib/libc/bzero.o b/build/user/lib/libc/bzero.o
new file mode 100644
index 0000000..68faa79
Binary files /dev/null and b/build/user/lib/libc/bzero.o differ
diff --git a/build/user/lib/libc/cmpdi2.o b/build/user/lib/libc/cmpdi2.o
new file mode 100644
index 0000000..793dae9
Binary files /dev/null and b/build/user/lib/libc/cmpdi2.o differ
diff --git a/build/user/lib/libc/divdi3.o b/build/user/lib/libc/divdi3.o
new file mode 100644
index 0000000..bd76732
Binary files /dev/null and b/build/user/lib/libc/divdi3.o differ
diff --git a/build/user/lib/libc/err.o b/build/user/lib/libc/err.o
new file mode 100644
index 0000000..bb03665
Binary files /dev/null and b/build/user/lib/libc/err.o differ
diff --git a/build/user/lib/libc/errno.o b/build/user/lib/libc/errno.o
new file mode 100644
index 0000000..374c338
Binary files /dev/null and b/build/user/lib/libc/errno.o differ
diff --git a/build/user/lib/libc/exit.o b/build/user/lib/libc/exit.o
new file mode 100644
index 0000000..74910c9
Binary files /dev/null and b/build/user/lib/libc/exit.o differ
diff --git a/build/user/lib/libc/getchar.o b/build/user/lib/libc/getchar.o
new file mode 100644
index 0000000..9030a04
Binary files /dev/null and b/build/user/lib/libc/getchar.o differ
diff --git a/build/user/lib/libc/getcwd.o b/build/user/lib/libc/getcwd.o
new file mode 100644
index 0000000..085b055
Binary files /dev/null and b/build/user/lib/libc/getcwd.o differ
diff --git a/build/user/lib/libc/iordi3.o b/build/user/lib/libc/iordi3.o
new file mode 100644
index 0000000..3637368
Binary files /dev/null and b/build/user/lib/libc/iordi3.o differ
diff --git a/build/user/lib/libc/libc.a b/build/user/lib/libc/libc.a
new file mode 100644
index 0000000..06a8d2f
Binary files /dev/null and b/build/user/lib/libc/libc.a differ
diff --git a/build/user/lib/libc/lshldi3.o b/build/user/lib/libc/lshldi3.o
new file mode 100644
index 0000000..17caeca
Binary files /dev/null and b/build/user/lib/libc/lshldi3.o differ
diff --git a/build/user/lib/libc/lshrdi3.o b/build/user/lib/libc/lshrdi3.o
new file mode 100644
index 0000000..9685a08
Binary files /dev/null and b/build/user/lib/libc/lshrdi3.o differ
diff --git a/build/user/lib/libc/malloc.o b/build/user/lib/libc/malloc.o
new file mode 100644
index 0000000..deada25
Binary files /dev/null and b/build/user/lib/libc/malloc.o differ
diff --git a/build/user/lib/libc/memcmp.o b/build/user/lib/libc/memcmp.o
new file mode 100644
index 0000000..d1587d8
Binary files /dev/null and b/build/user/lib/libc/memcmp.o differ
diff --git a/build/user/lib/libc/memcpy.o b/build/user/lib/libc/memcpy.o
new file mode 100644
index 0000000..05cf4f1
Binary files /dev/null and b/build/user/lib/libc/memcpy.o differ
diff --git a/build/user/lib/libc/memmove.o b/build/user/lib/libc/memmove.o
new file mode 100644
index 0000000..f02dfbe
Binary files /dev/null and b/build/user/lib/libc/memmove.o differ
diff --git a/build/user/lib/libc/memset.o b/build/user/lib/libc/memset.o
new file mode 100644
index 0000000..f8e60be
Binary files /dev/null and b/build/user/lib/libc/memset.o differ
diff --git a/build/user/lib/libc/moddi3.o b/build/user/lib/libc/moddi3.o
new file mode 100644
index 0000000..bc3bb1d
Binary files /dev/null and b/build/user/lib/libc/moddi3.o differ
diff --git a/build/user/lib/libc/muldi3.o b/build/user/lib/libc/muldi3.o
new file mode 100644
index 0000000..cc694e5
Binary files /dev/null and b/build/user/lib/libc/muldi3.o differ
diff --git a/build/user/lib/libc/negdi2.o b/build/user/lib/libc/negdi2.o
new file mode 100644
index 0000000..a1603fd
Binary files /dev/null and b/build/user/lib/libc/negdi2.o differ
diff --git a/build/user/lib/libc/notdi2.o b/build/user/lib/libc/notdi2.o
new file mode 100644
index 0000000..3731fe8
Binary files /dev/null and b/build/user/lib/libc/notdi2.o differ
diff --git a/build/user/lib/libc/printf.o b/build/user/lib/libc/printf.o
new file mode 100644
index 0000000..85e4de4
Binary files /dev/null and b/build/user/lib/libc/printf.o differ
diff --git a/build/user/lib/libc/putchar.o b/build/user/lib/libc/putchar.o
new file mode 100644
index 0000000..c3d7ea0
Binary files /dev/null and b/build/user/lib/libc/putchar.o differ
diff --git a/build/user/lib/libc/puts.o b/build/user/lib/libc/puts.o
new file mode 100644
index 0000000..c963fcf
Binary files /dev/null and b/build/user/lib/libc/puts.o differ
diff --git a/build/user/lib/libc/qdivrem.o b/build/user/lib/libc/qdivrem.o
new file mode 100644
index 0000000..824ca14
Binary files /dev/null and b/build/user/lib/libc/qdivrem.o differ
diff --git a/build/user/lib/libc/random.o b/build/user/lib/libc/random.o
new file mode 100644
index 0000000..5faa5cc
Binary files /dev/null and b/build/user/lib/libc/random.o differ
diff --git a/build/user/lib/libc/setjmp.o b/build/user/lib/libc/setjmp.o
new file mode 100644
index 0000000..edcfb2e
Binary files /dev/null and b/build/user/lib/libc/setjmp.o differ
diff --git a/build/user/lib/libc/snprintf.o b/build/user/lib/libc/snprintf.o
new file mode 100644
index 0000000..30277e9
Binary files /dev/null and b/build/user/lib/libc/snprintf.o differ
diff --git a/build/user/lib/libc/strcat.o b/build/user/lib/libc/strcat.o
new file mode 100644
index 0000000..23a5edc
Binary files /dev/null and b/build/user/lib/libc/strcat.o differ
diff --git a/build/user/lib/libc/strchr.o b/build/user/lib/libc/strchr.o
new file mode 100644
index 0000000..1eec95e
Binary files /dev/null and b/build/user/lib/libc/strchr.o differ
diff --git a/build/user/lib/libc/strcmp.o b/build/user/lib/libc/strcmp.o
new file mode 100644
index 0000000..4bbd003
Binary files /dev/null and b/build/user/lib/libc/strcmp.o differ
diff --git a/build/user/lib/libc/strcpy.o b/build/user/lib/libc/strcpy.o
new file mode 100644
index 0000000..9f69652
Binary files /dev/null and b/build/user/lib/libc/strcpy.o differ
diff --git a/build/user/lib/libc/strerror.o b/build/user/lib/libc/strerror.o
new file mode 100644
index 0000000..7beeb62
Binary files /dev/null and b/build/user/lib/libc/strerror.o differ
diff --git a/build/user/lib/libc/strlen.o b/build/user/lib/libc/strlen.o
new file mode 100644
index 0000000..0a9b696
Binary files /dev/null and b/build/user/lib/libc/strlen.o differ
diff --git a/build/user/lib/libc/strrchr.o b/build/user/lib/libc/strrchr.o
new file mode 100644
index 0000000..083d0e9
Binary files /dev/null and b/build/user/lib/libc/strrchr.o differ
diff --git a/build/user/lib/libc/strtok.o b/build/user/lib/libc/strtok.o
new file mode 100644
index 0000000..f8299db
Binary files /dev/null and b/build/user/lib/libc/strtok.o differ
diff --git a/build/user/lib/libc/strtok_r.o b/build/user/lib/libc/strtok_r.o
new file mode 100644
index 0000000..d04733a
Binary files /dev/null and b/build/user/lib/libc/strtok_r.o differ
diff --git a/build/user/lib/libc/subdi3.o b/build/user/lib/libc/subdi3.o
new file mode 100644
index 0000000..bf99c66
Binary files /dev/null and b/build/user/lib/libc/subdi3.o differ
diff --git a/build/user/lib/libc/syscalls.S b/build/user/lib/libc/syscalls.S
new file mode 100644
index 0000000..7dd071f
--- /dev/null
+++ b/build/user/lib/libc/syscalls.S
@@ -0,0 +1,182 @@
+/* Automatically generated; do not edit */
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/*
+ * This file is copied to syscalls.S, and then the actual syscalls are
+ * appended as lines of the form
+ *    SYSCALL(symbol, number)
+ *
+ * Warning: gccs before 3.0 run cpp in -traditional mode on .S files.
+ * So if you use an older gcc you'll need to change the token pasting
+ * in SYSCALL().
+ */
+
+#include <kern/syscall.h>
+#include <machine/regdefs.h>
+
+/*
+ * Definition for each syscall.
+ * All we do is load the syscall number into v0, the register the
+ * kernel expects to find it in, and jump to the shared syscall code.
+ * (Note that the addiu instruction is in the jump's delay slot.)
+ */    
+#define SYSCALL(sym, num) \
+   .set noreorder		; \
+   .globl sym			; \
+   .type sym,@function		; \
+   .ent sym			; \
+sym:				; \
+   j __syscall                  ; \
+   addiu v0, $0, SYS_##sym	; \
+   .end sym			; \
+   .set reorder
+
+/*
+ * Now, the shared system call code.
+ * The MIPS syscall ABI is as follows:	
+ *
+ *    On entry, call number in v0. The rest is like a normal function
+ *    call: four args in a0-a3, the other args on the stack.
+ *
+ *    On successful return, zero in a3 register; return value in v0
+ *    (v0 and v1 for a 64-bit return value).
+ *
+ *    On error return, nonzero in a3 register; errno value in v0.
+ *
+ * The use of a3 as a return register to hold the success flag is
+ * gross, but I didn't make it up.
+ *
+ * Note that by longstanding Unix convention and POSIX decree, errno
+ * is not to be set unless the call actually fails.
+ */
+
+   .set noreorder
+   .text
+   .type __syscall,@function
+   .ent __syscall
+__syscall:
+   syscall              /* make system call */
+   beq a3, $0, 1f       /* if a3 is zero, call succeeded */
+   nop			/* delay slot */
+   sw v0, errno        /* call failed: store errno */
+   li v1, -1		/* and force return value to -1 */
+   li v0, -1
+1:
+   j ra			/* return */
+   nop			/* delay slot */
+   .end __syscall
+   .set reorder
+
+SYSCALL(fork, 0)
+SYSCALL(vfork, 1)
+SYSCALL(execv, 2)
+SYSCALL(_exit, 3)
+SYSCALL(waitpid, 4)
+SYSCALL(getpid, 5)
+SYSCALL(getppid, 6)
+SYSCALL(sbrk, 7)
+SYSCALL(mmap, 8)
+SYSCALL(munmap, 9)
+SYSCALL(mprotect, 10)
+SYSCALL(umask, 17)
+SYSCALL(issetugid, 18)
+SYSCALL(getresuid, 19)
+SYSCALL(setresuid, 20)
+SYSCALL(getresgid, 21)
+SYSCALL(setresgid, 22)
+SYSCALL(getgroups, 23)
+SYSCALL(setgroups, 24)
+SYSCALL(__getlogin, 25)
+SYSCALL(__setlogin, 26)
+SYSCALL(kill, 27)
+SYSCALL(sigaction, 28)
+SYSCALL(sigpending, 29)
+SYSCALL(sigprocmask, 30)
+SYSCALL(sigsuspend, 31)
+SYSCALL(sigreturn, 32)
+SYSCALL(open, 45)
+SYSCALL(pipe, 46)
+SYSCALL(dup, 47)
+SYSCALL(dup2, 48)
+SYSCALL(close, 49)
+SYSCALL(read, 50)
+SYSCALL(pread, 51)
+SYSCALL(getdirentry, 54)
+SYSCALL(write, 55)
+SYSCALL(pwrite, 56)
+SYSCALL(lseek, 59)
+SYSCALL(flock, 60)
+SYSCALL(ftruncate, 61)
+SYSCALL(fsync, 62)
+SYSCALL(fcntl, 63)
+SYSCALL(ioctl, 64)
+SYSCALL(select, 65)
+SYSCALL(poll, 66)
+SYSCALL(link, 67)
+SYSCALL(remove, 68)
+SYSCALL(mkdir, 69)
+SYSCALL(rmdir, 70)
+SYSCALL(mkfifo, 71)
+SYSCALL(rename, 72)
+SYSCALL(access, 73)
+SYSCALL(chdir, 74)
+SYSCALL(fchdir, 75)
+SYSCALL(__getcwd, 76)
+SYSCALL(symlink, 77)
+SYSCALL(readlink, 78)
+SYSCALL(mount, 79)
+SYSCALL(unmount, 80)
+SYSCALL(stat, 81)
+SYSCALL(fstat, 82)
+SYSCALL(lstat, 83)
+SYSCALL(utimes, 84)
+SYSCALL(futimes, 85)
+SYSCALL(lutimes, 86)
+SYSCALL(chmod, 87)
+SYSCALL(chown, 88)
+SYSCALL(fchmod, 89)
+SYSCALL(fchown, 90)
+SYSCALL(lchmod, 91)
+SYSCALL(lchown, 92)
+SYSCALL(socket, 98)
+SYSCALL(bind, 99)
+SYSCALL(connect, 100)
+SYSCALL(listen, 101)
+SYSCALL(accept, 102)
+SYSCALL(shutdown, 104)
+SYSCALL(getsockname, 105)
+SYSCALL(getpeername, 106)
+SYSCALL(getsockopt, 107)
+SYSCALL(setsockopt, 108)
+SYSCALL(__time, 113)
+SYSCALL(__settime, 114)
+SYSCALL(nanosleep, 115)
+SYSCALL(sync, 118)
+SYSCALL(reboot, 119)
diff --git a/build/user/lib/libc/syscalls.o b/build/user/lib/libc/syscalls.o
new file mode 100644
index 0000000..ae79814
Binary files /dev/null and b/build/user/lib/libc/syscalls.o differ
diff --git a/build/user/lib/libc/system.o b/build/user/lib/libc/system.o
new file mode 100644
index 0000000..8e541b2
Binary files /dev/null and b/build/user/lib/libc/system.o differ
diff --git a/build/user/lib/libc/time.o b/build/user/lib/libc/time.o
new file mode 100644
index 0000000..af4218e
Binary files /dev/null and b/build/user/lib/libc/time.o differ
diff --git a/build/user/lib/libc/ucmpdi2.o b/build/user/lib/libc/ucmpdi2.o
new file mode 100644
index 0000000..4cfa305
Binary files /dev/null and b/build/user/lib/libc/ucmpdi2.o differ
diff --git a/build/user/lib/libc/udivdi3.o b/build/user/lib/libc/udivdi3.o
new file mode 100644
index 0000000..b17835e
Binary files /dev/null and b/build/user/lib/libc/udivdi3.o differ
diff --git a/build/user/lib/libc/umoddi3.o b/build/user/lib/libc/umoddi3.o
new file mode 100644
index 0000000..a8219e1
Binary files /dev/null and b/build/user/lib/libc/umoddi3.o differ
diff --git a/build/user/lib/libc/xordi3.o b/build/user/lib/libc/xordi3.o
new file mode 100644
index 0000000..1a5522b
Binary files /dev/null and b/build/user/lib/libc/xordi3.o differ
diff --git a/build/user/sbin/dumpsfs/disk.ho b/build/user/sbin/dumpsfs/disk.ho
new file mode 100644
index 0000000..f40ad4b
Binary files /dev/null and b/build/user/sbin/dumpsfs/disk.ho differ
diff --git a/build/user/sbin/dumpsfs/disk.o b/build/user/sbin/dumpsfs/disk.o
new file mode 100644
index 0000000..f10ee8b
Binary files /dev/null and b/build/user/sbin/dumpsfs/disk.o differ
diff --git a/build/user/sbin/dumpsfs/dumpsfs b/build/user/sbin/dumpsfs/dumpsfs
new file mode 100755
index 0000000..7d8656e
Binary files /dev/null and b/build/user/sbin/dumpsfs/dumpsfs differ
diff --git a/build/user/sbin/dumpsfs/dumpsfs.ho b/build/user/sbin/dumpsfs/dumpsfs.ho
new file mode 100644
index 0000000..460241c
Binary files /dev/null and b/build/user/sbin/dumpsfs/dumpsfs.ho differ
diff --git a/build/user/sbin/dumpsfs/dumpsfs.o b/build/user/sbin/dumpsfs/dumpsfs.o
new file mode 100644
index 0000000..4ac6099
Binary files /dev/null and b/build/user/sbin/dumpsfs/dumpsfs.o differ
diff --git a/build/user/sbin/dumpsfs/host-dumpsfs b/build/user/sbin/dumpsfs/host-dumpsfs
new file mode 100755
index 0000000..2a6a9cb
Binary files /dev/null and b/build/user/sbin/dumpsfs/host-dumpsfs differ
diff --git a/build/user/sbin/dumpsfs/support.ho b/build/user/sbin/dumpsfs/support.ho
new file mode 100644
index 0000000..862ebe7
Binary files /dev/null and b/build/user/sbin/dumpsfs/support.ho differ
diff --git a/build/user/sbin/dumpsfs/support.o b/build/user/sbin/dumpsfs/support.o
new file mode 100644
index 0000000..2e02b08
Binary files /dev/null and b/build/user/sbin/dumpsfs/support.o differ
diff --git a/build/user/sbin/halt/halt b/build/user/sbin/halt/halt
new file mode 100755
index 0000000..430e633
Binary files /dev/null and b/build/user/sbin/halt/halt differ
diff --git a/build/user/sbin/halt/halt.o b/build/user/sbin/halt/halt.o
new file mode 100644
index 0000000..29ae698
Binary files /dev/null and b/build/user/sbin/halt/halt.o differ
diff --git a/build/user/sbin/mksfs/disk.ho b/build/user/sbin/mksfs/disk.ho
new file mode 100644
index 0000000..32737ef
Binary files /dev/null and b/build/user/sbin/mksfs/disk.ho differ
diff --git a/build/user/sbin/mksfs/disk.o b/build/user/sbin/mksfs/disk.o
new file mode 100644
index 0000000..6fbb44c
Binary files /dev/null and b/build/user/sbin/mksfs/disk.o differ
diff --git a/build/user/sbin/mksfs/host-mksfs b/build/user/sbin/mksfs/host-mksfs
new file mode 100755
index 0000000..2767a2b
Binary files /dev/null and b/build/user/sbin/mksfs/host-mksfs differ
diff --git a/build/user/sbin/mksfs/mksfs b/build/user/sbin/mksfs/mksfs
new file mode 100755
index 0000000..98b5e60
Binary files /dev/null and b/build/user/sbin/mksfs/mksfs differ
diff --git a/build/user/sbin/mksfs/mksfs.ho b/build/user/sbin/mksfs/mksfs.ho
new file mode 100644
index 0000000..75029c6
Binary files /dev/null and b/build/user/sbin/mksfs/mksfs.ho differ
diff --git a/build/user/sbin/mksfs/mksfs.o b/build/user/sbin/mksfs/mksfs.o
new file mode 100644
index 0000000..88326f8
Binary files /dev/null and b/build/user/sbin/mksfs/mksfs.o differ
diff --git a/build/user/sbin/mksfs/support.ho b/build/user/sbin/mksfs/support.ho
new file mode 100644
index 0000000..862ebe7
Binary files /dev/null and b/build/user/sbin/mksfs/support.ho differ
diff --git a/build/user/sbin/mksfs/support.o b/build/user/sbin/mksfs/support.o
new file mode 100644
index 0000000..2e02b08
Binary files /dev/null and b/build/user/sbin/mksfs/support.o differ
diff --git a/build/user/sbin/poweroff/poweroff b/build/user/sbin/poweroff/poweroff
new file mode 100755
index 0000000..066e2de
Binary files /dev/null and b/build/user/sbin/poweroff/poweroff differ
diff --git a/build/user/sbin/poweroff/poweroff.o b/build/user/sbin/poweroff/poweroff.o
new file mode 100644
index 0000000..c917051
Binary files /dev/null and b/build/user/sbin/poweroff/poweroff.o differ
diff --git a/build/user/sbin/reboot/reboot b/build/user/sbin/reboot/reboot
new file mode 100755
index 0000000..1457d72
Binary files /dev/null and b/build/user/sbin/reboot/reboot differ
diff --git a/build/user/sbin/reboot/reboot.o b/build/user/sbin/reboot/reboot.o
new file mode 100644
index 0000000..42d00f9
Binary files /dev/null and b/build/user/sbin/reboot/reboot.o differ
diff --git a/build/user/sbin/sfsck/disk.ho b/build/user/sbin/sfsck/disk.ho
new file mode 100644
index 0000000..f40ad4b
Binary files /dev/null and b/build/user/sbin/sfsck/disk.ho differ
diff --git a/build/user/sbin/sfsck/disk.o b/build/user/sbin/sfsck/disk.o
new file mode 100644
index 0000000..f10ee8b
Binary files /dev/null and b/build/user/sbin/sfsck/disk.o differ
diff --git a/build/user/sbin/sfsck/host-sfsck b/build/user/sbin/sfsck/host-sfsck
new file mode 100755
index 0000000..c8630d7
Binary files /dev/null and b/build/user/sbin/sfsck/host-sfsck differ
diff --git a/build/user/sbin/sfsck/sfsck b/build/user/sbin/sfsck/sfsck
new file mode 100755
index 0000000..9369f03
Binary files /dev/null and b/build/user/sbin/sfsck/sfsck differ
diff --git a/build/user/sbin/sfsck/sfsck.ho b/build/user/sbin/sfsck/sfsck.ho
new file mode 100644
index 0000000..a1157c2
Binary files /dev/null and b/build/user/sbin/sfsck/sfsck.ho differ
diff --git a/build/user/sbin/sfsck/sfsck.o b/build/user/sbin/sfsck/sfsck.o
new file mode 100644
index 0000000..87d0522
Binary files /dev/null and b/build/user/sbin/sfsck/sfsck.o differ
diff --git a/build/user/sbin/sfsck/support.ho b/build/user/sbin/sfsck/support.ho
new file mode 100644
index 0000000..862ebe7
Binary files /dev/null and b/build/user/sbin/sfsck/support.ho differ
diff --git a/build/user/sbin/sfsck/support.o b/build/user/sbin/sfsck/support.o
new file mode 100644
index 0000000..2e02b08
Binary files /dev/null and b/build/user/sbin/sfsck/support.o differ
diff --git a/build/user/testbin/add/add b/build/user/testbin/add/add
new file mode 100755
index 0000000..fbfb4b6
Binary files /dev/null and b/build/user/testbin/add/add differ
diff --git a/build/user/testbin/add/add.o b/build/user/testbin/add/add.o
new file mode 100644
index 0000000..72103f1
Binary files /dev/null and b/build/user/testbin/add/add.o differ
diff --git a/build/user/testbin/argtest/argtest b/build/user/testbin/argtest/argtest
new file mode 100755
index 0000000..c1ba2a9
Binary files /dev/null and b/build/user/testbin/argtest/argtest differ
diff --git a/build/user/testbin/argtest/argtest.o b/build/user/testbin/argtest/argtest.o
new file mode 100644
index 0000000..1b39499
Binary files /dev/null and b/build/user/testbin/argtest/argtest.o differ
diff --git a/build/user/testbin/badcall/bad_chdir.o b/build/user/testbin/badcall/bad_chdir.o
new file mode 100644
index 0000000..0dddf1f
Binary files /dev/null and b/build/user/testbin/badcall/bad_chdir.o differ
diff --git a/build/user/testbin/badcall/bad_close.o b/build/user/testbin/badcall/bad_close.o
new file mode 100644
index 0000000..17884ba
Binary files /dev/null and b/build/user/testbin/badcall/bad_close.o differ
diff --git a/build/user/testbin/badcall/bad_dup2.o b/build/user/testbin/badcall/bad_dup2.o
new file mode 100644
index 0000000..4a28b71
Binary files /dev/null and b/build/user/testbin/badcall/bad_dup2.o differ
diff --git a/build/user/testbin/badcall/bad_execv.o b/build/user/testbin/badcall/bad_execv.o
new file mode 100644
index 0000000..956ab93
Binary files /dev/null and b/build/user/testbin/badcall/bad_execv.o differ
diff --git a/build/user/testbin/badcall/bad_fsync.o b/build/user/testbin/badcall/bad_fsync.o
new file mode 100644
index 0000000..1bf14fa
Binary files /dev/null and b/build/user/testbin/badcall/bad_fsync.o differ
diff --git a/build/user/testbin/badcall/bad_ftruncate.o b/build/user/testbin/badcall/bad_ftruncate.o
new file mode 100644
index 0000000..8c4ebe2
Binary files /dev/null and b/build/user/testbin/badcall/bad_ftruncate.o differ
diff --git a/build/user/testbin/badcall/bad_getcwd.o b/build/user/testbin/badcall/bad_getcwd.o
new file mode 100644
index 0000000..add4ffa
Binary files /dev/null and b/build/user/testbin/badcall/bad_getcwd.o differ
diff --git a/build/user/testbin/badcall/bad_getdirentry.o b/build/user/testbin/badcall/bad_getdirentry.o
new file mode 100644
index 0000000..3fcb479
Binary files /dev/null and b/build/user/testbin/badcall/bad_getdirentry.o differ
diff --git a/build/user/testbin/badcall/bad_ioctl.o b/build/user/testbin/badcall/bad_ioctl.o
new file mode 100644
index 0000000..968e77f
Binary files /dev/null and b/build/user/testbin/badcall/bad_ioctl.o differ
diff --git a/build/user/testbin/badcall/bad_link.o b/build/user/testbin/badcall/bad_link.o
new file mode 100644
index 0000000..9ba92b8
Binary files /dev/null and b/build/user/testbin/badcall/bad_link.o differ
diff --git a/build/user/testbin/badcall/bad_lseek.o b/build/user/testbin/badcall/bad_lseek.o
new file mode 100644
index 0000000..70dcc96
Binary files /dev/null and b/build/user/testbin/badcall/bad_lseek.o differ
diff --git a/build/user/testbin/badcall/bad_mkdir.o b/build/user/testbin/badcall/bad_mkdir.o
new file mode 100644
index 0000000..273fc9f
Binary files /dev/null and b/build/user/testbin/badcall/bad_mkdir.o differ
diff --git a/build/user/testbin/badcall/bad_open.o b/build/user/testbin/badcall/bad_open.o
new file mode 100644
index 0000000..4cfb2ee
Binary files /dev/null and b/build/user/testbin/badcall/bad_open.o differ
diff --git a/build/user/testbin/badcall/bad_pipe.o b/build/user/testbin/badcall/bad_pipe.o
new file mode 100644
index 0000000..13d4ec7
Binary files /dev/null and b/build/user/testbin/badcall/bad_pipe.o differ
diff --git a/build/user/testbin/badcall/bad_read.o b/build/user/testbin/badcall/bad_read.o
new file mode 100644
index 0000000..57bbd9b
Binary files /dev/null and b/build/user/testbin/badcall/bad_read.o differ
diff --git a/build/user/testbin/badcall/bad_readlink.o b/build/user/testbin/badcall/bad_readlink.o
new file mode 100644
index 0000000..c4064ff
Binary files /dev/null and b/build/user/testbin/badcall/bad_readlink.o differ
diff --git a/build/user/testbin/badcall/bad_reboot.o b/build/user/testbin/badcall/bad_reboot.o
new file mode 100644
index 0000000..3738b50
Binary files /dev/null and b/build/user/testbin/badcall/bad_reboot.o differ
diff --git a/build/user/testbin/badcall/bad_remove.o b/build/user/testbin/badcall/bad_remove.o
new file mode 100644
index 0000000..996ea5f
Binary files /dev/null and b/build/user/testbin/badcall/bad_remove.o differ
diff --git a/build/user/testbin/badcall/bad_rename.o b/build/user/testbin/badcall/bad_rename.o
new file mode 100644
index 0000000..ab14078
Binary files /dev/null and b/build/user/testbin/badcall/bad_rename.o differ
diff --git a/build/user/testbin/badcall/bad_rmdir.o b/build/user/testbin/badcall/bad_rmdir.o
new file mode 100644
index 0000000..b062f1f
Binary files /dev/null and b/build/user/testbin/badcall/bad_rmdir.o differ
diff --git a/build/user/testbin/badcall/bad_sbrk.o b/build/user/testbin/badcall/bad_sbrk.o
new file mode 100644
index 0000000..d2ff4a2
Binary files /dev/null and b/build/user/testbin/badcall/bad_sbrk.o differ
diff --git a/build/user/testbin/badcall/bad_stat.o b/build/user/testbin/badcall/bad_stat.o
new file mode 100644
index 0000000..b33ebbb
Binary files /dev/null and b/build/user/testbin/badcall/bad_stat.o differ
diff --git a/build/user/testbin/badcall/bad_symlink.o b/build/user/testbin/badcall/bad_symlink.o
new file mode 100644
index 0000000..1f68c61
Binary files /dev/null and b/build/user/testbin/badcall/bad_symlink.o differ
diff --git a/build/user/testbin/badcall/bad_time.o b/build/user/testbin/badcall/bad_time.o
new file mode 100644
index 0000000..bac4fa9
Binary files /dev/null and b/build/user/testbin/badcall/bad_time.o differ
diff --git a/build/user/testbin/badcall/bad_waitpid.o b/build/user/testbin/badcall/bad_waitpid.o
new file mode 100644
index 0000000..a64f980
Binary files /dev/null and b/build/user/testbin/badcall/bad_waitpid.o differ
diff --git a/build/user/testbin/badcall/bad_write.o b/build/user/testbin/badcall/bad_write.o
new file mode 100644
index 0000000..3a6f6cf
Binary files /dev/null and b/build/user/testbin/badcall/bad_write.o differ
diff --git a/build/user/testbin/badcall/badcall b/build/user/testbin/badcall/badcall
new file mode 100755
index 0000000..327fe2e
Binary files /dev/null and b/build/user/testbin/badcall/badcall differ
diff --git a/build/user/testbin/badcall/common_buf.o b/build/user/testbin/badcall/common_buf.o
new file mode 100644
index 0000000..8351024
Binary files /dev/null and b/build/user/testbin/badcall/common_buf.o differ
diff --git a/build/user/testbin/badcall/common_fds.o b/build/user/testbin/badcall/common_fds.o
new file mode 100644
index 0000000..f53e13b
Binary files /dev/null and b/build/user/testbin/badcall/common_fds.o differ
diff --git a/build/user/testbin/badcall/common_path.o b/build/user/testbin/badcall/common_path.o
new file mode 100644
index 0000000..b42c6c3
Binary files /dev/null and b/build/user/testbin/badcall/common_path.o differ
diff --git a/build/user/testbin/badcall/driver.o b/build/user/testbin/badcall/driver.o
new file mode 100644
index 0000000..551d458
Binary files /dev/null and b/build/user/testbin/badcall/driver.o differ
diff --git a/build/user/testbin/bigfile/bigfile b/build/user/testbin/bigfile/bigfile
new file mode 100755
index 0000000..cae0d2b
Binary files /dev/null and b/build/user/testbin/bigfile/bigfile differ
diff --git a/build/user/testbin/bigfile/bigfile.o b/build/user/testbin/bigfile/bigfile.o
new file mode 100644
index 0000000..e54b9e6
Binary files /dev/null and b/build/user/testbin/bigfile/bigfile.o differ
diff --git a/build/user/testbin/conman/conman b/build/user/testbin/conman/conman
new file mode 100755
index 0000000..ddda3e9
Binary files /dev/null and b/build/user/testbin/conman/conman differ
diff --git a/build/user/testbin/conman/conman.o b/build/user/testbin/conman/conman.o
new file mode 100644
index 0000000..468b297
Binary files /dev/null and b/build/user/testbin/conman/conman.o differ
diff --git a/build/user/testbin/crash/crash b/build/user/testbin/crash/crash
new file mode 100755
index 0000000..f692c69
Binary files /dev/null and b/build/user/testbin/crash/crash differ
diff --git a/build/user/testbin/crash/crash.o b/build/user/testbin/crash/crash.o
new file mode 100644
index 0000000..35b5fe3
Binary files /dev/null and b/build/user/testbin/crash/crash.o differ
diff --git a/build/user/testbin/ctest/ctest b/build/user/testbin/ctest/ctest
new file mode 100755
index 0000000..c0aaf34
Binary files /dev/null and b/build/user/testbin/ctest/ctest differ
diff --git a/build/user/testbin/ctest/ctest.o b/build/user/testbin/ctest/ctest.o
new file mode 100644
index 0000000..6ee7aa9
Binary files /dev/null and b/build/user/testbin/ctest/ctest.o differ
diff --git a/build/user/testbin/dirconc/dirconc b/build/user/testbin/dirconc/dirconc
new file mode 100755
index 0000000..eddbb8b
Binary files /dev/null and b/build/user/testbin/dirconc/dirconc differ
diff --git a/build/user/testbin/dirconc/dirconc.o b/build/user/testbin/dirconc/dirconc.o
new file mode 100644
index 0000000..b52ce66
Binary files /dev/null and b/build/user/testbin/dirconc/dirconc.o differ
diff --git a/build/user/testbin/dirseek/dirseek b/build/user/testbin/dirseek/dirseek
new file mode 100755
index 0000000..db1d140
Binary files /dev/null and b/build/user/testbin/dirseek/dirseek differ
diff --git a/build/user/testbin/dirseek/dirseek.o b/build/user/testbin/dirseek/dirseek.o
new file mode 100644
index 0000000..8e9c8d9
Binary files /dev/null and b/build/user/testbin/dirseek/dirseek.o differ
diff --git a/build/user/testbin/dirtest/dirtest b/build/user/testbin/dirtest/dirtest
new file mode 100755
index 0000000..d62fd59
Binary files /dev/null and b/build/user/testbin/dirtest/dirtest differ
diff --git a/build/user/testbin/dirtest/dirtest.o b/build/user/testbin/dirtest/dirtest.o
new file mode 100644
index 0000000..2dd5a01
Binary files /dev/null and b/build/user/testbin/dirtest/dirtest.o differ
diff --git a/build/user/testbin/f_test/f_read.o b/build/user/testbin/f_test/f_read.o
new file mode 100644
index 0000000..fdb6d0b
Binary files /dev/null and b/build/user/testbin/f_test/f_read.o differ
diff --git a/build/user/testbin/f_test/f_test b/build/user/testbin/f_test/f_test
new file mode 100755
index 0000000..35bd66f
Binary files /dev/null and b/build/user/testbin/f_test/f_test differ
diff --git a/build/user/testbin/f_test/f_test.o b/build/user/testbin/f_test/f_test.o
new file mode 100644
index 0000000..94482d8
Binary files /dev/null and b/build/user/testbin/f_test/f_test.o differ
diff --git a/build/user/testbin/f_test/f_write.o b/build/user/testbin/f_test/f_write.o
new file mode 100644
index 0000000..1cf4d6f
Binary files /dev/null and b/build/user/testbin/f_test/f_write.o differ
diff --git a/build/user/testbin/farm/farm b/build/user/testbin/farm/farm
new file mode 100755
index 0000000..6e6ea1b
Binary files /dev/null and b/build/user/testbin/farm/farm differ
diff --git a/build/user/testbin/farm/farm.o b/build/user/testbin/farm/farm.o
new file mode 100644
index 0000000..8376493
Binary files /dev/null and b/build/user/testbin/farm/farm.o differ
diff --git a/build/user/testbin/faulter/faulter b/build/user/testbin/faulter/faulter
new file mode 100755
index 0000000..a462c1d
Binary files /dev/null and b/build/user/testbin/faulter/faulter differ
diff --git a/build/user/testbin/faulter/faulter.o b/build/user/testbin/faulter/faulter.o
new file mode 100644
index 0000000..9d2fd2c
Binary files /dev/null and b/build/user/testbin/faulter/faulter.o differ
diff --git a/build/user/testbin/filetest/filetest b/build/user/testbin/filetest/filetest
new file mode 100755
index 0000000..8f72bef
Binary files /dev/null and b/build/user/testbin/filetest/filetest differ
diff --git a/build/user/testbin/filetest/filetest.o b/build/user/testbin/filetest/filetest.o
new file mode 100644
index 0000000..99e1461
Binary files /dev/null and b/build/user/testbin/filetest/filetest.o differ
diff --git a/build/user/testbin/forkbomb/forkbomb b/build/user/testbin/forkbomb/forkbomb
new file mode 100755
index 0000000..eb3ec11
Binary files /dev/null and b/build/user/testbin/forkbomb/forkbomb differ
diff --git a/build/user/testbin/forkbomb/forkbomb.o b/build/user/testbin/forkbomb/forkbomb.o
new file mode 100644
index 0000000..a53ba2f
Binary files /dev/null and b/build/user/testbin/forkbomb/forkbomb.o differ
diff --git a/build/user/testbin/forktest/forktest b/build/user/testbin/forktest/forktest
new file mode 100755
index 0000000..3e43cd4
Binary files /dev/null and b/build/user/testbin/forktest/forktest differ
diff --git a/build/user/testbin/forktest/forktest.o b/build/user/testbin/forktest/forktest.o
new file mode 100644
index 0000000..2cc721c
Binary files /dev/null and b/build/user/testbin/forktest/forktest.o differ
diff --git a/build/user/testbin/guzzle/guzzle b/build/user/testbin/guzzle/guzzle
new file mode 100755
index 0000000..443defc
Binary files /dev/null and b/build/user/testbin/guzzle/guzzle differ
diff --git a/build/user/testbin/guzzle/guzzle.o b/build/user/testbin/guzzle/guzzle.o
new file mode 100644
index 0000000..454753a
Binary files /dev/null and b/build/user/testbin/guzzle/guzzle.o differ
diff --git a/build/user/testbin/hash/hash b/build/user/testbin/hash/hash
new file mode 100755
index 0000000..548251e
Binary files /dev/null and b/build/user/testbin/hash/hash differ
diff --git a/build/user/testbin/hash/hash.ho b/build/user/testbin/hash/hash.ho
new file mode 100644
index 0000000..2c07929
Binary files /dev/null and b/build/user/testbin/hash/hash.ho differ
diff --git a/build/user/testbin/hash/hash.o b/build/user/testbin/hash/hash.o
new file mode 100644
index 0000000..6cdad3b
Binary files /dev/null and b/build/user/testbin/hash/hash.o differ
diff --git a/build/user/testbin/hash/host-hash b/build/user/testbin/hash/host-hash
new file mode 100755
index 0000000..89e30d7
Binary files /dev/null and b/build/user/testbin/hash/host-hash differ
diff --git a/build/user/testbin/hog/hog b/build/user/testbin/hog/hog
new file mode 100755
index 0000000..cb68ef4
Binary files /dev/null and b/build/user/testbin/hog/hog differ
diff --git a/build/user/testbin/hog/hog.o b/build/user/testbin/hog/hog.o
new file mode 100644
index 0000000..baaa6b0
Binary files /dev/null and b/build/user/testbin/hog/hog.o differ
diff --git a/build/user/testbin/huge/huge b/build/user/testbin/huge/huge
new file mode 100755
index 0000000..8514625
Binary files /dev/null and b/build/user/testbin/huge/huge differ
diff --git a/build/user/testbin/huge/huge.o b/build/user/testbin/huge/huge.o
new file mode 100644
index 0000000..a4d8ef2
Binary files /dev/null and b/build/user/testbin/huge/huge.o differ
diff --git a/build/user/testbin/kitchen/kitchen b/build/user/testbin/kitchen/kitchen
new file mode 100755
index 0000000..00e3b18
Binary files /dev/null and b/build/user/testbin/kitchen/kitchen differ
diff --git a/build/user/testbin/kitchen/kitchen.o b/build/user/testbin/kitchen/kitchen.o
new file mode 100644
index 0000000..680a73a
Binary files /dev/null and b/build/user/testbin/kitchen/kitchen.o differ
diff --git a/build/user/testbin/malloctest/malloctest b/build/user/testbin/malloctest/malloctest
new file mode 100755
index 0000000..850f2aa
Binary files /dev/null and b/build/user/testbin/malloctest/malloctest differ
diff --git a/build/user/testbin/malloctest/malloctest.o b/build/user/testbin/malloctest/malloctest.o
new file mode 100644
index 0000000..4952f27
Binary files /dev/null and b/build/user/testbin/malloctest/malloctest.o differ
diff --git a/build/user/testbin/matmult/matmult b/build/user/testbin/matmult/matmult
new file mode 100755
index 0000000..4a1f89a
Binary files /dev/null and b/build/user/testbin/matmult/matmult differ
diff --git a/build/user/testbin/matmult/matmult.o b/build/user/testbin/matmult/matmult.o
new file mode 100644
index 0000000..c12c477
Binary files /dev/null and b/build/user/testbin/matmult/matmult.o differ
diff --git a/build/user/testbin/palin/palin b/build/user/testbin/palin/palin
new file mode 100755
index 0000000..802f68c
Binary files /dev/null and b/build/user/testbin/palin/palin differ
diff --git a/build/user/testbin/palin/palin.o b/build/user/testbin/palin/palin.o
new file mode 100644
index 0000000..c16bf85
Binary files /dev/null and b/build/user/testbin/palin/palin.o differ
diff --git a/build/user/testbin/parallelvm/parallelvm b/build/user/testbin/parallelvm/parallelvm
new file mode 100755
index 0000000..6d4a3e9
Binary files /dev/null and b/build/user/testbin/parallelvm/parallelvm differ
diff --git a/build/user/testbin/parallelvm/parallelvm.o b/build/user/testbin/parallelvm/parallelvm.o
new file mode 100644
index 0000000..40bc54b
Binary files /dev/null and b/build/user/testbin/parallelvm/parallelvm.o differ
diff --git a/build/user/testbin/psort/host-psort b/build/user/testbin/psort/host-psort
new file mode 100755
index 0000000..ef3c144
Binary files /dev/null and b/build/user/testbin/psort/host-psort differ
diff --git a/build/user/testbin/psort/psort b/build/user/testbin/psort/psort
new file mode 100755
index 0000000..48eae77
Binary files /dev/null and b/build/user/testbin/psort/psort differ
diff --git a/build/user/testbin/psort/psort.ho b/build/user/testbin/psort/psort.ho
new file mode 100644
index 0000000..822a6ec
Binary files /dev/null and b/build/user/testbin/psort/psort.ho differ
diff --git a/build/user/testbin/psort/psort.o b/build/user/testbin/psort/psort.o
new file mode 100644
index 0000000..fac4008
Binary files /dev/null and b/build/user/testbin/psort/psort.o differ
diff --git a/build/user/testbin/randcall/calls.o b/build/user/testbin/randcall/calls.o
new file mode 100644
index 0000000..35d2deb
Binary files /dev/null and b/build/user/testbin/randcall/calls.o differ
diff --git a/build/user/testbin/randcall/main.o b/build/user/testbin/randcall/main.o
new file mode 100644
index 0000000..fe2000d
Binary files /dev/null and b/build/user/testbin/randcall/main.o differ
diff --git a/build/user/testbin/randcall/randcall b/build/user/testbin/randcall/randcall
new file mode 100755
index 0000000..8ffedd7
Binary files /dev/null and b/build/user/testbin/randcall/randcall differ
diff --git a/build/user/testbin/rmdirtest/rmdirtest b/build/user/testbin/rmdirtest/rmdirtest
new file mode 100755
index 0000000..ac3141e
Binary files /dev/null and b/build/user/testbin/rmdirtest/rmdirtest differ
diff --git a/build/user/testbin/rmdirtest/rmdirtest.o b/build/user/testbin/rmdirtest/rmdirtest.o
new file mode 100644
index 0000000..cf48627
Binary files /dev/null and b/build/user/testbin/rmdirtest/rmdirtest.o differ
diff --git a/build/user/testbin/rmtest/rmtest b/build/user/testbin/rmtest/rmtest
new file mode 100755
index 0000000..3105701
Binary files /dev/null and b/build/user/testbin/rmtest/rmtest differ
diff --git a/build/user/testbin/rmtest/rmtest.o b/build/user/testbin/rmtest/rmtest.o
new file mode 100644
index 0000000..73867c0
Binary files /dev/null and b/build/user/testbin/rmtest/rmtest.o differ
diff --git a/build/user/testbin/sink/sink b/build/user/testbin/sink/sink
new file mode 100755
index 0000000..a4f3cdf
Binary files /dev/null and b/build/user/testbin/sink/sink differ
diff --git a/build/user/testbin/sink/sink.o b/build/user/testbin/sink/sink.o
new file mode 100644
index 0000000..5c262dd
Binary files /dev/null and b/build/user/testbin/sink/sink.o differ
diff --git a/build/user/testbin/sort/sort b/build/user/testbin/sort/sort
new file mode 100755
index 0000000..859fbd4
Binary files /dev/null and b/build/user/testbin/sort/sort differ
diff --git a/build/user/testbin/sort/sort.o b/build/user/testbin/sort/sort.o
new file mode 100644
index 0000000..2e82a63
Binary files /dev/null and b/build/user/testbin/sort/sort.o differ
diff --git a/build/user/testbin/sty/sty b/build/user/testbin/sty/sty
new file mode 100755
index 0000000..7d10528
Binary files /dev/null and b/build/user/testbin/sty/sty differ
diff --git a/build/user/testbin/sty/sty.o b/build/user/testbin/sty/sty.o
new file mode 100644
index 0000000..a545166
Binary files /dev/null and b/build/user/testbin/sty/sty.o differ
diff --git a/build/user/testbin/tail/tail b/build/user/testbin/tail/tail
new file mode 100755
index 0000000..f211df5
Binary files /dev/null and b/build/user/testbin/tail/tail differ
diff --git a/build/user/testbin/tail/tail.o b/build/user/testbin/tail/tail.o
new file mode 100644
index 0000000..a17f0cb
Binary files /dev/null and b/build/user/testbin/tail/tail.o differ
diff --git a/build/user/testbin/tictac/tictac b/build/user/testbin/tictac/tictac
new file mode 100755
index 0000000..b42bf03
Binary files /dev/null and b/build/user/testbin/tictac/tictac differ
diff --git a/build/user/testbin/tictac/tictac.o b/build/user/testbin/tictac/tictac.o
new file mode 100644
index 0000000..5798a2f
Binary files /dev/null and b/build/user/testbin/tictac/tictac.o differ
diff --git a/build/user/testbin/triplehuge/triple.o b/build/user/testbin/triplehuge/triple.o
new file mode 100644
index 0000000..5081be5
Binary files /dev/null and b/build/user/testbin/triplehuge/triple.o differ
diff --git a/build/user/testbin/triplehuge/triplehuge b/build/user/testbin/triplehuge/triplehuge
new file mode 100755
index 0000000..c6271df
Binary files /dev/null and b/build/user/testbin/triplehuge/triplehuge differ
diff --git a/build/user/testbin/triplehuge/triplehuge.o b/build/user/testbin/triplehuge/triplehuge.o
new file mode 100644
index 0000000..3136bab
Binary files /dev/null and b/build/user/testbin/triplehuge/triplehuge.o differ
diff --git a/build/user/testbin/triplemat/triple.o b/build/user/testbin/triplemat/triple.o
new file mode 100644
index 0000000..5081be5
Binary files /dev/null and b/build/user/testbin/triplemat/triple.o differ
diff --git a/build/user/testbin/triplemat/triplemat b/build/user/testbin/triplemat/triplemat
new file mode 100755
index 0000000..3bdb1a6
Binary files /dev/null and b/build/user/testbin/triplemat/triplemat differ
diff --git a/build/user/testbin/triplemat/triplemat.o b/build/user/testbin/triplemat/triplemat.o
new file mode 100644
index 0000000..d66017e
Binary files /dev/null and b/build/user/testbin/triplemat/triplemat.o differ
diff --git a/build/user/testbin/triplesort/triple.o b/build/user/testbin/triplesort/triple.o
new file mode 100644
index 0000000..5081be5
Binary files /dev/null and b/build/user/testbin/triplesort/triple.o differ
diff --git a/build/user/testbin/triplesort/triplesort b/build/user/testbin/triplesort/triplesort
new file mode 100755
index 0000000..53aa374
Binary files /dev/null and b/build/user/testbin/triplesort/triplesort differ
diff --git a/build/user/testbin/triplesort/triplesort.o b/build/user/testbin/triplesort/triplesort.o
new file mode 100644
index 0000000..34bcb61
Binary files /dev/null and b/build/user/testbin/triplesort/triplesort.o differ
diff --git a/defs.mk b/defs.mk
new file mode 100644
index 0000000..baed92e
--- /dev/null
+++ b/defs.mk
@@ -0,0 +1,20 @@
+# This file was generated by configure. Edits will disappear if you rerun
+# configure. If you find that you need to edit this file to make things
+# work, let the course staff know and we'll try to fix the configure script.
+#
+# The purpose of this file is to hold all the makefile definitions
+# needed to adjust the OS/161 build process to any particular
+# environment. If I've done it right, all you need to do is rerun the
+# configure script and make clean if you start working on a different
+# host OS. If I've done it mostly right, you may need to edit this
+# file but you still hopefully won't need to edit any of the
+# makefiles.
+#
+# The things that can be set here are documented in mk/os161.config.mk.
+#
+
+OSTREE=$(HOME)/cs3231/root
+PLATFORM=sys161
+MACHINE=mips
+COMPAT_CFLAGS=
+COMPAT_TARGETS=
diff --git a/kern/compile/ASST0/.depend b/kern/compile/ASST0/.depend
new file mode 100644
index 0000000..dd20612
--- /dev/null
+++ b/kern/compile/ASST0/.depend
@@ -0,0 +1,727 @@
+__printf.o: ../../../common/libc/printf/__printf.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/stdarg.h
+snprintf.o: ../../../common/libc/printf/snprintf.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/stdarg.h
+atoi.o: ../../../common/libc/stdlib/atoi.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+bzero.o: ../../../common/libc/string/bzero.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+memcpy.o: ../../../common/libc/string/memcpy.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+memmove.o: ../../../common/libc/string/memmove.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+strcat.o: ../../../common/libc/string/strcat.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+strchr.o: ../../../common/libc/string/strchr.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+strcmp.o: ../../../common/libc/string/strcmp.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+strcpy.o: ../../../common/libc/string/strcpy.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+strlen.o: ../../../common/libc/string/strlen.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+strrchr.o: ../../../common/libc/string/strrchr.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+strtok_r.o: ../../../common/libc/string/strtok_r.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+autoconf.o: ../../compile/ASST0/autoconf.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../compile/ASST0/autoconf.h
+beep.o: ../../dev/generic/beep.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../dev/generic/beep.h autoconf.h
+console.o: ../../dev/generic/console.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/uio.h ../../include/kern/iovec.h ../../include/thread.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  ../../include/synch.h ../../dev/generic/console.h ../../include/vfs.h \
+  ../../include/array.h ../../include/device.h autoconf.h
+random.o: ../../dev/generic/random.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+  ../../include/vfs.h ../../include/array.h ../../dev/generic/random.h \
+  ../../include/device.h autoconf.h
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/clock.h opt-synchprobs.h ../../dev/generic/rtclock.h \
+  autoconf.h
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h autoconf.h
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/vm.h \
+  ../../dev/lamebus/emu.h autoconf.h
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/fcntl.h ../../include/stat.h \
+  ../../include/kern/stat.h ../../include/kern/stattypes.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/array.h ../../include/uio.h ../../include/kern/iovec.h \
+  ../../include/synch.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../dev/lamebus/emu.h \
+  includelinks/platform/bus.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/threadlist.h ../../include/vfs.h ../../include/emufs.h \
+  ../../include/fs.h ../../include/vnode.h autoconf.h
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/vm.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/thread.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../dev/lamebus/lamebus.h
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  includelinks/platform/bus.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/threadlist.h ../../include/vfs.h ../../include/array.h \
+  ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lrandom.h autoconf.h
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+  includelinks/platform/bus.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h ../../dev/lamebus/lrandom.h autoconf.h
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lser.h autoconf.h
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h includelinks/platform/bus.h \
+  includelinks/machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../include/cpu.h ../../include/threadlist.h ../../dev/lamebus/lser.h \
+  autoconf.h
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/vm.h \
+  ../../dev/lamebus/ltimer.h autoconf.h
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+  opt-synchprobs.h includelinks/platform/bus.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h ../../dev/lamebus/ltimer.h autoconf.h
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/vm.h \
+  ../../dev/lamebus/ltrace.h autoconf.h
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h includelinks/platform/bus.h includelinks/machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h ../../dev/lamebus/ltrace.h autoconf.h
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+  ../../include/types.h ../../include/kern/types.h \
+  includelinks/kern/machine/types.h includelinks/machine/types.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../dev/generic/random.h ../../include/device.h \
+  ../../dev/lamebus/lrandom.h autoconf.h
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+  ../../include/types.h ../../include/kern/types.h \
+  includelinks/kern/machine/types.h includelinks/machine/types.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../dev/generic/rtclock.h ../../dev/lamebus/ltimer.h autoconf.h
+sfs_fs.o: ../../fs/sfs/sfs_fs.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/array.h ../../include/bitmap.h ../../include/uio.h \
+  ../../include/kern/iovec.h ../../include/vfs.h ../../include/device.h \
+  ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+  ../../include/kern/sfs.h
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+  ../../include/array.h ../../include/device.h ../../include/sfs.h \
+  ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h
+sfs_vnode.o: ../../fs/sfs/sfs_vnode.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/fcntl.h ../../include/stat.h \
+  ../../include/kern/stat.h ../../include/kern/stattypes.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/array.h ../../include/bitmap.h ../../include/uio.h \
+  ../../include/kern/iovec.h ../../include/synch.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/vfs.h ../../include/device.h ../../include/sfs.h \
+  ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h
+array.o: ../../lib/array.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/array.h
+bitmap.o: ../../lib/bitmap.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/bitmap.h
+bswap.o: ../../lib/bswap.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h
+kgets.o: ../../lib/kgets.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+kprintf.o: ../../lib/kprintf.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/unistd.h \
+  ../../include/stdarg.h ../../include/cdefs.h ../../include/lib.h \
+  opt-noasserts.h ../../include/spl.h ../../include/thread.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  ../../include/synch.h ../../include/mainbus.h ../../include/vfs.h \
+  ../../include/array.h
+misc.o: ../../lib/misc.c ../../include/types.h ../../include/kern/types.h \
+  includelinks/kern/machine/types.h includelinks/machine/types.h \
+  ../../include/kern/errmsg.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h
+uio.o: ../../lib/uio.c ../../include/types.h ../../include/kern/types.h \
+  includelinks/kern/machine/types.h includelinks/machine/types.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/uio.h ../../include/kern/iovec.h ../../include/thread.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  ../../include/copyinout.h
+hello.o: ../../startup/hello.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/test.h
+main.o: ../../startup/main.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/reboot.h ../../include/kern/unistd.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/spl.h ../../include/clock.h opt-synchprobs.h \
+  ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/synch.h ../../include/vm.h \
+  includelinks/machine/vm.h ../../include/mainbus.h ../../include/vfs.h \
+  ../../include/array.h ../../include/device.h ../../include/syscall.h \
+  ../../include/test.h ../../include/version.h autoconf.h
+menu.o: ../../startup/menu.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/reboot.h ../../include/kern/unistd.h \
+  ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+  ../../include/cdefs.h opt-noasserts.h ../../include/uio.h \
+  ../../include/kern/iovec.h ../../include/clock.h opt-synchprobs.h \
+  ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/vfs.h \
+  ../../include/array.h ../../include/sfs.h ../../include/fs.h \
+  ../../include/vnode.h ../../include/kern/sfs.h ../../include/syscall.h \
+  ../../include/test.h opt-synchprobs.h opt-sfs.h opt-net.h
+loadelf.o: ../../syscall/loadelf.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/uio.h ../../include/kern/iovec.h ../../include/thread.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  ../../include/addrspace.h ../../include/vm.h includelinks/machine/vm.h \
+  opt-dumbvm.h ../../include/vnode.h ../../include/elf.h \
+  includelinks/machine/elf.h
+runprogram.o: ../../syscall/runprogram.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/addrspace.h \
+  ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+  ../../include/vfs.h ../../include/array.h ../../include/syscall.h \
+  ../../include/test.h
+time_syscalls.o: ../../syscall/time_syscalls.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/clock.h opt-synchprobs.h \
+  ../../include/copyinout.h ../../include/syscall.h
+arraytest.o: ../../test/arraytest.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/array.h ../../include/test.h
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/bitmap.h ../../include/test.h
+fstest.o: ../../test/fstest.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+  ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/synch.h \
+  ../../include/vfs.h ../../include/array.h ../../include/fs.h \
+  ../../include/vnode.h ../../include/test.h
+malloctest.o: ../../test/malloctest.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/synch.h \
+  ../../include/test.h
+synchtest.o: ../../test/synchtest.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/clock.h opt-synchprobs.h \
+  ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/synch.h \
+  ../../include/test.h
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/synch.h \
+  ../../include/test.h
+tt3.o: ../../test/tt3.c ../../include/types.h ../../include/kern/types.h \
+  includelinks/kern/machine/types.h includelinks/machine/types.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/wchan.h ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/synch.h \
+  ../../include/test.h opt-synchprobs.h
+clock.o: ../../thread/clock.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/vm.h ../../include/wchan.h ../../include/clock.h \
+  opt-synchprobs.h ../../include/thread.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h
+spinlock.o: ../../thread/spinlock.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/vm.h ../../include/spl.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/thread.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h
+spl.o: ../../thread/spl.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/current.h \
+  includelinks/machine/current.h
+synch.o: ../../thread/synch.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/wchan.h \
+  ../../include/thread.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/synch.h
+thread.o: ../../thread/thread.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/array.h ../../include/cpu.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/vm.h ../../include/spl.h ../../include/wchan.h \
+  ../../include/thread.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/threadprivate.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/synch.h \
+  ../../include/addrspace.h ../../include/vm.h opt-dumbvm.h \
+  ../../include/mainbus.h ../../include/vnode.h opt-synchprobs.h
+threadlist.o: ../../thread/threadlist.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h
+device.o: ../../vfs/device.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/fcntl.h ../../include/stat.h \
+  ../../include/kern/stat.h ../../include/kern/stattypes.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/vnode.h ../../include/device.h
+devnull.o: ../../vfs/devnull.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+  ../../include/array.h ../../include/device.h
+vfscwd.o: ../../vfs/vfscwd.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/stat.h ../../include/kern/stat.h \
+  ../../include/kern/stattypes.h ../../include/lib.h \
+  ../../include/cdefs.h opt-noasserts.h ../../include/uio.h \
+  ../../include/kern/iovec.h ../../include/thread.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  ../../include/vfs.h ../../include/array.h ../../include/fs.h \
+  ../../include/vnode.h
+vfslist.o: ../../vfs/vfslist.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/array.h ../../include/synch.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/vfs.h ../../include/fs.h \
+  ../../include/vnode.h ../../include/device.h
+vfslookup.o: ../../vfs/vfslookup.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+  ../../include/cdefs.h opt-noasserts.h ../../include/synch.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/vfs.h ../../include/array.h ../../include/fs.h \
+  ../../include/vnode.h
+vfspath.o: ../../vfs/vfspath.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/fcntl.h ../../include/limits.h \
+  ../../include/kern/limits.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/vfs.h ../../include/array.h \
+  ../../include/vnode.h
+vnode.o: ../../vfs/vnode.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/synch.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/vfs.h \
+  ../../include/array.h ../../include/vnode.h
+kmalloc.o: ../../vm/kmalloc.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/vm.h \
+  includelinks/machine/vm.h
+trap.o: ../../arch/mips/locore/trap.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/signal.h \
+  includelinks/kern/machine/signal.h ../../include/kern/signal.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  includelinks/mips/specialreg.h includelinks/mips/trapframe.h \
+  ../../include/cpu.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/vm.h \
+  ../../include/mainbus.h ../../include/syscall.h
+syscall.o: ../../arch/mips/syscall/syscall.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/kern/syscall.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h includelinks/mips/trapframe.h ../../include/thread.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  ../../include/syscall.h
+cpu.o: ../../arch/mips/thread/cpu.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h includelinks/mips/specialreg.h \
+  includelinks/mips/trapframe.h includelinks/platform/maxcpus.h \
+  ../../include/cpu.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/vm.h ../../include/thread.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h
+switchframe.o: ../../arch/mips/thread/switchframe.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/threadprivate.h \
+  ../../arch/mips/thread/switchframe.h
+switch.o: ../../arch/mips/thread/switch.S \
+  includelinks/kern/mips/regdefs.h
+thread_machdep.o: ../../arch/mips/thread/thread_machdep.c \
+  ../../include/types.h ../../include/kern/types.h \
+  includelinks/kern/machine/types.h includelinks/machine/types.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/setjmp.h \
+  includelinks/kern/machine/setjmp.h ../../include/threadprivate.h
+threadstart.o: ../../arch/mips/thread/threadstart.S \
+  includelinks/kern/mips/regdefs.h
+dumbvm.o: ../../arch/mips/vm/dumbvm.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/spl.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/thread.h \
+  ../../include/threadlist.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  includelinks/mips/tlb.h ../../include/addrspace.h ../../include/vm.h \
+  includelinks/machine/vm.h opt-dumbvm.h
+ram.o: ../../arch/mips/vm/ram.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h ../../include/vm.h includelinks/machine/vm.h \
+  ../../include/mainbus.h
+adddi3.o: ../../../common/gcc-millicode/adddi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+anddi3.o: ../../../common/gcc-millicode/anddi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+ashldi3.o: ../../../common/gcc-millicode/ashldi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+ashrdi3.o: ../../../common/gcc-millicode/ashrdi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+cmpdi2.o: ../../../common/gcc-millicode/cmpdi2.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+divdi3.o: ../../../common/gcc-millicode/divdi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+iordi3.o: ../../../common/gcc-millicode/iordi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+lshldi3.o: ../../../common/gcc-millicode/lshldi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+lshrdi3.o: ../../../common/gcc-millicode/lshrdi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+moddi3.o: ../../../common/gcc-millicode/moddi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+muldi3.o: ../../../common/gcc-millicode/muldi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+negdi2.o: ../../../common/gcc-millicode/negdi2.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+notdi2.o: ../../../common/gcc-millicode/notdi2.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+qdivrem.o: ../../../common/gcc-millicode/qdivrem.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+subdi3.o: ../../../common/gcc-millicode/subdi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+ucmpdi2.o: ../../../common/gcc-millicode/ucmpdi2.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+udivdi3.o: ../../../common/gcc-millicode/udivdi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+umoddi3.o: ../../../common/gcc-millicode/umoddi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+xordi3.o: ../../../common/gcc-millicode/xordi3.c \
+  ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/endian.h \
+  ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+  ../../include/limits.h ../../include/kern/limits.h
+setjmp.o: ../../../common/libc/arch/mips/setjmp.S \
+  includelinks/kern/mips/regdefs.h
+copyinout.o: ../../vm/copyinout.c ../../include/types.h \
+  ../../include/kern/types.h includelinks/kern/machine/types.h \
+  includelinks/machine/types.h ../../include/kern/errno.h \
+  ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/thread.h ../../include/spinlock.h \
+  includelinks/machine/spinlock.h ../../include/threadlist.h \
+  includelinks/machine/thread.h ../../include/current.h \
+  includelinks/machine/current.h ../../include/vm.h \
+  includelinks/machine/vm.h ../../include/copyinout.h
+cache-mips161.o: ../../arch/mips/locore/cache-mips161.S \
+  includelinks/kern/mips/regdefs.h
+exception-mips1.o: ../../arch/mips/locore/exception-mips1.S \
+  includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
+tlb-mips1.o: ../../arch/mips/vm/tlb-mips1.S \
+  includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
+lamebus_machdep.o: ../../arch/sys161/dev/lamebus_machdep.c \
+  ../../include/types.h ../../include/kern/types.h \
+  includelinks/kern/machine/types.h includelinks/machine/types.h \
+  ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+  opt-noasserts.h includelinks/mips/trapframe.h ../../include/cpu.h \
+  ../../include/spinlock.h includelinks/machine/spinlock.h \
+  ../../include/threadlist.h includelinks/machine/vm.h \
+  ../../include/spl.h ../../include/clock.h opt-synchprobs.h \
+  ../../include/thread.h includelinks/machine/thread.h \
+  ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+  ../../include/current.h includelinks/machine/current.h \
+  ../../include/synch.h ../../include/mainbus.h includelinks/sys161/bus.h \
+  ../../dev/lamebus/lamebus.h autoconf.h
+start.o: ../../arch/sys161/startup/start.S \
+  includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
diff --git a/kern/compile/ASST0/Makefile b/kern/compile/ASST0/Makefile
new file mode 100644
index 0000000..86b9d8b
--- /dev/null
+++ b/kern/compile/ASST0/Makefile
@@ -0,0 +1,15 @@
+# Automatically generated by config; do not edit.
+#
+
+# Top of the kernel tree
+KTOP=../..
+# Top of the whole tree
+TOP=$(KTOP)/..
+# Debug vs. optimize
+KDEBUG=-g
+# Name of the kernel config file
+CONFNAME=ASST0
+
+.include "$(TOP)/mk/os161.config.mk"
+.include "files.mk"
+.include "$(TOP)/mk/os161.kernel.mk"
diff --git a/kern/compile/ASST0/__printf.o b/kern/compile/ASST0/__printf.o
new file mode 100644
index 0000000..c34aeb0
Binary files /dev/null and b/kern/compile/ASST0/__printf.o differ
diff --git a/kern/compile/ASST0/adddi3.o b/kern/compile/ASST0/adddi3.o
new file mode 100644
index 0000000..77f29c6
Binary files /dev/null and b/kern/compile/ASST0/adddi3.o differ
diff --git a/kern/compile/ASST0/anddi3.o b/kern/compile/ASST0/anddi3.o
new file mode 100644
index 0000000..1f1448f
Binary files /dev/null and b/kern/compile/ASST0/anddi3.o differ
diff --git a/kern/compile/ASST0/array.o b/kern/compile/ASST0/array.o
new file mode 100644
index 0000000..da379a3
Binary files /dev/null and b/kern/compile/ASST0/array.o differ
diff --git a/kern/compile/ASST0/arraytest.o b/kern/compile/ASST0/arraytest.o
new file mode 100644
index 0000000..88d337b
Binary files /dev/null and b/kern/compile/ASST0/arraytest.o differ
diff --git a/kern/compile/ASST0/ashldi3.o b/kern/compile/ASST0/ashldi3.o
new file mode 100644
index 0000000..d063abb
Binary files /dev/null and b/kern/compile/ASST0/ashldi3.o differ
diff --git a/kern/compile/ASST0/ashrdi3.o b/kern/compile/ASST0/ashrdi3.o
new file mode 100644
index 0000000..acd24a6
Binary files /dev/null and b/kern/compile/ASST0/ashrdi3.o differ
diff --git a/kern/compile/ASST0/atoi.o b/kern/compile/ASST0/atoi.o
new file mode 100644
index 0000000..fa4bb70
Binary files /dev/null and b/kern/compile/ASST0/atoi.o differ
diff --git a/kern/compile/ASST0/autoconf.c b/kern/compile/ASST0/autoconf.c
new file mode 100644
index 0000000..117c315
--- /dev/null
+++ b/kern/compile/ASST0/autoconf.c
@@ -0,0 +1,410 @@
+/* Automatically generated; do not edit */
+#include <types.h>
+#include <lib.h>
+#include "autoconf.h"
+
+static void autoconf_beep(struct beep_softc *, int);
+static void autoconf_con(struct con_softc *, int);
+static void autoconf_emu(struct emu_softc *, int);
+static void autoconf_lhd(struct lhd_softc *, int);
+static void autoconf_lrandom(struct lrandom_softc *, int);
+static void autoconf_lser(struct lser_softc *, int);
+static void autoconf_ltimer(struct ltimer_softc *, int);
+static void autoconf_ltrace(struct ltrace_softc *, int);
+static void autoconf_random(struct random_softc *, int);
+static void autoconf_rtclock(struct rtclock_softc *, int);
+static int nextunit_beep;
+static int nextunit_con;
+static int nextunit_emu;
+static int nextunit_lhd;
+static int nextunit_lrandom;
+static int nextunit_lser;
+static int nextunit_ltimer;
+static int nextunit_ltrace;
+static int nextunit_random;
+static int nextunit_rtclock;
+
+static
+int
+tryattach_emu_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct emu_softc *dev;
+	int result;
+
+	dev = attach_emu_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("emu%d at lamebus%d", devunit, busunit);
+	result = config_emu(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_emu = devunit+1;
+	autoconf_emu(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltrace_softc *dev;
+	int result;
+
+	dev = attach_ltrace_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltrace%d at lamebus%d", devunit, busunit);
+	result = config_ltrace(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltrace = devunit+1;
+	autoconf_ltrace(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltimer_softc *dev;
+	int result;
+
+	dev = attach_ltimer_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltimer%d at lamebus%d", devunit, busunit);
+	result = config_ltimer(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltimer = devunit+1;
+	autoconf_ltimer(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lrandom_softc *dev;
+	int result;
+
+	dev = attach_lrandom_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lrandom%d at lamebus%d", devunit, busunit);
+	result = config_lrandom(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lrandom = devunit+1;
+	autoconf_lrandom(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lhd_softc *dev;
+	int result;
+
+	dev = attach_lhd_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lhd%d at lamebus%d", devunit, busunit);
+	result = config_lhd(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lhd = devunit+1;
+	autoconf_lhd(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lser_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lser_softc *dev;
+	int result;
+
+	dev = attach_lser_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lser%d at lamebus%d", devunit, busunit);
+	result = config_lser(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lser = devunit+1;
+	autoconf_lser(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_beep_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct beep_softc *dev;
+	int result;
+
+	dev = attach_beep_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("beep%d at ltimer%d", devunit, busunit);
+	result = config_beep(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_beep = devunit+1;
+	autoconf_beep(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_con_to_lser(int devunit, struct lser_softc *bus, int busunit)
+{
+	struct con_softc *dev;
+	int result;
+
+	dev = attach_con_to_lser(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("con%d at lser%d", devunit, busunit);
+	result = config_con(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_con = devunit+1;
+	autoconf_con(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct rtclock_softc *dev;
+	int result;
+
+	dev = attach_rtclock_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("rtclock%d at ltimer%d", devunit, busunit);
+	result = config_rtclock(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_rtclock = devunit+1;
+	autoconf_rtclock(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_lrandom(int devunit, struct lrandom_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_lrandom(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at lrandom%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+
+static
+void
+autoconf_rtclock(struct rtclock_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lrandom(struct lrandom_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_random <= 0) {
+			tryattach_random_to_lrandom(0, bus, busunit);
+		}
+	}
+}
+
+void
+autoconf_lamebus(struct lamebus_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		int result, devunit=nextunit_emu;
+		do {
+			result = tryattach_emu_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltrace;
+		do {
+			result = tryattach_ltrace_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltimer;
+		do {
+			result = tryattach_ltimer_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lrandom;
+		do {
+			result = tryattach_lrandom_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lhd;
+		do {
+			result = tryattach_lhd_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lser;
+		do {
+			result = tryattach_lser_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+}
+
+static
+void
+autoconf_lser(struct lser_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_con <= 0) {
+			tryattach_con_to_lser(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_beep(struct beep_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_con(struct con_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltimer(struct ltimer_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_beep <= 0) {
+			tryattach_beep_to_ltimer(0, bus, busunit);
+		}
+	}
+	{
+		if (nextunit_rtclock <= 0) {
+			tryattach_rtclock_to_ltimer(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_emu(struct emu_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_random(struct random_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lhd(struct lhd_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltrace(struct ltrace_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+pseudoconfig(void)
+{
+}
+
diff --git a/kern/compile/ASST0/autoconf.h b/kern/compile/ASST0/autoconf.h
new file mode 100644
index 0000000..2c48736
--- /dev/null
+++ b/kern/compile/ASST0/autoconf.h
@@ -0,0 +1,43 @@
+/* Automatically generated; do not edit */
+#ifndef _AUTOCONF_H_
+#define _AUTOCONF_H_
+
+struct lamebus_softc;
+struct emu_softc;
+struct ltrace_softc;
+struct ltimer_softc;
+struct lrandom_softc;
+struct lhd_softc;
+struct lser_softc;
+struct beep_softc;
+struct con_softc;
+struct rtclock_softc;
+struct random_softc;
+
+void autoconf_lamebus(struct lamebus_softc *dev, int unit);
+
+struct emu_softc *attach_emu_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltrace_softc *attach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltimer_softc *attach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lrandom_softc *attach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lhd_softc *attach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lser_softc *attach_lser_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct beep_softc *attach_beep_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct con_softc *attach_con_to_lser(int devunit, struct lser_softc *bus);
+struct rtclock_softc *attach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct random_softc *attach_random_to_lrandom(int devunit, struct lrandom_softc *bus);
+
+int config_emu(struct emu_softc *dev, int unit);
+int config_ltrace(struct ltrace_softc *dev, int unit);
+int config_ltimer(struct ltimer_softc *dev, int unit);
+int config_lrandom(struct lrandom_softc *dev, int unit);
+int config_lhd(struct lhd_softc *dev, int unit);
+int config_lser(struct lser_softc *dev, int unit);
+int config_beep(struct beep_softc *dev, int unit);
+int config_con(struct con_softc *dev, int unit);
+int config_rtclock(struct rtclock_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+
+void pseudoconfig(void);
+
+#endif /* _AUTOCONF_H_ */
diff --git a/kern/compile/ASST0/autoconf.o b/kern/compile/ASST0/autoconf.o
new file mode 100644
index 0000000..efbfa7f
Binary files /dev/null and b/kern/compile/ASST0/autoconf.o differ
diff --git a/kern/compile/ASST0/beep.o b/kern/compile/ASST0/beep.o
new file mode 100644
index 0000000..daf7cd0
Binary files /dev/null and b/kern/compile/ASST0/beep.o differ
diff --git a/kern/compile/ASST0/beep_ltimer.o b/kern/compile/ASST0/beep_ltimer.o
new file mode 100644
index 0000000..63227f7
Binary files /dev/null and b/kern/compile/ASST0/beep_ltimer.o differ
diff --git a/kern/compile/ASST0/bitmap.o b/kern/compile/ASST0/bitmap.o
new file mode 100644
index 0000000..7dc7eec
Binary files /dev/null and b/kern/compile/ASST0/bitmap.o differ
diff --git a/kern/compile/ASST0/bitmaptest.o b/kern/compile/ASST0/bitmaptest.o
new file mode 100644
index 0000000..38f9894
Binary files /dev/null and b/kern/compile/ASST0/bitmaptest.o differ
diff --git a/kern/compile/ASST0/bswap.o b/kern/compile/ASST0/bswap.o
new file mode 100644
index 0000000..7af3a51
Binary files /dev/null and b/kern/compile/ASST0/bswap.o differ
diff --git a/kern/compile/ASST0/bzero.o b/kern/compile/ASST0/bzero.o
new file mode 100644
index 0000000..2f5f12d
Binary files /dev/null and b/kern/compile/ASST0/bzero.o differ
diff --git a/kern/compile/ASST0/cache-mips161.o b/kern/compile/ASST0/cache-mips161.o
new file mode 100644
index 0000000..079194d
Binary files /dev/null and b/kern/compile/ASST0/cache-mips161.o differ
diff --git a/kern/compile/ASST0/clock.o b/kern/compile/ASST0/clock.o
new file mode 100644
index 0000000..e6ef896
Binary files /dev/null and b/kern/compile/ASST0/clock.o differ
diff --git a/kern/compile/ASST0/cmpdi2.o b/kern/compile/ASST0/cmpdi2.o
new file mode 100644
index 0000000..976a0e4
Binary files /dev/null and b/kern/compile/ASST0/cmpdi2.o differ
diff --git a/kern/compile/ASST0/con_lser.o b/kern/compile/ASST0/con_lser.o
new file mode 100644
index 0000000..ffd486b
Binary files /dev/null and b/kern/compile/ASST0/con_lser.o differ
diff --git a/kern/compile/ASST0/console.o b/kern/compile/ASST0/console.o
new file mode 100644
index 0000000..a7a4cec
Binary files /dev/null and b/kern/compile/ASST0/console.o differ
diff --git a/kern/compile/ASST0/copyinout.o b/kern/compile/ASST0/copyinout.o
new file mode 100644
index 0000000..98c77fe
Binary files /dev/null and b/kern/compile/ASST0/copyinout.o differ
diff --git a/kern/compile/ASST0/cpu.o b/kern/compile/ASST0/cpu.o
new file mode 100644
index 0000000..af465fa
Binary files /dev/null and b/kern/compile/ASST0/cpu.o differ
diff --git a/kern/compile/ASST0/device.o b/kern/compile/ASST0/device.o
new file mode 100644
index 0000000..9059d4d
Binary files /dev/null and b/kern/compile/ASST0/device.o differ
diff --git a/kern/compile/ASST0/devnull.o b/kern/compile/ASST0/devnull.o
new file mode 100644
index 0000000..67e15c3
Binary files /dev/null and b/kern/compile/ASST0/devnull.o differ
diff --git a/kern/compile/ASST0/divdi3.o b/kern/compile/ASST0/divdi3.o
new file mode 100644
index 0000000..8cd3d73
Binary files /dev/null and b/kern/compile/ASST0/divdi3.o differ
diff --git a/kern/compile/ASST0/dumbvm.o b/kern/compile/ASST0/dumbvm.o
new file mode 100644
index 0000000..ab41f0c
Binary files /dev/null and b/kern/compile/ASST0/dumbvm.o differ
diff --git a/kern/compile/ASST0/emu.o b/kern/compile/ASST0/emu.o
new file mode 100644
index 0000000..5277ded
Binary files /dev/null and b/kern/compile/ASST0/emu.o differ
diff --git a/kern/compile/ASST0/emu_att.o b/kern/compile/ASST0/emu_att.o
new file mode 100644
index 0000000..c8d7835
Binary files /dev/null and b/kern/compile/ASST0/emu_att.o differ
diff --git a/kern/compile/ASST0/exception-mips1.o b/kern/compile/ASST0/exception-mips1.o
new file mode 100644
index 0000000..97e76a5
Binary files /dev/null and b/kern/compile/ASST0/exception-mips1.o differ
diff --git a/kern/compile/ASST0/files.mk b/kern/compile/ASST0/files.mk
new file mode 100644
index 0000000..6865225
--- /dev/null
+++ b/kern/compile/ASST0/files.mk
@@ -0,0 +1,108 @@
+# Automatically generated by config; do not edit
+SRCS+=$(TOP)/common/libc/printf/__printf.c
+SRCS+=$(TOP)/common/libc/printf/snprintf.c
+SRCS+=$(TOP)/common/libc/stdlib/atoi.c
+SRCS+=$(TOP)/common/libc/string/bzero.c
+SRCS+=$(TOP)/common/libc/string/memcpy.c
+SRCS+=$(TOP)/common/libc/string/memmove.c
+SRCS+=$(TOP)/common/libc/string/strcat.c
+SRCS+=$(TOP)/common/libc/string/strchr.c
+SRCS+=$(TOP)/common/libc/string/strcmp.c
+SRCS+=$(TOP)/common/libc/string/strcpy.c
+SRCS+=$(TOP)/common/libc/string/strlen.c
+SRCS+=$(TOP)/common/libc/string/strrchr.c
+SRCS+=$(TOP)/common/libc/string/strtok_r.c
+SRCS+=$(KTOP)/compile/ASST0/autoconf.c
+SRCS+=$(KTOP)/dev/generic/beep.c
+SRCS+=$(KTOP)/dev/generic/console.c
+SRCS+=$(KTOP)/dev/generic/random.c
+SRCS+=$(KTOP)/dev/generic/rtclock.c
+SRCS+=$(KTOP)/dev/lamebus/beep_ltimer.c
+SRCS+=$(KTOP)/dev/lamebus/con_lser.c
+SRCS+=$(KTOP)/dev/lamebus/emu_att.c
+SRCS+=$(KTOP)/dev/lamebus/emu.c
+SRCS+=$(KTOP)/dev/lamebus/lamebus.c
+SRCS+=$(KTOP)/dev/lamebus/lhd_att.c
+SRCS+=$(KTOP)/dev/lamebus/lhd.c
+SRCS+=$(KTOP)/dev/lamebus/lrandom_att.c
+SRCS+=$(KTOP)/dev/lamebus/lrandom.c
+SRCS+=$(KTOP)/dev/lamebus/lser_att.c
+SRCS+=$(KTOP)/dev/lamebus/lser.c
+SRCS+=$(KTOP)/dev/lamebus/ltimer_att.c
+SRCS+=$(KTOP)/dev/lamebus/ltimer.c
+SRCS+=$(KTOP)/dev/lamebus/ltrace_att.c
+SRCS+=$(KTOP)/dev/lamebus/ltrace.c
+SRCS+=$(KTOP)/dev/lamebus/random_lrandom.c
+SRCS+=$(KTOP)/dev/lamebus/rtclock_ltimer.c
+SRCS+=$(KTOP)/fs/sfs/sfs_fs.c
+SRCS+=$(KTOP)/fs/sfs/sfs_io.c
+SRCS+=$(KTOP)/fs/sfs/sfs_vnode.c
+SRCS+=$(KTOP)/lib/array.c
+SRCS+=$(KTOP)/lib/bitmap.c
+SRCS+=$(KTOP)/lib/bswap.c
+SRCS+=$(KTOP)/lib/kgets.c
+SRCS+=$(KTOP)/lib/kprintf.c
+SRCS+=$(KTOP)/lib/misc.c
+SRCS+=$(KTOP)/lib/uio.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/locore/trap.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/syscall/syscall.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/cpu.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/switchframe.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/switch.S
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/thread_machdep.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/threadstart.S
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/vm/dumbvm.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/vm/ram.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/adddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/anddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ashldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ashrdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/cmpdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/divdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/iordi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/lshldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/lshrdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/moddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/muldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/negdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/notdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/qdivrem.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/subdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ucmpdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/udivdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/umoddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/xordi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/libc/arch/mips/setjmp.S
+SRCS.MACHINE.mips+=$(KTOP)/vm/copyinout.c
+SRCS+=$(KTOP)/startup/hello.c
+SRCS+=$(KTOP)/startup/main.c
+SRCS+=$(KTOP)/startup/menu.c
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/locore/cache-mips161.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/locore/exception-mips1.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/vm/tlb-mips1.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/sys161/dev/lamebus_machdep.c
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/sys161/startup/start.S
+SRCS+=$(KTOP)/syscall/loadelf.c
+SRCS+=$(KTOP)/syscall/runprogram.c
+SRCS+=$(KTOP)/syscall/time_syscalls.c
+SRCS+=$(KTOP)/test/arraytest.c
+SRCS+=$(KTOP)/test/bitmaptest.c
+SRCS+=$(KTOP)/test/fstest.c
+SRCS+=$(KTOP)/test/malloctest.c
+SRCS+=$(KTOP)/test/synchtest.c
+SRCS+=$(KTOP)/test/threadtest.c
+SRCS+=$(KTOP)/test/tt3.c
+SRCS+=$(KTOP)/thread/clock.c
+SRCS+=$(KTOP)/thread/spinlock.c
+SRCS+=$(KTOP)/thread/spl.c
+SRCS+=$(KTOP)/thread/synch.c
+SRCS+=$(KTOP)/thread/thread.c
+SRCS+=$(KTOP)/thread/threadlist.c
+SRCS+=$(KTOP)/vfs/device.c
+SRCS+=$(KTOP)/vfs/devnull.c
+SRCS+=$(KTOP)/vfs/vfscwd.c
+SRCS+=$(KTOP)/vfs/vfslist.c
+SRCS+=$(KTOP)/vfs/vfslookup.c
+SRCS+=$(KTOP)/vfs/vfspath.c
+SRCS+=$(KTOP)/vfs/vnode.c
+SRCS+=$(KTOP)/vm/kmalloc.c
diff --git a/kern/compile/ASST0/fstest.o b/kern/compile/ASST0/fstest.o
new file mode 100644
index 0000000..d590cd1
Binary files /dev/null and b/kern/compile/ASST0/fstest.o differ
diff --git a/kern/compile/ASST0/hello.o b/kern/compile/ASST0/hello.o
new file mode 100644
index 0000000..12fd4f0
Binary files /dev/null and b/kern/compile/ASST0/hello.o differ
diff --git a/kern/compile/ASST0/includelinks/kern/machine b/kern/compile/ASST0/includelinks/kern/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/kern/compile/ASST0/includelinks/kern/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/kern/compile/ASST0/includelinks/kern/mips b/kern/compile/ASST0/includelinks/kern/mips
new file mode 120000
index 0000000..f26786d
--- /dev/null
+++ b/kern/compile/ASST0/includelinks/kern/mips
@@ -0,0 +1 @@
+../../../../arch/mips/include/kern
\ No newline at end of file
diff --git a/kern/compile/ASST0/includelinks/machine b/kern/compile/ASST0/includelinks/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/kern/compile/ASST0/includelinks/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/kern/compile/ASST0/includelinks/mips b/kern/compile/ASST0/includelinks/mips
new file mode 120000
index 0000000..8d2096d
--- /dev/null
+++ b/kern/compile/ASST0/includelinks/mips
@@ -0,0 +1 @@
+../../../arch/mips/include
\ No newline at end of file
diff --git a/kern/compile/ASST0/includelinks/platform b/kern/compile/ASST0/includelinks/platform
new file mode 120000
index 0000000..6aa3aca
--- /dev/null
+++ b/kern/compile/ASST0/includelinks/platform
@@ -0,0 +1 @@
+sys161
\ No newline at end of file
diff --git a/kern/compile/ASST0/includelinks/sys161 b/kern/compile/ASST0/includelinks/sys161
new file mode 120000
index 0000000..620e8fe
--- /dev/null
+++ b/kern/compile/ASST0/includelinks/sys161
@@ -0,0 +1 @@
+../../../arch/sys161/include
\ No newline at end of file
diff --git a/kern/compile/ASST0/iordi3.o b/kern/compile/ASST0/iordi3.o
new file mode 100644
index 0000000..a07147b
Binary files /dev/null and b/kern/compile/ASST0/iordi3.o differ
diff --git a/kern/compile/ASST0/kernel b/kern/compile/ASST0/kernel
new file mode 100755
index 0000000..fcd852a
Binary files /dev/null and b/kern/compile/ASST0/kernel differ
diff --git a/kern/compile/ASST0/kgets.o b/kern/compile/ASST0/kgets.o
new file mode 100644
index 0000000..0a8741b
Binary files /dev/null and b/kern/compile/ASST0/kgets.o differ
diff --git a/kern/compile/ASST0/kmalloc.o b/kern/compile/ASST0/kmalloc.o
new file mode 100644
index 0000000..f549784
Binary files /dev/null and b/kern/compile/ASST0/kmalloc.o differ
diff --git a/kern/compile/ASST0/kprintf.o b/kern/compile/ASST0/kprintf.o
new file mode 100644
index 0000000..bc832b7
Binary files /dev/null and b/kern/compile/ASST0/kprintf.o differ
diff --git a/kern/compile/ASST0/lamebus.o b/kern/compile/ASST0/lamebus.o
new file mode 100644
index 0000000..e3fd402
Binary files /dev/null and b/kern/compile/ASST0/lamebus.o differ
diff --git a/kern/compile/ASST0/lamebus_machdep.o b/kern/compile/ASST0/lamebus_machdep.o
new file mode 100644
index 0000000..584b229
Binary files /dev/null and b/kern/compile/ASST0/lamebus_machdep.o differ
diff --git a/kern/compile/ASST0/lhd.o b/kern/compile/ASST0/lhd.o
new file mode 100644
index 0000000..6f8eb8a
Binary files /dev/null and b/kern/compile/ASST0/lhd.o differ
diff --git a/kern/compile/ASST0/lhd_att.o b/kern/compile/ASST0/lhd_att.o
new file mode 100644
index 0000000..faece5a
Binary files /dev/null and b/kern/compile/ASST0/lhd_att.o differ
diff --git a/kern/compile/ASST0/loadelf.o b/kern/compile/ASST0/loadelf.o
new file mode 100644
index 0000000..811d1a9
Binary files /dev/null and b/kern/compile/ASST0/loadelf.o differ
diff --git a/kern/compile/ASST0/lrandom.o b/kern/compile/ASST0/lrandom.o
new file mode 100644
index 0000000..4506950
Binary files /dev/null and b/kern/compile/ASST0/lrandom.o differ
diff --git a/kern/compile/ASST0/lrandom_att.o b/kern/compile/ASST0/lrandom_att.o
new file mode 100644
index 0000000..95f3b5e
Binary files /dev/null and b/kern/compile/ASST0/lrandom_att.o differ
diff --git a/kern/compile/ASST0/lser.o b/kern/compile/ASST0/lser.o
new file mode 100644
index 0000000..2b9b0b2
Binary files /dev/null and b/kern/compile/ASST0/lser.o differ
diff --git a/kern/compile/ASST0/lser_att.o b/kern/compile/ASST0/lser_att.o
new file mode 100644
index 0000000..ab24868
Binary files /dev/null and b/kern/compile/ASST0/lser_att.o differ
diff --git a/kern/compile/ASST0/lshldi3.o b/kern/compile/ASST0/lshldi3.o
new file mode 100644
index 0000000..d709eeb
Binary files /dev/null and b/kern/compile/ASST0/lshldi3.o differ
diff --git a/kern/compile/ASST0/lshrdi3.o b/kern/compile/ASST0/lshrdi3.o
new file mode 100644
index 0000000..c714088
Binary files /dev/null and b/kern/compile/ASST0/lshrdi3.o differ
diff --git a/kern/compile/ASST0/ltimer.o b/kern/compile/ASST0/ltimer.o
new file mode 100644
index 0000000..7e78870
Binary files /dev/null and b/kern/compile/ASST0/ltimer.o differ
diff --git a/kern/compile/ASST0/ltimer_att.o b/kern/compile/ASST0/ltimer_att.o
new file mode 100644
index 0000000..4bc955f
Binary files /dev/null and b/kern/compile/ASST0/ltimer_att.o differ
diff --git a/kern/compile/ASST0/ltrace.o b/kern/compile/ASST0/ltrace.o
new file mode 100644
index 0000000..3e0c48c
Binary files /dev/null and b/kern/compile/ASST0/ltrace.o differ
diff --git a/kern/compile/ASST0/ltrace_att.o b/kern/compile/ASST0/ltrace_att.o
new file mode 100644
index 0000000..c5006ea
Binary files /dev/null and b/kern/compile/ASST0/ltrace_att.o differ
diff --git a/kern/compile/ASST0/main.o b/kern/compile/ASST0/main.o
new file mode 100644
index 0000000..aebb076
Binary files /dev/null and b/kern/compile/ASST0/main.o differ
diff --git a/kern/compile/ASST0/malloctest.o b/kern/compile/ASST0/malloctest.o
new file mode 100644
index 0000000..fb5d9eb
Binary files /dev/null and b/kern/compile/ASST0/malloctest.o differ
diff --git a/kern/compile/ASST0/memcpy.o b/kern/compile/ASST0/memcpy.o
new file mode 100644
index 0000000..0ced2fa
Binary files /dev/null and b/kern/compile/ASST0/memcpy.o differ
diff --git a/kern/compile/ASST0/memmove.o b/kern/compile/ASST0/memmove.o
new file mode 100644
index 0000000..7f6fea2
Binary files /dev/null and b/kern/compile/ASST0/memmove.o differ
diff --git a/kern/compile/ASST0/menu.o b/kern/compile/ASST0/menu.o
new file mode 100644
index 0000000..3e1ca94
Binary files /dev/null and b/kern/compile/ASST0/menu.o differ
diff --git a/kern/compile/ASST0/misc.o b/kern/compile/ASST0/misc.o
new file mode 100644
index 0000000..02b120e
Binary files /dev/null and b/kern/compile/ASST0/misc.o differ
diff --git a/kern/compile/ASST0/moddi3.o b/kern/compile/ASST0/moddi3.o
new file mode 100644
index 0000000..eb835fb
Binary files /dev/null and b/kern/compile/ASST0/moddi3.o differ
diff --git a/kern/compile/ASST0/muldi3.o b/kern/compile/ASST0/muldi3.o
new file mode 100644
index 0000000..b7efd96
Binary files /dev/null and b/kern/compile/ASST0/muldi3.o differ
diff --git a/kern/compile/ASST0/negdi2.o b/kern/compile/ASST0/negdi2.o
new file mode 100644
index 0000000..dff519c
Binary files /dev/null and b/kern/compile/ASST0/negdi2.o differ
diff --git a/kern/compile/ASST0/notdi2.o b/kern/compile/ASST0/notdi2.o
new file mode 100644
index 0000000..5b71f8a
Binary files /dev/null and b/kern/compile/ASST0/notdi2.o differ
diff --git a/kern/compile/ASST0/opt-dumbvm.h b/kern/compile/ASST0/opt-dumbvm.h
new file mode 100644
index 0000000..7db9b01
--- /dev/null
+++ b/kern/compile/ASST0/opt-dumbvm.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_DUMBVM_H_
+#define _OPT_DUMBVM_H_
+#define OPT_DUMBVM 1
+#endif /* _OPT_DUMBVM_H_ */
diff --git a/kern/compile/ASST0/opt-net.h b/kern/compile/ASST0/opt-net.h
new file mode 100644
index 0000000..0340a83
--- /dev/null
+++ b/kern/compile/ASST0/opt-net.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NET_H_
+#define _OPT_NET_H_
+#define OPT_NET 0
+#endif /* _OPT_NET_H_ */
diff --git a/kern/compile/ASST0/opt-netfs.h b/kern/compile/ASST0/opt-netfs.h
new file mode 100644
index 0000000..cd21c56
--- /dev/null
+++ b/kern/compile/ASST0/opt-netfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NETFS_H_
+#define _OPT_NETFS_H_
+#define OPT_NETFS 0
+#endif /* _OPT_NETFS_H_ */
diff --git a/kern/compile/ASST0/opt-noasserts.h b/kern/compile/ASST0/opt-noasserts.h
new file mode 100644
index 0000000..e4cd61c
--- /dev/null
+++ b/kern/compile/ASST0/opt-noasserts.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NOASSERTS_H_
+#define _OPT_NOASSERTS_H_
+#define OPT_NOASSERTS 0
+#endif /* _OPT_NOASSERTS_H_ */
diff --git a/kern/compile/ASST0/opt-sfs.h b/kern/compile/ASST0/opt-sfs.h
new file mode 100644
index 0000000..94095ad
--- /dev/null
+++ b/kern/compile/ASST0/opt-sfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SFS_H_
+#define _OPT_SFS_H_
+#define OPT_SFS 1
+#endif /* _OPT_SFS_H_ */
diff --git a/kern/compile/ASST0/opt-synchprobs.h b/kern/compile/ASST0/opt-synchprobs.h
new file mode 100644
index 0000000..9114407
--- /dev/null
+++ b/kern/compile/ASST0/opt-synchprobs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SYNCHPROBS_H_
+#define _OPT_SYNCHPROBS_H_
+#define OPT_SYNCHPROBS 0
+#endif /* _OPT_SYNCHPROBS_H_ */
diff --git a/kern/compile/ASST0/qdivrem.o b/kern/compile/ASST0/qdivrem.o
new file mode 100644
index 0000000..045c1cb
Binary files /dev/null and b/kern/compile/ASST0/qdivrem.o differ
diff --git a/kern/compile/ASST0/ram.o b/kern/compile/ASST0/ram.o
new file mode 100644
index 0000000..d518b1b
Binary files /dev/null and b/kern/compile/ASST0/ram.o differ
diff --git a/kern/compile/ASST0/random.o b/kern/compile/ASST0/random.o
new file mode 100644
index 0000000..904329b
Binary files /dev/null and b/kern/compile/ASST0/random.o differ
diff --git a/kern/compile/ASST0/random_lrandom.o b/kern/compile/ASST0/random_lrandom.o
new file mode 100644
index 0000000..c34b0f3
Binary files /dev/null and b/kern/compile/ASST0/random_lrandom.o differ
diff --git a/kern/compile/ASST0/rtclock.o b/kern/compile/ASST0/rtclock.o
new file mode 100644
index 0000000..bf6e0d1
Binary files /dev/null and b/kern/compile/ASST0/rtclock.o differ
diff --git a/kern/compile/ASST0/rtclock_ltimer.o b/kern/compile/ASST0/rtclock_ltimer.o
new file mode 100644
index 0000000..a241304
Binary files /dev/null and b/kern/compile/ASST0/rtclock_ltimer.o differ
diff --git a/kern/compile/ASST0/runprogram.o b/kern/compile/ASST0/runprogram.o
new file mode 100644
index 0000000..f60980d
Binary files /dev/null and b/kern/compile/ASST0/runprogram.o differ
diff --git a/kern/compile/ASST0/setjmp.o b/kern/compile/ASST0/setjmp.o
new file mode 100644
index 0000000..d8086aa
Binary files /dev/null and b/kern/compile/ASST0/setjmp.o differ
diff --git a/kern/compile/ASST0/sfs_fs.o b/kern/compile/ASST0/sfs_fs.o
new file mode 100644
index 0000000..23073c7
Binary files /dev/null and b/kern/compile/ASST0/sfs_fs.o differ
diff --git a/kern/compile/ASST0/sfs_io.o b/kern/compile/ASST0/sfs_io.o
new file mode 100644
index 0000000..22b4a89
Binary files /dev/null and b/kern/compile/ASST0/sfs_io.o differ
diff --git a/kern/compile/ASST0/sfs_vnode.o b/kern/compile/ASST0/sfs_vnode.o
new file mode 100644
index 0000000..f57e3fa
Binary files /dev/null and b/kern/compile/ASST0/sfs_vnode.o differ
diff --git a/kern/compile/ASST0/snprintf.o b/kern/compile/ASST0/snprintf.o
new file mode 100644
index 0000000..71ddf1d
Binary files /dev/null and b/kern/compile/ASST0/snprintf.o differ
diff --git a/kern/compile/ASST0/spinlock.o b/kern/compile/ASST0/spinlock.o
new file mode 100644
index 0000000..8c9844f
Binary files /dev/null and b/kern/compile/ASST0/spinlock.o differ
diff --git a/kern/compile/ASST0/spl.o b/kern/compile/ASST0/spl.o
new file mode 100644
index 0000000..d34c962
Binary files /dev/null and b/kern/compile/ASST0/spl.o differ
diff --git a/kern/compile/ASST0/start.o b/kern/compile/ASST0/start.o
new file mode 100644
index 0000000..132ea06
Binary files /dev/null and b/kern/compile/ASST0/start.o differ
diff --git a/kern/compile/ASST0/strcat.o b/kern/compile/ASST0/strcat.o
new file mode 100644
index 0000000..70eb5a3
Binary files /dev/null and b/kern/compile/ASST0/strcat.o differ
diff --git a/kern/compile/ASST0/strchr.o b/kern/compile/ASST0/strchr.o
new file mode 100644
index 0000000..455c05d
Binary files /dev/null and b/kern/compile/ASST0/strchr.o differ
diff --git a/kern/compile/ASST0/strcmp.o b/kern/compile/ASST0/strcmp.o
new file mode 100644
index 0000000..9bf58b6
Binary files /dev/null and b/kern/compile/ASST0/strcmp.o differ
diff --git a/kern/compile/ASST0/strcpy.o b/kern/compile/ASST0/strcpy.o
new file mode 100644
index 0000000..469e725
Binary files /dev/null and b/kern/compile/ASST0/strcpy.o differ
diff --git a/kern/compile/ASST0/strlen.o b/kern/compile/ASST0/strlen.o
new file mode 100644
index 0000000..fbe8954
Binary files /dev/null and b/kern/compile/ASST0/strlen.o differ
diff --git a/kern/compile/ASST0/strrchr.o b/kern/compile/ASST0/strrchr.o
new file mode 100644
index 0000000..4feb772
Binary files /dev/null and b/kern/compile/ASST0/strrchr.o differ
diff --git a/kern/compile/ASST0/strtok_r.o b/kern/compile/ASST0/strtok_r.o
new file mode 100644
index 0000000..e27491f
Binary files /dev/null and b/kern/compile/ASST0/strtok_r.o differ
diff --git a/kern/compile/ASST0/subdi3.o b/kern/compile/ASST0/subdi3.o
new file mode 100644
index 0000000..f986716
Binary files /dev/null and b/kern/compile/ASST0/subdi3.o differ
diff --git a/kern/compile/ASST0/switch.o b/kern/compile/ASST0/switch.o
new file mode 100644
index 0000000..dd6bc4c
Binary files /dev/null and b/kern/compile/ASST0/switch.o differ
diff --git a/kern/compile/ASST0/switchframe.o b/kern/compile/ASST0/switchframe.o
new file mode 100644
index 0000000..81a1c23
Binary files /dev/null and b/kern/compile/ASST0/switchframe.o differ
diff --git a/kern/compile/ASST0/synch.o b/kern/compile/ASST0/synch.o
new file mode 100644
index 0000000..350f94f
Binary files /dev/null and b/kern/compile/ASST0/synch.o differ
diff --git a/kern/compile/ASST0/synchtest.o b/kern/compile/ASST0/synchtest.o
new file mode 100644
index 0000000..c51000f
Binary files /dev/null and b/kern/compile/ASST0/synchtest.o differ
diff --git a/kern/compile/ASST0/syscall.o b/kern/compile/ASST0/syscall.o
new file mode 100644
index 0000000..ff3136e
Binary files /dev/null and b/kern/compile/ASST0/syscall.o differ
diff --git a/kern/compile/ASST0/thread.o b/kern/compile/ASST0/thread.o
new file mode 100644
index 0000000..1e4aa73
Binary files /dev/null and b/kern/compile/ASST0/thread.o differ
diff --git a/kern/compile/ASST0/thread_machdep.o b/kern/compile/ASST0/thread_machdep.o
new file mode 100644
index 0000000..cbc5ba9
Binary files /dev/null and b/kern/compile/ASST0/thread_machdep.o differ
diff --git a/kern/compile/ASST0/threadlist.o b/kern/compile/ASST0/threadlist.o
new file mode 100644
index 0000000..997d1b6
Binary files /dev/null and b/kern/compile/ASST0/threadlist.o differ
diff --git a/kern/compile/ASST0/threadstart.o b/kern/compile/ASST0/threadstart.o
new file mode 100644
index 0000000..5525cf7
Binary files /dev/null and b/kern/compile/ASST0/threadstart.o differ
diff --git a/kern/compile/ASST0/threadtest.o b/kern/compile/ASST0/threadtest.o
new file mode 100644
index 0000000..2571165
Binary files /dev/null and b/kern/compile/ASST0/threadtest.o differ
diff --git a/kern/compile/ASST0/time_syscalls.o b/kern/compile/ASST0/time_syscalls.o
new file mode 100644
index 0000000..0b898df
Binary files /dev/null and b/kern/compile/ASST0/time_syscalls.o differ
diff --git a/kern/compile/ASST0/tlb-mips1.o b/kern/compile/ASST0/tlb-mips1.o
new file mode 100644
index 0000000..e4f131b
Binary files /dev/null and b/kern/compile/ASST0/tlb-mips1.o differ
diff --git a/kern/compile/ASST0/trap.o b/kern/compile/ASST0/trap.o
new file mode 100644
index 0000000..7e07335
Binary files /dev/null and b/kern/compile/ASST0/trap.o differ
diff --git a/kern/compile/ASST0/tt3.o b/kern/compile/ASST0/tt3.o
new file mode 100644
index 0000000..08c909d
Binary files /dev/null and b/kern/compile/ASST0/tt3.o differ
diff --git a/kern/compile/ASST0/ucmpdi2.o b/kern/compile/ASST0/ucmpdi2.o
new file mode 100644
index 0000000..818ef1a
Binary files /dev/null and b/kern/compile/ASST0/ucmpdi2.o differ
diff --git a/kern/compile/ASST0/udivdi3.o b/kern/compile/ASST0/udivdi3.o
new file mode 100644
index 0000000..5edf514
Binary files /dev/null and b/kern/compile/ASST0/udivdi3.o differ
diff --git a/kern/compile/ASST0/uio.o b/kern/compile/ASST0/uio.o
new file mode 100644
index 0000000..51e0b1c
Binary files /dev/null and b/kern/compile/ASST0/uio.o differ
diff --git a/kern/compile/ASST0/umoddi3.o b/kern/compile/ASST0/umoddi3.o
new file mode 100644
index 0000000..bf3a5d7
Binary files /dev/null and b/kern/compile/ASST0/umoddi3.o differ
diff --git a/kern/compile/ASST0/vers.c b/kern/compile/ASST0/vers.c
new file mode 100644
index 0000000..57733b9
--- /dev/null
+++ b/kern/compile/ASST0/vers.c
@@ -0,0 +1,3 @@
+/* This file is automatically generated. Edits will be lost.*/
+const int buildversion = 5;
+const char buildconfig[] = "ASST0";
diff --git a/kern/compile/ASST0/vers.o b/kern/compile/ASST0/vers.o
new file mode 100644
index 0000000..da18637
Binary files /dev/null and b/kern/compile/ASST0/vers.o differ
diff --git a/kern/compile/ASST0/version b/kern/compile/ASST0/version
new file mode 100644
index 0000000..7ed6ff8
--- /dev/null
+++ b/kern/compile/ASST0/version
@@ -0,0 +1 @@
+5
diff --git a/kern/compile/ASST0/vfscwd.o b/kern/compile/ASST0/vfscwd.o
new file mode 100644
index 0000000..4775586
Binary files /dev/null and b/kern/compile/ASST0/vfscwd.o differ
diff --git a/kern/compile/ASST0/vfslist.o b/kern/compile/ASST0/vfslist.o
new file mode 100644
index 0000000..897d7b9
Binary files /dev/null and b/kern/compile/ASST0/vfslist.o differ
diff --git a/kern/compile/ASST0/vfslookup.o b/kern/compile/ASST0/vfslookup.o
new file mode 100644
index 0000000..db0bcd4
Binary files /dev/null and b/kern/compile/ASST0/vfslookup.o differ
diff --git a/kern/compile/ASST0/vfspath.o b/kern/compile/ASST0/vfspath.o
new file mode 100644
index 0000000..0ccea5a
Binary files /dev/null and b/kern/compile/ASST0/vfspath.o differ
diff --git a/kern/compile/ASST0/vnode.o b/kern/compile/ASST0/vnode.o
new file mode 100644
index 0000000..5324d37
Binary files /dev/null and b/kern/compile/ASST0/vnode.o differ
diff --git a/kern/compile/ASST0/xordi3.o b/kern/compile/ASST0/xordi3.o
new file mode 100644
index 0000000..35ead82
Binary files /dev/null and b/kern/compile/ASST0/xordi3.o differ
diff --git a/kern/conf/conf.kern b/kern/conf/conf.kern
index d23e6bc..c631bd5 100644
--- a/kern/conf/conf.kern
+++ b/kern/conf/conf.kern
@@ -374,6 +374,7 @@ file      syscall/time_syscalls.c
 
 file      startup/main.c
 file      startup/menu.c
+file      startup/hello.c
 
 ########################################
 #                                      #
diff --git a/kern/startup/hello.c b/kern/startup/hello.c
new file mode 100644
index 0000000..7cf2b1a
--- /dev/null
+++ b/kern/startup/hello.c
@@ -0,0 +1,47 @@
+#include <types.h>
+#include <kern/errno.h>
+#include <kern/unistd.h>
+#include <lib.h>
+#include <test.h>
+
+static char *my_kstrdup(const char *buf)
+{
+	char *ptr, *ret;
+
+	ret = ptr = kmalloc(strlen(buf) + 1);
+	if ((ptr == NULL))
+		panic("kmalloc returned NULL");
+
+	for (; *buf != '\0'; ++ptr, ++buf)
+		*ptr = *buf;
+
+	*ptr = '\0';
+
+	return ret;
+}
+
+static int my_toupper(int c) 
+{
+	if (c >= 'a' && c <= 'z') 
+		return c - 'a' + 'A';
+
+	return c;
+}
+
+void complex_hello(void)
+{
+	const char *msg = "hello World!!!";
+	char *copy;
+
+	/* my_kstrdup never returns a NULL pointer, no need to check */
+	copy = my_kstrdup(msg);
+
+	/* We want 'Hello World!!!', need to capitalise the first letter */
+	copy[0] = my_toupper(copy[0]);
+
+	kprintf("%s\n", copy);
+
+	/* Free the allocated memory */
+	kfree(copy);
+}
+
diff --git a/kern/startup/main.c b/kern/startup/main.c
index be4c4b8..f0a227d 100644
--- a/kern/startup/main.c
+++ b/kern/startup/main.c
@@ -133,6 +133,8 @@ boot(void)
 	 */
 	COMPILE_ASSERT(sizeof(userptr_t) == sizeof(char *));
 	COMPILE_ASSERT(sizeof(*(userptr_t)0) == sizeof(char));
+
+	complex_hello();
 }
 
 /*
diff --git a/user/bin/cat/.depend b/user/bin/cat/.depend
new file mode 100644
index 0000000..b9be6e6
--- /dev/null
+++ b/user/bin/cat/.depend
@@ -0,0 +1,19 @@
+
+$(MYBUILDDIR)/cat.o: \
+ cat.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/cat/build b/user/bin/cat/build
new file mode 120000
index 0000000..35b91f6
--- /dev/null
+++ b/user/bin/cat/build
@@ -0,0 +1 @@
+../../../build/user/bin/cat
\ No newline at end of file
diff --git a/user/bin/cp/.depend b/user/bin/cp/.depend
new file mode 100644
index 0000000..0dd050c
--- /dev/null
+++ b/user/bin/cp/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/cp.o: \
+ cp.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/cp/build b/user/bin/cp/build
new file mode 120000
index 0000000..118de80
--- /dev/null
+++ b/user/bin/cp/build
@@ -0,0 +1 @@
+../../../build/user/bin/cp
\ No newline at end of file
diff --git a/user/bin/false/.depend b/user/bin/false/.depend
new file mode 100644
index 0000000..1433644
--- /dev/null
+++ b/user/bin/false/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/false.o: \
+ false.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h
+
diff --git a/user/bin/false/build b/user/bin/false/build
new file mode 120000
index 0000000..ac163cb
--- /dev/null
+++ b/user/bin/false/build
@@ -0,0 +1 @@
+../../../build/user/bin/false
\ No newline at end of file
diff --git a/user/bin/ln/.depend b/user/bin/ln/.depend
new file mode 100644
index 0000000..d94d72d
--- /dev/null
+++ b/user/bin/ln/.depend
@@ -0,0 +1,20 @@
+
+$(MYBUILDDIR)/ln.o: \
+ ln.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/ln/build b/user/bin/ln/build
new file mode 120000
index 0000000..fae7834
--- /dev/null
+++ b/user/bin/ln/build
@@ -0,0 +1 @@
+../../../build/user/bin/ln
\ No newline at end of file
diff --git a/user/bin/ls/.depend b/user/bin/ls/.depend
new file mode 100644
index 0000000..5febba0
--- /dev/null
+++ b/user/bin/ls/.depend
@@ -0,0 +1,25 @@
+
+$(MYBUILDDIR)/ls.o: \
+ ls.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/ls/build b/user/bin/ls/build
new file mode 120000
index 0000000..18e884f
--- /dev/null
+++ b/user/bin/ls/build
@@ -0,0 +1 @@
+../../../build/user/bin/ls
\ No newline at end of file
diff --git a/user/bin/mkdir/.depend b/user/bin/mkdir/.depend
new file mode 100644
index 0000000..b31e344
--- /dev/null
+++ b/user/bin/mkdir/.depend
@@ -0,0 +1,21 @@
+
+$(MYBUILDDIR)/mkdir.o: \
+ mkdir.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/mkdir/build b/user/bin/mkdir/build
new file mode 120000
index 0000000..1039cf7
--- /dev/null
+++ b/user/bin/mkdir/build
@@ -0,0 +1 @@
+../../../build/user/bin/mkdir
\ No newline at end of file
diff --git a/user/bin/mv/.depend b/user/bin/mv/.depend
new file mode 100644
index 0000000..2d7f9b7
--- /dev/null
+++ b/user/bin/mv/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/mv.o: \
+ mv.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/mv/build b/user/bin/mv/build
new file mode 120000
index 0000000..5afcb72
--- /dev/null
+++ b/user/bin/mv/build
@@ -0,0 +1 @@
+../../../build/user/bin/mv
\ No newline at end of file
diff --git a/user/bin/pwd/.depend b/user/bin/pwd/.depend
new file mode 100644
index 0000000..baab869
--- /dev/null
+++ b/user/bin/pwd/.depend
@@ -0,0 +1,22 @@
+
+$(MYBUILDDIR)/pwd.o: \
+ pwd.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+
diff --git a/user/bin/pwd/build b/user/bin/pwd/build
new file mode 120000
index 0000000..8367d40
--- /dev/null
+++ b/user/bin/pwd/build
@@ -0,0 +1 @@
+../../../build/user/bin/pwd
\ No newline at end of file
diff --git a/user/bin/rm/.depend b/user/bin/rm/.depend
new file mode 100644
index 0000000..c562e31
--- /dev/null
+++ b/user/bin/rm/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/rm.o: \
+ rm.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/rm/build b/user/bin/rm/build
new file mode 120000
index 0000000..0a1774d
--- /dev/null
+++ b/user/bin/rm/build
@@ -0,0 +1 @@
+../../../build/user/bin/rm
\ No newline at end of file
diff --git a/user/bin/rmdir/.depend b/user/bin/rmdir/.depend
new file mode 100644
index 0000000..990cf1a
--- /dev/null
+++ b/user/bin/rmdir/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/rmdir.o: \
+ rmdir.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/rmdir/build b/user/bin/rmdir/build
new file mode 120000
index 0000000..e5ebb3d
--- /dev/null
+++ b/user/bin/rmdir/build
@@ -0,0 +1 @@
+../../../build/user/bin/rmdir
\ No newline at end of file
diff --git a/user/bin/sh/.depend b/user/bin/sh/.depend
new file mode 100644
index 0000000..d2c14e0
--- /dev/null
+++ b/user/bin/sh/.depend
@@ -0,0 +1,27 @@
+
+$(MYBUILDDIR)/sh.o: \
+ sh.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/bin/sh/build b/user/bin/sh/build
new file mode 120000
index 0000000..ead3d72
--- /dev/null
+++ b/user/bin/sh/build
@@ -0,0 +1 @@
+../../../build/user/bin/sh
\ No newline at end of file
diff --git a/user/bin/sync/.depend b/user/bin/sync/.depend
new file mode 100644
index 0000000..bffbc25
--- /dev/null
+++ b/user/bin/sync/.depend
@@ -0,0 +1,17 @@
+
+$(MYBUILDDIR)/sync.o: \
+ sync.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+
diff --git a/user/bin/sync/build b/user/bin/sync/build
new file mode 120000
index 0000000..a6a0dcb
--- /dev/null
+++ b/user/bin/sync/build
@@ -0,0 +1 @@
+../../../build/user/bin/sync
\ No newline at end of file
diff --git a/user/bin/true/.depend b/user/bin/true/.depend
new file mode 100644
index 0000000..0becf50
--- /dev/null
+++ b/user/bin/true/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/true.o: \
+ true.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h
+
diff --git a/user/bin/true/build b/user/bin/true/build
new file mode 120000
index 0000000..a9d56ea
--- /dev/null
+++ b/user/bin/true/build
@@ -0,0 +1 @@
+../../../build/user/bin/true
\ No newline at end of file
diff --git a/user/build b/user/build
new file mode 120000
index 0000000..a28e5da
--- /dev/null
+++ b/user/build
@@ -0,0 +1 @@
+../build/user
\ No newline at end of file
diff --git a/user/lib/crt0/.depend b/user/lib/crt0/.depend
new file mode 100644
index 0000000..59f363a
--- /dev/null
+++ b/user/lib/crt0/.depend
@@ -0,0 +1,6 @@
+
+$(MYBUILDDIR)/crt0.o: \
+ mips/crt0.S \
+ $(INSTALLTOP)/include/kern/mips/regdefs.h \
+ $(INSTALLTOP)/include/kern/syscall.h
+
diff --git a/user/lib/crt0/build b/user/lib/crt0/build
new file mode 120000
index 0000000..d8e7eb9
--- /dev/null
+++ b/user/lib/crt0/build
@@ -0,0 +1 @@
+../../../build/user/lib/crt0
\ No newline at end of file
diff --git a/user/lib/hostcompat/.depend b/user/lib/hostcompat/.depend
new file mode 100644
index 0000000..8d706d2
--- /dev/null
+++ b/user/lib/hostcompat/.depend
@@ -0,0 +1,11 @@
+
+$(MYBUILDDIR)/err.ho: \
+ err.c \
+ host-err.h
+$(MYBUILDDIR)/time.ho: \
+ time.c \
+ hostcompat.h
+$(MYBUILDDIR)/hostcompat.ho: \
+ hostcompat.c \
+ hostcompat.h
+
diff --git a/user/lib/hostcompat/build b/user/lib/hostcompat/build
new file mode 120000
index 0000000..29f5624
--- /dev/null
+++ b/user/lib/hostcompat/build
@@ -0,0 +1 @@
+../../../build/user/lib/hostcompat
\ No newline at end of file
diff --git a/user/lib/libc/.depend b/user/lib/libc/.depend
new file mode 100644
index 0000000..1c3119c
--- /dev/null
+++ b/user/lib/libc/.depend
@@ -0,0 +1,596 @@
+
+$(MYBUILDDIR)/__printf.o: \
+ ../../../common/libc/printf/__printf.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdarg.h
+$(MYBUILDDIR)/snprintf.o: \
+ ../../../common/libc/printf/snprintf.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdarg.h
+$(MYBUILDDIR)/__puts.o: \
+ stdio/__puts.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/getchar.o: \
+ stdio/getchar.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/printf.o: \
+ stdio/printf.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdarg.h
+$(MYBUILDDIR)/putchar.o: \
+ stdio/putchar.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/puts.o: \
+ stdio/puts.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/abort.o: \
+ stdlib/abort.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/atoi.o: \
+ ../../../common/libc/stdlib/atoi.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h
+$(MYBUILDDIR)/exit.o: \
+ stdlib/exit.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/malloc.o: \
+ stdlib/malloc.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/stdint.h
+$(MYBUILDDIR)/random.o: \
+ stdlib/random.c \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/system.o: \
+ stdlib/system.c \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h
+$(MYBUILDDIR)/bzero.o: \
+ ../../../common/libc/string/bzero.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memcmp.o: \
+ string/memcmp.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memcpy.o: \
+ ../../../common/libc/string/memcpy.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memmove.o: \
+ ../../../common/libc/string/memmove.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memset.o: \
+ string/memset.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strcat.o: \
+ ../../../common/libc/string/strcat.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strchr.o: \
+ ../../../common/libc/string/strchr.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strcmp.o: \
+ ../../../common/libc/string/strcmp.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strcpy.o: \
+ ../../../common/libc/string/strcpy.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strerror.o: \
+ string/strerror.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/errmsg.h
+$(MYBUILDDIR)/strlen.o: \
+ ../../../common/libc/string/strlen.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strrchr.o: \
+ ../../../common/libc/string/strrchr.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strtok.o: \
+ string/strtok.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strtok_r.o: \
+ ../../../common/libc/string/strtok_r.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/time.o: \
+ time/time.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/syscalls.o: \
+ ../../../build/user/lib/libc/syscalls.S \
+ $(INSTALLTOP)/include/kern/syscall.h \
+ $(INSTALLTOP)/include/machine/regdefs.h
+$(MYBUILDDIR)/adddi3.o: \
+ ../../../common/gcc-millicode/adddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/anddi3.o: \
+ ../../../common/gcc-millicode/anddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/ashldi3.o: \
+ ../../../common/gcc-millicode/ashldi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/ashrdi3.o: \
+ ../../../common/gcc-millicode/ashrdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/cmpdi2.o: \
+ ../../../common/gcc-millicode/cmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/divdi3.o: \
+ ../../../common/gcc-millicode/divdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/iordi3.o: \
+ ../../../common/gcc-millicode/iordi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/lshldi3.o: \
+ ../../../common/gcc-millicode/lshldi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/lshrdi3.o: \
+ ../../../common/gcc-millicode/lshrdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/moddi3.o: \
+ ../../../common/gcc-millicode/moddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/muldi3.o: \
+ ../../../common/gcc-millicode/muldi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/negdi2.o: \
+ ../../../common/gcc-millicode/negdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/notdi2.o: \
+ ../../../common/gcc-millicode/notdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/qdivrem.o: \
+ ../../../common/gcc-millicode/qdivrem.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/subdi3.o: \
+ ../../../common/gcc-millicode/subdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/ucmpdi2.o: \
+ ../../../common/gcc-millicode/ucmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/udivdi3.o: \
+ ../../../common/gcc-millicode/udivdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/umoddi3.o: \
+ ../../../common/gcc-millicode/umoddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/xordi3.o: \
+ ../../../common/gcc-millicode/xordi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/__assert.o: \
+ unix/__assert.c \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h
+$(MYBUILDDIR)/err.o: \
+ unix/err.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
+$(MYBUILDDIR)/errno.o: \
+ unix/errno.c \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
+$(MYBUILDDIR)/getcwd.o: \
+ unix/getcwd.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
+$(MYBUILDDIR)/setjmp.o: \
+ ../../../common/libc/arch/mips/setjmp.S \
+ $(INSTALLTOP)/include/kern/mips/regdefs.h
+
diff --git a/user/lib/libc/build b/user/lib/libc/build
new file mode 120000
index 0000000..7a6255b
--- /dev/null
+++ b/user/lib/libc/build
@@ -0,0 +1 @@
+../../../build/user/lib/libc
\ No newline at end of file
diff --git a/user/sbin/dumpsfs/.depend b/user/sbin/dumpsfs/.depend
new file mode 100644
index 0000000..b23a99e
--- /dev/null
+++ b/user/sbin/dumpsfs/.depend
@@ -0,0 +1,14 @@
+
+$(MYBUILDDIR)/dumpsfs.ho: \
+ dumpsfs.c \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/disk.ho: \
+ ../mksfs/disk.c \
+ ../mksfs/support.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/support.ho: \
+ ../mksfs/support.c
+
diff --git a/user/sbin/dumpsfs/build b/user/sbin/dumpsfs/build
new file mode 120000
index 0000000..75c3502
--- /dev/null
+++ b/user/sbin/dumpsfs/build
@@ -0,0 +1 @@
+../../../build/user/sbin/dumpsfs
\ No newline at end of file
diff --git a/user/sbin/halt/.depend b/user/sbin/halt/.depend
new file mode 100644
index 0000000..b563ca6
--- /dev/null
+++ b/user/sbin/halt/.depend
@@ -0,0 +1,17 @@
+
+$(MYBUILDDIR)/halt.o: \
+ halt.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+
diff --git a/user/sbin/halt/build b/user/sbin/halt/build
new file mode 120000
index 0000000..93f338f
--- /dev/null
+++ b/user/sbin/halt/build
@@ -0,0 +1 @@
+../../../build/user/sbin/halt
\ No newline at end of file
diff --git a/user/sbin/mksfs/.depend b/user/sbin/mksfs/.depend
new file mode 100644
index 0000000..a18dd01
--- /dev/null
+++ b/user/sbin/mksfs/.depend
@@ -0,0 +1,14 @@
+
+$(MYBUILDDIR)/mksfs.ho: \
+ mksfs.c \
+ support.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ disk.h
+$(MYBUILDDIR)/disk.ho: \
+ disk.c \
+ support.h \
+ disk.h
+$(MYBUILDDIR)/support.ho: \
+ support.c
+
diff --git a/user/sbin/mksfs/build b/user/sbin/mksfs/build
new file mode 120000
index 0000000..f3a37bc
--- /dev/null
+++ b/user/sbin/mksfs/build
@@ -0,0 +1 @@
+../../../build/user/sbin/mksfs
\ No newline at end of file
diff --git a/user/sbin/poweroff/.depend b/user/sbin/poweroff/.depend
new file mode 100644
index 0000000..9a07a8d
--- /dev/null
+++ b/user/sbin/poweroff/.depend
@@ -0,0 +1,17 @@
+
+$(MYBUILDDIR)/poweroff.o: \
+ poweroff.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+
diff --git a/user/sbin/poweroff/build b/user/sbin/poweroff/build
new file mode 120000
index 0000000..0db6fc1
--- /dev/null
+++ b/user/sbin/poweroff/build
@@ -0,0 +1 @@
+../../../build/user/sbin/poweroff
\ No newline at end of file
diff --git a/user/sbin/reboot/.depend b/user/sbin/reboot/.depend
new file mode 100644
index 0000000..5268843
--- /dev/null
+++ b/user/sbin/reboot/.depend
@@ -0,0 +1,17 @@
+
+$(MYBUILDDIR)/reboot.o: \
+ reboot.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+
diff --git a/user/sbin/reboot/build b/user/sbin/reboot/build
new file mode 120000
index 0000000..a27f0d5
--- /dev/null
+++ b/user/sbin/reboot/build
@@ -0,0 +1 @@
+../../../build/user/sbin/reboot
\ No newline at end of file
diff --git a/user/sbin/sfsck/.depend b/user/sbin/sfsck/.depend
new file mode 100644
index 0000000..27bd5af
--- /dev/null
+++ b/user/sbin/sfsck/.depend
@@ -0,0 +1,14 @@
+
+$(MYBUILDDIR)/sfsck.ho: \
+ sfsck.c \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/disk.ho: \
+ ../mksfs/disk.c \
+ ../mksfs/support.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/support.ho: \
+ ../mksfs/support.c
+
diff --git a/user/sbin/sfsck/build b/user/sbin/sfsck/build
new file mode 120000
index 0000000..70222b3
--- /dev/null
+++ b/user/sbin/sfsck/build
@@ -0,0 +1 @@
+../../../build/user/sbin/sfsck
\ No newline at end of file
diff --git a/user/testbin/add/.depend b/user/testbin/add/.depend
new file mode 100644
index 0000000..de1c3a8
--- /dev/null
+++ b/user/testbin/add/.depend
@@ -0,0 +1,11 @@
+
+$(MYBUILDDIR)/add.o: \
+ add.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/add/build b/user/testbin/add/build
new file mode 120000
index 0000000..281fcb1
--- /dev/null
+++ b/user/testbin/add/build
@@ -0,0 +1 @@
+../../../build/user/testbin/add
\ No newline at end of file
diff --git a/user/testbin/argtest/.depend b/user/testbin/argtest/.depend
new file mode 100644
index 0000000..abe7580
--- /dev/null
+++ b/user/testbin/argtest/.depend
@@ -0,0 +1,9 @@
+
+$(MYBUILDDIR)/argtest.o: \
+ argtest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+
diff --git a/user/testbin/argtest/build b/user/testbin/argtest/build
new file mode 120000
index 0000000..fe19821
--- /dev/null
+++ b/user/testbin/argtest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/argtest
\ No newline at end of file
diff --git a/user/testbin/badcall/.depend b/user/testbin/badcall/.depend
new file mode 100644
index 0000000..08ba791
--- /dev/null
+++ b/user/testbin/badcall/.depend
@@ -0,0 +1,598 @@
+
+$(MYBUILDDIR)/bad_execv.o: \
+ bad_execv.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_waitpid.o: \
+ bad_waitpid.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_open.o: \
+ bad_open.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_read.o: \
+ bad_read.c \
+ test.h
+$(MYBUILDDIR)/bad_write.o: \
+ bad_write.c \
+ test.h
+$(MYBUILDDIR)/bad_close.o: \
+ bad_close.c \
+ test.h
+$(MYBUILDDIR)/bad_reboot.o: \
+ bad_reboot.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_sbrk.o: \
+ bad_sbrk.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_ioctl.o: \
+ bad_ioctl.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/ioctl.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_lseek.o: \
+ bad_lseek.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_fsync.o: \
+ bad_fsync.c \
+ test.h
+$(MYBUILDDIR)/bad_ftruncate.o: \
+ bad_ftruncate.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_stat.o: \
+ bad_stat.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_remove.o: \
+ bad_remove.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_rename.o: \
+ bad_rename.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_link.o: \
+ bad_link.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_mkdir.o: \
+ bad_mkdir.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_rmdir.o: \
+ bad_rmdir.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_chdir.o: \
+ bad_chdir.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ test.h
+$(MYBUILDDIR)/bad_getdirentry.o: \
+ bad_getdirentry.c \
+ test.h
+$(MYBUILDDIR)/bad_symlink.o: \
+ bad_symlink.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_readlink.o: \
+ bad_readlink.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_dup2.o: \
+ bad_dup2.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_pipe.o: \
+ bad_pipe.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_time.o: \
+ bad_time.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_getcwd.o: \
+ bad_getcwd.c \
+ test.h
+$(MYBUILDDIR)/common_buf.o: \
+ common_buf.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/common_fds.o: \
+ common_fds.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/common_path.o: \
+ common_path.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/driver.o: \
+ driver.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+
diff --git a/user/testbin/badcall/build b/user/testbin/badcall/build
new file mode 120000
index 0000000..c386aee
--- /dev/null
+++ b/user/testbin/badcall/build
@@ -0,0 +1 @@
+../../../build/user/testbin/badcall
\ No newline at end of file
diff --git a/user/testbin/bigfile/.depend b/user/testbin/bigfile/.depend
new file mode 100644
index 0000000..355cd4d
--- /dev/null
+++ b/user/testbin/bigfile/.depend
@@ -0,0 +1,21 @@
+
+$(MYBUILDDIR)/bigfile.o: \
+ bigfile.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/bigfile/build b/user/testbin/bigfile/build
new file mode 120000
index 0000000..5e62cd1
--- /dev/null
+++ b/user/testbin/bigfile/build
@@ -0,0 +1 @@
+../../../build/user/testbin/bigfile
\ No newline at end of file
diff --git a/user/testbin/conman/.depend b/user/testbin/conman/.depend
new file mode 100644
index 0000000..fa93a98
--- /dev/null
+++ b/user/testbin/conman/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/conman.o: \
+ conman.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/conman/build b/user/testbin/conman/build
new file mode 120000
index 0000000..e558aa9
--- /dev/null
+++ b/user/testbin/conman/build
@@ -0,0 +1 @@
+../../../build/user/testbin/conman
\ No newline at end of file
diff --git a/user/testbin/crash/.depend b/user/testbin/crash/.depend
new file mode 100644
index 0000000..0c358fd
--- /dev/null
+++ b/user/testbin/crash/.depend
@@ -0,0 +1,20 @@
+
+$(MYBUILDDIR)/crash.o: \
+ crash.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/crash/build b/user/testbin/crash/build
new file mode 120000
index 0000000..87b5282
--- /dev/null
+++ b/user/testbin/crash/build
@@ -0,0 +1 @@
+../../../build/user/testbin/crash
\ No newline at end of file
diff --git a/user/testbin/ctest/.depend b/user/testbin/ctest/.depend
new file mode 100644
index 0000000..d66c3f5
--- /dev/null
+++ b/user/testbin/ctest/.depend
@@ -0,0 +1,10 @@
+
+$(MYBUILDDIR)/ctest.o: \
+ ctest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h
+
diff --git a/user/testbin/ctest/build b/user/testbin/ctest/build
new file mode 120000
index 0000000..2788d60
--- /dev/null
+++ b/user/testbin/ctest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/ctest
\ No newline at end of file
diff --git a/user/testbin/dirconc/.depend b/user/testbin/dirconc/.depend
new file mode 100644
index 0000000..69494c3
--- /dev/null
+++ b/user/testbin/dirconc/.depend
@@ -0,0 +1,27 @@
+
+$(MYBUILDDIR)/dirconc.o: \
+ dirconc.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/string.h
+
diff --git a/user/testbin/dirconc/build b/user/testbin/dirconc/build
new file mode 120000
index 0000000..79fc378
--- /dev/null
+++ b/user/testbin/dirconc/build
@@ -0,0 +1 @@
+../../../build/user/testbin/dirconc
\ No newline at end of file
diff --git a/user/testbin/dirseek/.depend b/user/testbin/dirseek/.depend
new file mode 100644
index 0000000..ca8dfd0
--- /dev/null
+++ b/user/testbin/dirseek/.depend
@@ -0,0 +1,24 @@
+
+$(MYBUILDDIR)/dirseek.o: \
+ dirseek.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/dirseek/build b/user/testbin/dirseek/build
new file mode 120000
index 0000000..4537721
--- /dev/null
+++ b/user/testbin/dirseek/build
@@ -0,0 +1 @@
+../../../build/user/testbin/dirseek
\ No newline at end of file
diff --git a/user/testbin/dirtest/.depend b/user/testbin/dirtest/.depend
new file mode 100644
index 0000000..992fd01
--- /dev/null
+++ b/user/testbin/dirtest/.depend
@@ -0,0 +1,23 @@
+
+$(MYBUILDDIR)/dirtest.o: \
+ dirtest.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/dirtest/build b/user/testbin/dirtest/build
new file mode 120000
index 0000000..e040b02
--- /dev/null
+++ b/user/testbin/dirtest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/dirtest
\ No newline at end of file
diff --git a/user/testbin/f_test/.depend b/user/testbin/f_test/.depend
new file mode 100644
index 0000000..8f5b1e0
--- /dev/null
+++ b/user/testbin/f_test/.depend
@@ -0,0 +1,60 @@
+
+$(MYBUILDDIR)/f_test.o: \
+ f_test.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ f_hdr.h
+$(MYBUILDDIR)/f_read.o: \
+ f_read.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ f_hdr.h
+$(MYBUILDDIR)/f_write.o: \
+ f_write.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/err.h \
+ f_hdr.h
+
diff --git a/user/testbin/f_test/build b/user/testbin/f_test/build
new file mode 120000
index 0000000..54a1e00
--- /dev/null
+++ b/user/testbin/f_test/build
@@ -0,0 +1 @@
+../../../build/user/testbin/f_test
\ No newline at end of file
diff --git a/user/testbin/farm/.depend b/user/testbin/farm/.depend
new file mode 100644
index 0000000..641469f
--- /dev/null
+++ b/user/testbin/farm/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/farm.o: \
+ farm.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/farm/build b/user/testbin/farm/build
new file mode 120000
index 0000000..1cf0de8
--- /dev/null
+++ b/user/testbin/farm/build
@@ -0,0 +1 @@
+../../../build/user/testbin/farm
\ No newline at end of file
diff --git a/user/testbin/faulter/.depend b/user/testbin/faulter/.depend
new file mode 100644
index 0000000..1caa211
--- /dev/null
+++ b/user/testbin/faulter/.depend
@@ -0,0 +1,9 @@
+
+$(MYBUILDDIR)/faulter.o: \
+ faulter.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+
diff --git a/user/testbin/faulter/build b/user/testbin/faulter/build
new file mode 120000
index 0000000..3848e53
--- /dev/null
+++ b/user/testbin/faulter/build
@@ -0,0 +1 @@
+../../../build/user/testbin/faulter
\ No newline at end of file
diff --git a/user/testbin/filetest/.depend b/user/testbin/filetest/.depend
new file mode 100644
index 0000000..9db003b
--- /dev/null
+++ b/user/testbin/filetest/.depend
@@ -0,0 +1,20 @@
+
+$(MYBUILDDIR)/filetest.o: \
+ filetest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/filetest/build b/user/testbin/filetest/build
new file mode 120000
index 0000000..ea1b85d
--- /dev/null
+++ b/user/testbin/filetest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/filetest
\ No newline at end of file
diff --git a/user/testbin/forkbomb/.depend b/user/testbin/forkbomb/.depend
new file mode 100644
index 0000000..da80299
--- /dev/null
+++ b/user/testbin/forkbomb/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/forkbomb.o: \
+ forkbomb.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/forkbomb/build b/user/testbin/forkbomb/build
new file mode 120000
index 0000000..8931ddf
--- /dev/null
+++ b/user/testbin/forkbomb/build
@@ -0,0 +1 @@
+../../../build/user/testbin/forkbomb
\ No newline at end of file
diff --git a/user/testbin/forktest/.depend b/user/testbin/forktest/.depend
new file mode 100644
index 0000000..516df07
--- /dev/null
+++ b/user/testbin/forktest/.depend
@@ -0,0 +1,21 @@
+
+$(MYBUILDDIR)/forktest.o: \
+ forktest.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/forktest/build b/user/testbin/forktest/build
new file mode 120000
index 0000000..a1cac3b
--- /dev/null
+++ b/user/testbin/forktest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/forktest
\ No newline at end of file
diff --git a/user/testbin/guzzle/.depend b/user/testbin/guzzle/.depend
new file mode 100644
index 0000000..9c13997
--- /dev/null
+++ b/user/testbin/guzzle/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/guzzle.o: \
+ guzzle.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+
diff --git a/user/testbin/guzzle/build b/user/testbin/guzzle/build
new file mode 120000
index 0000000..d7bff3e
--- /dev/null
+++ b/user/testbin/guzzle/build
@@ -0,0 +1 @@
+../../../build/user/testbin/guzzle
\ No newline at end of file
diff --git a/user/testbin/hash/.depend b/user/testbin/hash/.depend
new file mode 100644
index 0000000..8426b42
--- /dev/null
+++ b/user/testbin/hash/.depend
@@ -0,0 +1,5 @@
+
+$(MYBUILDDIR)/hash.ho: \
+ hash.c \
+ $(INSTALLTOP)/hostinclude/hostcompat.h
+
diff --git a/user/testbin/hash/build b/user/testbin/hash/build
new file mode 120000
index 0000000..211f5c2
--- /dev/null
+++ b/user/testbin/hash/build
@@ -0,0 +1 @@
+../../../build/user/testbin/hash
\ No newline at end of file
diff --git a/user/testbin/hog/.depend b/user/testbin/hog/.depend
new file mode 100644
index 0000000..6601760
--- /dev/null
+++ b/user/testbin/hog/.depend
@@ -0,0 +1,4 @@
+
+$(MYBUILDDIR)/hog.o: \
+ hog.c
+
diff --git a/user/testbin/hog/build b/user/testbin/hog/build
new file mode 120000
index 0000000..2b31cf1
--- /dev/null
+++ b/user/testbin/hog/build
@@ -0,0 +1 @@
+../../../build/user/testbin/hog
\ No newline at end of file
diff --git a/user/testbin/huge/.depend b/user/testbin/huge/.depend
new file mode 100644
index 0000000..80c4719
--- /dev/null
+++ b/user/testbin/huge/.depend
@@ -0,0 +1,10 @@
+
+$(MYBUILDDIR)/huge.o: \
+ huge.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h
+
diff --git a/user/testbin/huge/build b/user/testbin/huge/build
new file mode 120000
index 0000000..3ae14dc
--- /dev/null
+++ b/user/testbin/huge/build
@@ -0,0 +1 @@
+../../../build/user/testbin/huge
\ No newline at end of file
diff --git a/user/testbin/kitchen/.depend b/user/testbin/kitchen/.depend
new file mode 100644
index 0000000..2667cff
--- /dev/null
+++ b/user/testbin/kitchen/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/kitchen.o: \
+ kitchen.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/kitchen/build b/user/testbin/kitchen/build
new file mode 120000
index 0000000..2653fcd
--- /dev/null
+++ b/user/testbin/kitchen/build
@@ -0,0 +1 @@
+../../../build/user/testbin/kitchen
\ No newline at end of file
diff --git a/user/testbin/malloctest/.depend b/user/testbin/malloctest/.depend
new file mode 100644
index 0000000..325a8fe
--- /dev/null
+++ b/user/testbin/malloctest/.depend
@@ -0,0 +1,22 @@
+
+$(MYBUILDDIR)/malloctest.o: \
+ malloctest.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/malloctest/build b/user/testbin/malloctest/build
new file mode 120000
index 0000000..e2e3795
--- /dev/null
+++ b/user/testbin/malloctest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/malloctest
\ No newline at end of file
diff --git a/user/testbin/matmult/.depend b/user/testbin/matmult/.depend
new file mode 100644
index 0000000..946b05c
--- /dev/null
+++ b/user/testbin/matmult/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/matmult.o: \
+ matmult.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h
+
diff --git a/user/testbin/matmult/build b/user/testbin/matmult/build
new file mode 120000
index 0000000..1b4cb5e
--- /dev/null
+++ b/user/testbin/matmult/build
@@ -0,0 +1 @@
+../../../build/user/testbin/matmult
\ No newline at end of file
diff --git a/user/testbin/palin/.depend b/user/testbin/palin/.depend
new file mode 100644
index 0000000..2ef5710
--- /dev/null
+++ b/user/testbin/palin/.depend
@@ -0,0 +1,10 @@
+
+$(MYBUILDDIR)/palin.o: \
+ palin.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h
+
diff --git a/user/testbin/palin/build b/user/testbin/palin/build
new file mode 120000
index 0000000..a770bcd
--- /dev/null
+++ b/user/testbin/palin/build
@@ -0,0 +1 @@
+../../../build/user/testbin/palin
\ No newline at end of file
diff --git a/user/testbin/parallelvm/.depend b/user/testbin/parallelvm/.depend
new file mode 100644
index 0000000..dfb557c
--- /dev/null
+++ b/user/testbin/parallelvm/.depend
@@ -0,0 +1,23 @@
+
+$(MYBUILDDIR)/parallelvm.o: \
+ parallelvm.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/parallelvm/build b/user/testbin/parallelvm/build
new file mode 120000
index 0000000..ca0692c
--- /dev/null
+++ b/user/testbin/parallelvm/build
@@ -0,0 +1 @@
+../../../build/user/testbin/parallelvm
\ No newline at end of file
diff --git a/user/testbin/psort/.depend b/user/testbin/psort/.depend
new file mode 100644
index 0000000..ff55380
--- /dev/null
+++ b/user/testbin/psort/.depend
@@ -0,0 +1,4 @@
+
+$(MYBUILDDIR)/psort.ho: \
+ psort.c
+
diff --git a/user/testbin/psort/build b/user/testbin/psort/build
new file mode 120000
index 0000000..14852c9
--- /dev/null
+++ b/user/testbin/psort/build
@@ -0,0 +1 @@
+../../../build/user/testbin/psort
\ No newline at end of file
diff --git a/user/testbin/randcall/.depend b/user/testbin/randcall/.depend
new file mode 100644
index 0000000..ff8cafa
--- /dev/null
+++ b/user/testbin/randcall/.depend
@@ -0,0 +1,38 @@
+
+$(MYBUILDDIR)/calls.o: \
+ calls.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ extern.h
+$(MYBUILDDIR)/main.o: \
+ main.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ extern.h \
+ $(INSTALLTOP)/include/sys/types.h
+
diff --git a/user/testbin/randcall/build b/user/testbin/randcall/build
new file mode 120000
index 0000000..2a1d992
--- /dev/null
+++ b/user/testbin/randcall/build
@@ -0,0 +1 @@
+../../../build/user/testbin/randcall
\ No newline at end of file
diff --git a/user/testbin/randcall/calls.c b/user/testbin/randcall/calls.c
new file mode 100644
index 0000000..d7b8ad9
--- /dev/null
+++ b/user/testbin/randcall/calls.c
@@ -0,0 +1,873 @@
+/* Automatically generated file; do not edit */
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <assert.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <err.h>
+
+#include "extern.h"
+
+typedef void (*tryfunc)(int dofork);
+
+static
+void
+try_execv(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "execv(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = execv(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_waitpid(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	int a2 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "waitpid(%d, %p, %d)",
+		(a0), (a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = waitpid(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_open(int dofork)
+{
+	void * a0 = randptr();
+	int a1 = randint();
+	int a2 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "open(%p, %d, %d)",
+		(a0), (a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = open(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_read(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "read(%d, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = read(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_write(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "write(%d, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = write(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_close(int dofork)
+{
+	int a0 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "close(%d)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = close(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_ioctl(int dofork)
+{
+	int a0 = randint();
+	int a1 = randint();
+	void * a2 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "ioctl(%d, %d, %p)",
+		(a0), (a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = ioctl(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_lseek(int dofork)
+{
+	int a0 = randint();
+	off_t a1 = randoff();
+	int a2 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "lseek(%d, %ld, %d)",
+		(a0), (long)(a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = lseek(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_fsync(int dofork)
+{
+	int a0 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "fsync(%d)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = fsync(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_ftruncate(int dofork)
+{
+	int a0 = randint();
+	off_t a1 = randoff();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "ftruncate(%d, %ld)",
+		(a0), (long)(a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = ftruncate(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_fstat(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "fstat(%d, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = fstat(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_remove(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "remove(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = remove(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_rename(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "rename(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = rename(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_link(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "link(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = link(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_mkdir(int dofork)
+{
+	void * a0 = randptr();
+	int a1 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "mkdir(%p, %d)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = mkdir(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_rmdir(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "rmdir(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = rmdir(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_chdir(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "chdir(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = chdir(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_getdirentry(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "getdirentry(%d, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = getdirentry(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_symlink(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "symlink(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = symlink(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_readlink(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "readlink(%p, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = readlink(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_dup2(int dofork)
+{
+	int a0 = randint();
+	int a1 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "dup2(%d, %d)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = dup2(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_pipe(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "pipe(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = pipe(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try___time(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "__time(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = __time(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try___getcwd(int dofork)
+{
+	void * a0 = randptr();
+	size_t a1 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "__getcwd(%p, %lu)",
+		(a0), (unsigned long)(a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = __getcwd(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_stat(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "stat(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = stat(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_lstat(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "lstat(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = lstat(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static tryfunc funcs2[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_lseek,
+	try_chdir,
+	try_dup2,
+	try___getcwd,
+	NULL
+};
+
+static tryfunc funcs3[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_lseek,
+	try_chdir,
+	try_dup2,
+	try___getcwd,
+	NULL
+};
+
+static tryfunc funcs4[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_lseek,
+	try_fsync,
+	try_ftruncate,
+	try_fstat,
+	try_remove,
+	try_rename,
+	try_mkdir,
+	try_rmdir,
+	try_chdir,
+	try_getdirentry,
+	try_dup2,
+	try___getcwd,
+	NULL
+};
+
+static tryfunc funcs5[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_ioctl,
+	try_lseek,
+	try_fsync,
+	try_ftruncate,
+	try_fstat,
+	try_remove,
+	try_rename,
+	try_link,
+	try_mkdir,
+	try_rmdir,
+	try_chdir,
+	try_getdirentry,
+	try_symlink,
+	try_readlink,
+	try_dup2,
+	try_pipe,
+	try___time,
+	try___getcwd,
+	try_stat,
+	try_lstat,
+	NULL
+};
+
+static tryfunc *tables[4] = {
+	funcs2,
+	funcs3,
+	funcs4,
+	funcs5,
+};
+
+void
+trycalls(int asst, int dofork, int count)
+{
+	tryfunc *list;
+	int i, j;
+
+	assert(asst>=2 && asst<=5);
+	list = tables[asst-2];
+
+	for (i=0; i<count; i++) {
+		for (j=0; list[j]; j++) {
+			(*list[j])(dofork);
+		}
+	}
+}
+
diff --git a/user/testbin/rmdirtest/.depend b/user/testbin/rmdirtest/.depend
new file mode 100644
index 0000000..afd1074
--- /dev/null
+++ b/user/testbin/rmdirtest/.depend
@@ -0,0 +1,28 @@
+
+$(MYBUILDDIR)/rmdirtest.o: \
+ rmdirtest.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/rmdirtest/build b/user/testbin/rmdirtest/build
new file mode 120000
index 0000000..7e46390
--- /dev/null
+++ b/user/testbin/rmdirtest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/rmdirtest
\ No newline at end of file
diff --git a/user/testbin/rmtest/.depend b/user/testbin/rmtest/.depend
new file mode 100644
index 0000000..f397bc9
--- /dev/null
+++ b/user/testbin/rmtest/.depend
@@ -0,0 +1,23 @@
+
+$(MYBUILDDIR)/rmtest.o: \
+ rmtest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/rmtest/build b/user/testbin/rmtest/build
new file mode 120000
index 0000000..6b61ef1
--- /dev/null
+++ b/user/testbin/rmtest/build
@@ -0,0 +1 @@
+../../../build/user/testbin/rmtest
\ No newline at end of file
diff --git a/user/testbin/sink/.depend b/user/testbin/sink/.depend
new file mode 100644
index 0000000..66ff8ce
--- /dev/null
+++ b/user/testbin/sink/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/sink.o: \
+ sink.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/sink/build b/user/testbin/sink/build
new file mode 120000
index 0000000..26ee461
--- /dev/null
+++ b/user/testbin/sink/build
@@ -0,0 +1 @@
+../../../build/user/testbin/sink
\ No newline at end of file
diff --git a/user/testbin/sort/.depend b/user/testbin/sort/.depend
new file mode 100644
index 0000000..0df8ba2
--- /dev/null
+++ b/user/testbin/sort/.depend
@@ -0,0 +1,11 @@
+
+$(MYBUILDDIR)/sort.o: \
+ sort.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/sort/build b/user/testbin/sort/build
new file mode 120000
index 0000000..12c8f69
--- /dev/null
+++ b/user/testbin/sort/build
@@ -0,0 +1 @@
+../../../build/user/testbin/sort
\ No newline at end of file
diff --git a/user/testbin/sty/.depend b/user/testbin/sty/.depend
new file mode 100644
index 0000000..ed72748
--- /dev/null
+++ b/user/testbin/sty/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/sty.o: \
+ sty.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/sty/build b/user/testbin/sty/build
new file mode 120000
index 0000000..bf32073
--- /dev/null
+++ b/user/testbin/sty/build
@@ -0,0 +1 @@
+../../../build/user/testbin/sty
\ No newline at end of file
diff --git a/user/testbin/tail/.depend b/user/testbin/tail/.depend
new file mode 100644
index 0000000..39d99c1
--- /dev/null
+++ b/user/testbin/tail/.depend
@@ -0,0 +1,19 @@
+
+$(MYBUILDDIR)/tail.o: \
+ tail.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h
+
diff --git a/user/testbin/tail/build b/user/testbin/tail/build
new file mode 120000
index 0000000..f6deb6d
--- /dev/null
+++ b/user/testbin/tail/build
@@ -0,0 +1 @@
+../../../build/user/testbin/tail
\ No newline at end of file
diff --git a/user/testbin/tictac/.depend b/user/testbin/tictac/.depend
new file mode 100644
index 0000000..020eaf8
--- /dev/null
+++ b/user/testbin/tictac/.depend
@@ -0,0 +1,18 @@
+
+$(MYBUILDDIR)/tictac.o: \
+ tictac.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+
diff --git a/user/testbin/tictac/build b/user/testbin/tictac/build
new file mode 120000
index 0000000..4b66d6d
--- /dev/null
+++ b/user/testbin/tictac/build
@@ -0,0 +1 @@
+../../../build/user/testbin/tictac
\ No newline at end of file
diff --git a/user/testbin/triplehuge/.depend b/user/testbin/triplehuge/.depend
new file mode 100644
index 0000000..769f511
--- /dev/null
+++ b/user/testbin/triplehuge/.depend
@@ -0,0 +1,23 @@
+
+$(MYBUILDDIR)/triplehuge.o: \
+ triplehuge.c \
+ triple.h
+$(MYBUILDDIR)/triple.o: \
+ triple.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ triple.h
+
diff --git a/user/testbin/triplehuge/build b/user/testbin/triplehuge/build
new file mode 120000
index 0000000..5117bec
--- /dev/null
+++ b/user/testbin/triplehuge/build
@@ -0,0 +1 @@
+../../../build/user/testbin/triplehuge
\ No newline at end of file
diff --git a/user/testbin/triplemat/.depend b/user/testbin/triplemat/.depend
new file mode 100644
index 0000000..0c412c8
--- /dev/null
+++ b/user/testbin/triplemat/.depend
@@ -0,0 +1,23 @@
+
+$(MYBUILDDIR)/triplemat.o: \
+ triplemat.c \
+ triple.h
+$(MYBUILDDIR)/triple.o: \
+ ../triplehuge/triple.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ ../triplehuge/triple.h
+
diff --git a/user/testbin/triplemat/build b/user/testbin/triplemat/build
new file mode 120000
index 0000000..0271ee5
--- /dev/null
+++ b/user/testbin/triplemat/build
@@ -0,0 +1 @@
+../../../build/user/testbin/triplemat
\ No newline at end of file
diff --git a/user/testbin/triplesort/.depend b/user/testbin/triplesort/.depend
new file mode 100644
index 0000000..8418a82
--- /dev/null
+++ b/user/testbin/triplesort/.depend
@@ -0,0 +1,23 @@
+
+$(MYBUILDDIR)/triplesort.o: \
+ triplesort.c \
+ triple.h
+$(MYBUILDDIR)/triple.o: \
+ ../triplehuge/triple.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ ../triplehuge/triple.h
+
diff --git a/user/testbin/triplesort/build b/user/testbin/triplesort/build
new file mode 120000
index 0000000..c1fdd10
--- /dev/null
+++ b/user/testbin/triplesort/build
@@ -0,0 +1 @@
+../../../build/user/testbin/triplesort
\ No newline at end of file
